digraph FileAnalysis {
  rankdir=LR;
  node [shape=box, style=filled, fillcolor=lightblue];

  "getInstance" [fillcolor=lightblue];
  "setConfig" [fillcolor=lightblue];
  "setHass" [fillcolor=lightblue];
  "initializeServices" [fillcolor=lightblue];
  "initializeApi" [fillcolor=lightblue];
  "loadEntityData" [fillcolor=lightblue];
  "getParts" [fillcolor=lightblue];
  "getParameterService" [fillcolor=lightblue];
  "getRenderingService" [fillcolor=lightblue];
  "getWebSocketService" [fillcolor=lightblue];
  "initializeWebSocketPlugin" [fillcolor=lightblue];
  "handleWebSocketMessage" [fillcolor=lightblue];
  "getWebSocketDiagnostics" [fillcolor=lightblue];
  "subscribeToEntityChanges" [fillcolor=lightblue];
  "getWebSocketPlugin" [fillcolor=lightblue];
  "resetApiFailures" [fillcolor=lightblue];
  "setConfig" -> "initializeServices";
  "setConfig" -> "loadEntityData";
  "setHass" -> "getInstance";
  "setHass" -> "setHass";
  "setHass" -> "initializeServices";
  "setHass" -> "loadEntityData";
  "initializeServices" -> "getInstance";
  "initializeServices" -> "setHass";
  "initializeServices" -> "getInstance";
  "initializeServices" -> "setConfig";
  "initializeServices" -> "getInstance";
  "initializeServices" -> "initializeApi";
  "initializeServices" -> "initializeWebSocketPlugin";
  "loadEntityData" -> "getInstance";
  "getParts" -> "getInstance";
  "getWebSocketService" -> "getInstance";
  "initializeWebSocketPlugin" -> "getInstance";
  "initializeWebSocketPlugin" -> "handleWebSocketMessage";
  "handleWebSocketMessage" -> "getInstance";
  "getWebSocketDiagnostics" -> "getInstance";
  "getWebSocketDiagnostics" -> "getInstance";
  "subscribeToEntityChanges" -> "getWebSocketService";
  "log" [fillcolor=lightgreen];
  "setupRendering" [fillcolor=lightgreen];
  "warn" [fillcolor=lightgreen];
  "hasInstance" [fillcolor=lightgreen];
  "initialize" [fillcolor=lightgreen];
  "error" [fillcolor=lightgreen];
  "setParameterService" [fillcolor=lightgreen];
  "setDirectApi" [fillcolor=lightgreen];
  "registerEntityOfInterest" [fillcolor=lightgreen];
  "isInitialDataLoaded" [fillcolor=lightgreen];
  "setHassData" [fillcolor=lightgreen];
  "markInitialDataLoaded" [fillcolor=lightgreen];
  "getNewestData" [fillcolor=lightgreen];
  "endsWith" [fillcolor=lightgreen];
  "slice" [fillcolor=lightgreen];
  "replace" [fillcolor=lightgreen];
  "startsWith" [fillcolor=lightgreen];
  "configure" [fillcolor=lightgreen];
  "onMessage" [fillcolor=lightgreen];
  "connect" [fillcolor=lightgreen];
  "substring" [fillcolor=lightgreen];
  "stringify" [fillcolor=lightgreen];
  "includes" [fillcolor=lightgreen];
  "has" [fillcolor=lightgreen];
  "set" [fillcolor=lightgreen];
  "isDirectPartReference" [fillcolor=lightgreen];
  "isApiConnected" [fillcolor=lightgreen];
  "catch" [fillcolor=lightgreen];
  "then" [fillcolor=lightgreen];
  "getParameterValueWithDirectReference" [fillcolor=lightgreen];
  "dispatchEvent" [fillcolor=lightgreen];
  "updateParameter" [fillcolor=lightgreen];
  "storeOrphanedParameter" [fillcolor=lightgreen];
  "getConnectionStatus" [fillcolor=lightgreen];
  "getApiStatus" [fillcolor=lightgreen];
  "getStats" [fillcolor=lightgreen];
  "subscribeToEntity" [fillcolor=lightgreen];
  "logApiStats" [fillcolor=lightgreen];
  "setConfig" -> "log";
  "setConfig" -> "log";
  "setConfig" -> "log";
  "setConfig" -> "log";
  "setConfig" -> "setupRendering";
  "setHass" -> "log";
  "setHass" -> "log";
  "initializeServices" -> "log";
  "initializeServices" -> "warn";
  "initializeServices" -> "hasInstance";
  "initializeServices" -> "log";
  "initializeServices" -> "initialize";
  "initializeServices" -> "log";
  "initializeServices" -> "error";
  "initializeServices" -> "setupRendering";
  "initializeServices" -> "log";
  "initializeApi" -> "log";
  "initializeApi" -> "warn";
  "initializeApi" -> "error";
  "initializeApi" -> "setParameterService";
  "initializeApi" -> "setDirectApi";
  "initializeApi" -> "log";
  "initializeApi" -> "error";
  "loadEntityData" -> "registerEntityOfInterest";
  "loadEntityData" -> "isInitialDataLoaded";
  "loadEntityData" -> "log";
  "loadEntityData" -> "setHassData";
  "loadEntityData" -> "markInitialDataLoaded";
  "loadEntityData" -> "log";
  "loadEntityData" -> "warn";
  "loadEntityData" -> "warn";
  "getParts" -> "getNewestData";
  "initializeWebSocketPlugin" -> "log";
  "initializeWebSocketPlugin" -> "endsWith";
  "initializeWebSocketPlugin" -> "slice";
  "initializeWebSocketPlugin" -> "replace";
  "initializeWebSocketPlugin" -> "log";
  "initializeWebSocketPlugin" -> "log";
  "initializeWebSocketPlugin" -> "error";
  "initializeWebSocketPlugin" -> "startsWith";
  "initializeWebSocketPlugin" -> "startsWith";
  "initializeWebSocketPlugin" -> "replace";
  "initializeWebSocketPlugin" -> "replace";
  "initializeWebSocketPlugin" -> "log";
  "initializeWebSocketPlugin" -> "log";
  "initializeWebSocketPlugin" -> "configure";
  "initializeWebSocketPlugin" -> "onMessage";
  "initializeWebSocketPlugin" -> "connect";
  "initializeWebSocketPlugin" -> "log";
  "handleWebSocketMessage" -> "log";
  "handleWebSocketMessage" -> "substring";
  "handleWebSocketMessage" -> "stringify";
  "handleWebSocketMessage" -> "includes";
  "handleWebSocketMessage" -> "has";
  "handleWebSocketMessage" -> "log";
  "handleWebSocketMessage" -> "set";
  "handleWebSocketMessage" -> "log";
  "handleWebSocketMessage" -> "isDirectPartReference";
  "handleWebSocketMessage" -> "isApiConnected";
  "handleWebSocketMessage" -> "log";
  "handleWebSocketMessage" -> "catch";
  "handleWebSocketMessage" -> "then";
  "handleWebSocketMessage" -> "getParameterValueWithDirectReference";
  "handleWebSocketMessage" -> "log";
  "handleWebSocketMessage" -> "error";
  "handleWebSocketMessage" -> "dispatchEvent";
  "handleWebSocketMessage" -> "updateParameter";
  "handleWebSocketMessage" -> "dispatchEvent";
  "handleWebSocketMessage" -> "warn";
  "handleWebSocketMessage" -> "storeOrphanedParameter";
  "getWebSocketDiagnostics" -> "getConnectionStatus";
  "getWebSocketDiagnostics" -> "getApiStatus";
  "getWebSocketDiagnostics" -> "getStats";
  "subscribeToEntityChanges" -> "log";
  "subscribeToEntityChanges" -> "subscribeToEntity";
  "resetApiFailures" -> "logApiStats";
  "resetApiFailures" -> "log";
  "resetApiFailures" -> "logApiStats";
  "resetApiFailures" -> "error";
  "resetApiFailures" -> "warn";
}
