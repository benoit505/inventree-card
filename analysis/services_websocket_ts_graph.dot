digraph FileAnalysis {
  rankdir=LR;
  node [shape=box, style=filled, fillcolor=lightblue];

  "getInstance" [fillcolor=lightblue];
  "getConnectionId" [fillcolor=lightblue];
  "setHass" [fillcolor=lightblue];
  "subscribeToEntity" [fillcolor=lightblue];
  "_handleConnectionOpen" [fillcolor=lightgrey];
  "_handleEntityMessage" [fillcolor=lightgrey];
  "setConfig" [fillcolor=lightblue];
  "getConnectionStatus" [fillcolor=lightblue];
  "subscribeToParameter" [fillcolor=lightblue];
  "filteredCallback" [fillcolor=lightblue];
  "subscribeToParts" [fillcolor=lightblue];
  "filteredCallback" [fillcolor=lightblue];
  "_subscribeToEntity" [fillcolor=lightgrey];
  "_unsubscribeFromEntity" [fillcolor=lightgrey];
  "_resubscribeAll" [fillcolor=lightgrey];
  "updateParameter" [fillcolor=lightblue];
  "subscribeToCrossEntityParameter" [fillcolor=lightblue];
  "subscribeToFilteredParts" [fillcolor=lightblue];
  "isConnected" [fillcolor=lightblue];
  "getDiagnostics" [fillcolor=lightblue];
  "_startHealthCheck" [fillcolor=lightgrey];
  "destroy" [fillcolor=lightblue];
  "setDirectApi" [fillcolor=lightblue];
  "testApiEndpoints" [fillcolor=lightblue];
  "checkFilterCondition" [fillcolor=lightblue];
  "checkConditionWithRetry" [fillcolor=lightblue];
  "getParameterWithFallbackLogic" [fillcolor=lightblue];
  "getPartIdFromParameterName" [fillcolor=lightblue];
  "useFallbackData" [fillcolor=lightblue];
  "compareParameterValues" [fillcolor=lightblue];
  "resetApiFailureCounter" [fillcolor=lightblue];
  "getApiStatus" [fillcolor=lightblue];
  "_notifyParameterChanged" [fillcolor=lightgrey];
  "getPartIdFromEntityId" [fillcolor=lightblue];
  "getParameterFromEntityState" [fillcolor=lightblue];
  "logApiUsageStats" [fillcolor=lightblue];
  "findEntityForPart" [fillcolor=lightblue];
  "getMaxApiFailures" [fillcolor=lightblue];
  "checkCrossEntityCondition" [fillcolor=lightblue];
  "useFallbackForCondition" [fillcolor=lightblue];
  "onParameterChange" [fillcolor=lightblue];
  "findEntityForPartAndTrack" [fillcolor=lightblue];
  "_handleWebSocketMessage" [fillcolor=lightgrey];
  "updateEntityData" [fillcolor=lightblue];
  "testStateIntegration" [fillcolor=lightblue];
  "initStateIntegration" [fillcolor=lightblue];
  "testConnection" [fillcolor=lightblue];
  "_classicSubscribeToEntity" [fillcolor=lightgrey];
  "_sendAuthentication" [fillcolor=lightgrey];
  "_sendSubscription" [fillcolor=lightgrey];
  "_isMessageForEntity" [fillcolor=lightgrey];
  "_processMessage" [fillcolor=lightgrey];
  "setHass" -> "getConnectionId";
  "setHass" -> "_resubscribeAll";
  "setHass" -> "testApiEndpoints";
  "subscribeToEntity" -> "_classicSubscribeToEntity";
  "_handleConnectionOpen" -> "_sendAuthentication";
  "_handleConnectionOpen" -> "_sendSubscription";
  "_handleEntityMessage" -> "_isMessageForEntity";
  "_handleEntityMessage" -> "_processMessage";
  "getConnectionStatus" -> "isConnected";
  "subscribeToParameter" -> "subscribeToEntity";
  "subscribeToParts" -> "subscribeToEntity";
  "_resubscribeAll" -> "_subscribeToEntity";
  "updateParameter" -> "getInstance";
  "updateParameter" -> "updateParameter";
  "subscribeToCrossEntityParameter" -> "subscribeToEntity";
  "subscribeToFilteredParts" -> "subscribeToParts";
  "subscribeToFilteredParts" -> "subscribeToParts";
  "subscribeToFilteredParts" -> "checkFilterCondition";
  "subscribeToFilteredParts" -> "checkFilterCondition";
  "_startHealthCheck" -> "_unsubscribeFromEntity";
  "destroy" -> "_unsubscribeFromEntity";
  "setDirectApi" -> "testApiEndpoints";
  "checkFilterCondition" -> "compareParameterValues";
  "checkFilterCondition" -> "useFallbackForCondition";
  "checkFilterCondition" -> "checkCrossEntityCondition";
  "checkFilterCondition" -> "checkConditionWithRetry";
  "checkConditionWithRetry" -> "getParameterWithFallbackLogic";
  "checkConditionWithRetry" -> "compareParameterValues";
  "getParameterWithFallbackLogic" -> "getPartIdFromParameterName";
  "getParameterWithFallbackLogic" -> "useFallbackData";
  "getParameterWithFallbackLogic" -> "useFallbackData";
  "getParameterWithFallbackLogic" -> "useFallbackData";
  "getParameterWithFallbackLogic" -> "useFallbackData";
  "getPartIdFromParameterName" -> "findEntityForPart";
  "checkCrossEntityCondition" -> "compareParameterValues";
  "useFallbackForCondition" -> "compareParameterValues";
  "useFallbackForCondition" -> "checkCrossEntityCondition";
  "useFallbackForCondition" -> "compareParameterValues";
  "onParameterChange" -> "getInstance";
  "onParameterChange" -> "findEntityForPart";
  "onParameterChange" -> "updateParameter";
  "findEntityForPartAndTrack" -> "findEntityForPart";
  "findEntityForPartAndTrack" -> "getInstance";
  "_handleWebSocketMessage" -> "onParameterChange";
  "updateEntityData" -> "getInstance";
  "testStateIntegration" -> "getInstance";
  "initStateIntegration" -> "testStateIntegration";
  "initStateIntegration" -> "findEntityForPart";
  "initStateIntegration" -> "getInstance";
  "_classicSubscribeToEntity" -> "_subscribeToEntity";
  "_classicSubscribeToEntity" -> "_unsubscribeFromEntity";
  "now" [fillcolor=lightgreen];
  "log" [fillcolor=lightgreen];
  "random" [fillcolor=lightgreen];
  "getConnection" [fillcolor=lightgreen];
  "bind" [fillcolor=lightgreen];
  "removeCallbacks" [fillcolor=lightgreen];
  "warn" [fillcolor=lightgreen];
  "parse" [fillcolor=lightgreen];
  "callback" [fillcolor=lightgreen];
  "error" [fillcolor=lightgreen];
  "reduce" [fillcolor=lightgreen];
  "find" [fillcolor=lightgreen];
  "toLowerCase" [fillcolor=lightgreen];
  "subscribeEvents" [fillcolor=lightgreen];
  "get" [fillcolor=lightgreen];
  "forEach" [fillcolor=lightgreen];
  "set" [fillcolor=lightgreen];
  "then" [fillcolor=lightgreen];
  "resolve" [fillcolor=lightgreen];
  "unsub" [fillcolor=lightgreen];
  "catch" [fillcolor=lightgreen];
  "unsubFunc" [fillcolor=lightgreen];
  "delete" [fillcolor=lightgreen];
  "clear" [fillcolor=lightgreen];
  "callService" [fillcolor=lightgreen];
  "dispatchEvent" [fillcolor=lightgreen];
  "stringify" [fillcolor=lightgreen];
  "some" [fillcolor=lightgreen];
  "includes" [fillcolor=lightgreen];
  "filter" [fillcolor=lightgreen];
  "push" [fillcolor=lightgreen];
  "from" [fillcolor=lightgreen];
  "keys" [fillcolor=lightgreen];
  "map" [fillcolor=lightgreen];
  "entries" [fillcolor=lightgreen];
  "clearInterval" [fillcolor=lightgreen];
  "setInterval" [fillcolor=lightgreen];
  "startsWith" [fillcolor=lightgreen];
  "getApiUrl" [fillcolor=lightgreen];
  "setFallbackEnabled" [fillcolor=lightgreen];
  "setTimeout" [fillcolor=lightgreen];
  "testConnectionExactFormat" [fillcolor=lightgreen];
  "has" [fillcolor=lightgreen];
  "add" [fillcolor=lightgreen];
  "split" [fillcolor=lightgreen];
  "parseInt" [fillcolor=lightgreen];
  "isNaN" [fillcolor=lightgreen];
  "getParameterValue" [fillcolor=lightgreen];
  "match" [fillcolor=lightgreen];
  "isArray" [fillcolor=lightgreen];
  "String" [fillcolor=lightgreen];
  "Number" [fillcolor=lightgreen];
  "getApiStats" [fillcolor=lightgreen];
  "trackLastUpdate" [fillcolor=lightgreen];
  "setWebSocketData" [fillcolor=lightgreen];
  "getWebSocketData" [fillcolor=lightgreen];
  "addEventListener" [fillcolor=lightgreen];
  "send" [fillcolor=lightgreen];
  "getConnectionId" -> "now";
  "getConnectionId" -> "now";
  "setHass" -> "now";
  "setHass" -> "log";
  "setHass" -> "random";
  "subscribeToEntity" -> "log";
  "subscribeToEntity" -> "getConnection";
  "subscribeToEntity" -> "bind";
  "subscribeToEntity" -> "bind";
  "subscribeToEntity" -> "log";
  "subscribeToEntity" -> "removeCallbacks";
  "subscribeToEntity" -> "bind";
  "subscribeToEntity" -> "bind";
  "subscribeToEntity" -> "warn";
  "_handleConnectionOpen" -> "log";
  "_handleEntityMessage" -> "parse";
  "_handleEntityMessage" -> "callback";
  "_handleEntityMessage" -> "error";
  "getConnectionStatus" -> "reduce";
  "subscribeToParameter" -> "log";
  "filteredCallback" -> "find";
  "filteredCallback" -> "find";
  "filteredCallback" -> "toLowerCase";
  "filteredCallback" -> "toLowerCase";
  "filteredCallback" -> "log";
  "filteredCallback" -> "callback";
  "subscribeToParts" -> "log";
  "filteredCallback" -> "log";
  "filteredCallback" -> "callback";
  "_subscribeToEntity" -> "warn";
  "_subscribeToEntity" -> "log";
  "_subscribeToEntity" -> "subscribeEvents";
  "_subscribeToEntity" -> "log";
  "_subscribeToEntity" -> "get";
  "_subscribeToEntity" -> "log";
  "_subscribeToEntity" -> "forEach";
  "_subscribeToEntity" -> "callback";
  "_subscribeToEntity" -> "error";
  "_subscribeToEntity" -> "error";
  "_subscribeToEntity" -> "set";
  "_subscribeToEntity" -> "log";
  "_subscribeToEntity" -> "error";
  "_subscribeToEntity" -> "error";
  "_unsubscribeFromEntity" -> "get";
  "_unsubscribeFromEntity" -> "log";
  "_unsubscribeFromEntity" -> "then";
  "_unsubscribeFromEntity" -> "resolve";
  "_unsubscribeFromEntity" -> "unsub";
  "_unsubscribeFromEntity" -> "catch";
  "_unsubscribeFromEntity" -> "then";
  "_unsubscribeFromEntity" -> "unsubFunc";
  "_unsubscribeFromEntity" -> "error";
  "_unsubscribeFromEntity" -> "error";
  "_unsubscribeFromEntity" -> "warn";
  "_unsubscribeFromEntity" -> "delete";
  "_unsubscribeFromEntity" -> "log";
  "_unsubscribeFromEntity" -> "error";
  "_unsubscribeFromEntity" -> "delete";
  "_resubscribeAll" -> "log";
  "_resubscribeAll" -> "forEach";
  "_resubscribeAll" -> "log";
  "_resubscribeAll" -> "then";
  "_resubscribeAll" -> "resolve";
  "_resubscribeAll" -> "unsub";
  "_resubscribeAll" -> "catch";
  "_resubscribeAll" -> "then";
  "_resubscribeAll" -> "unsubFunc";
  "_resubscribeAll" -> "error";
  "_resubscribeAll" -> "error";
  "_resubscribeAll" -> "warn";
  "_resubscribeAll" -> "warn";
  "_resubscribeAll" -> "clear";
  "_resubscribeAll" -> "forEach";
  "_resubscribeAll" -> "log";
  "_resubscribeAll" -> "log";
  "updateParameter" -> "error";
  "updateParameter" -> "log";
  "updateParameter" -> "callService";
  "updateParameter" -> "log";
  "updateParameter" -> "dispatchEvent";
  "updateParameter" -> "error";
  "subscribeToCrossEntityParameter" -> "log";
  "subscribeToCrossEntityParameter" -> "stringify";
  "subscribeToCrossEntityParameter" -> "stringify";
  "subscribeToCrossEntityParameter" -> "log";
  "subscribeToCrossEntityParameter" -> "get";
  "subscribeToCrossEntityParameter" -> "find";
  "subscribeToCrossEntityParameter" -> "toLowerCase";
  "subscribeToCrossEntityParameter" -> "toLowerCase";
  "subscribeToCrossEntityParameter" -> "now";
  "subscribeToCrossEntityParameter" -> "log";
  "subscribeToCrossEntityParameter" -> "set";
  "subscribeToCrossEntityParameter" -> "now";
  "subscribeToCrossEntityParameter" -> "clear";
  "subscribeToCrossEntityParameter" -> "callback";
  "subscribeToCrossEntityParameter" -> "log";
  "subscribeToCrossEntityParameter" -> "log";
  "subscribeToFilteredParts" -> "log";
  "subscribeToFilteredParts" -> "callback";
  "subscribeToFilteredParts" -> "some";
  "subscribeToFilteredParts" -> "includes";
  "subscribeToFilteredParts" -> "callback";
  "subscribeToFilteredParts" -> "log";
  "subscribeToFilteredParts" -> "filter";
  "subscribeToFilteredParts" -> "filter";
  "subscribeToFilteredParts" -> "push";
  "subscribeToFilteredParts" -> "filter";
  "subscribeToFilteredParts" -> "includes";
  "subscribeToFilteredParts" -> "filter";
  "subscribeToFilteredParts" -> "push";
  "subscribeToFilteredParts" -> "filter";
  "subscribeToFilteredParts" -> "includes";
  "subscribeToFilteredParts" -> "callback";
  "getDiagnostics" -> "from";
  "getDiagnostics" -> "keys";
  "getDiagnostics" -> "map";
  "getDiagnostics" -> "from";
  "getDiagnostics" -> "entries";
  "_startHealthCheck" -> "clearInterval";
  "_startHealthCheck" -> "setInterval";
  "_startHealthCheck" -> "warn";
  "_startHealthCheck" -> "forEach";
  "_startHealthCheck" -> "warn";
  "_startHealthCheck" -> "delete";
  "destroy" -> "clearInterval";
  "destroy" -> "forEach";
  "destroy" -> "clear";
  "destroy" -> "clear";
  "setDirectApi" -> "startsWith";
  "setDirectApi" -> "getApiUrl";
  "setDirectApi" -> "setFallbackEnabled";
  "setDirectApi" -> "warn";
  "setDirectApi" -> "setFallbackEnabled";
  "setDirectApi" -> "log";
  "setDirectApi" -> "setTimeout";
  "testApiEndpoints" -> "log";
  "testApiEndpoints" -> "testConnectionExactFormat";
  "testApiEndpoints" -> "warn";
  "testApiEndpoints" -> "now";
  "testApiEndpoints" -> "error";
  "checkFilterCondition" -> "stringify";
  "checkFilterCondition" -> "has";
  "checkFilterCondition" -> "log";
  "checkFilterCondition" -> "resolve";
  "checkFilterCondition" -> "add";
  "checkFilterCondition" -> "startsWith";
  "checkFilterCondition" -> "split";
  "checkFilterCondition" -> "error";
  "checkFilterCondition" -> "parseInt";
  "checkFilterCondition" -> "isNaN";
  "checkFilterCondition" -> "error";
  "checkFilterCondition" -> "log";
  "checkFilterCondition" -> "getParameterValue";
  "checkFilterCondition" -> "log";
  "checkFilterCondition" -> "log";
  "checkFilterCondition" -> "error";
  "checkFilterCondition" -> "includes";
  "checkFilterCondition" -> "split";
  "checkFilterCondition" -> "error";
  "checkFilterCondition" -> "setTimeout";
  "checkFilterCondition" -> "delete";
  "checkConditionWithRetry" -> "get";
  "checkConditionWithRetry" -> "now";
  "checkConditionWithRetry" -> "set";
  "getParameterWithFallbackLogic" -> "now";
  "getParameterWithFallbackLogic" -> "log";
  "getParameterWithFallbackLogic" -> "error";
  "getParameterWithFallbackLogic" -> "getParameterValue";
  "getParameterWithFallbackLogic" -> "log";
  "getParameterWithFallbackLogic" -> "warn";
  "getParameterWithFallbackLogic" -> "warn";
  "getParameterWithFallbackLogic" -> "error";
  "getParameterWithFallbackLogic" -> "warn";
  "getParameterWithFallbackLogic" -> "warn";
  "getPartIdFromParameterName" -> "match";
  "getPartIdFromParameterName" -> "parseInt";
  "getPartIdFromParameterName" -> "error";
  "useFallbackData" -> "log";
  "useFallbackData" -> "isArray";
  "useFallbackData" -> "find";
  "useFallbackData" -> "toLowerCase";
  "useFallbackData" -> "toLowerCase";
  "useFallbackData" -> "log";
  "useFallbackData" -> "error";
  "compareParameterValues" -> "log";
  "compareParameterValues" -> "toLowerCase";
  "compareParameterValues" -> "String";
  "compareParameterValues" -> "toLowerCase";
  "compareParameterValues" -> "String";
  "compareParameterValues" -> "isNaN";
  "compareParameterValues" -> "Number";
  "compareParameterValues" -> "Number";
  "compareParameterValues" -> "isNaN";
  "compareParameterValues" -> "Number";
  "compareParameterValues" -> "Number";
  "compareParameterValues" -> "log";
  "compareParameterValues" -> "log";
  "compareParameterValues" -> "includes";
  "compareParameterValues" -> "log";
  "compareParameterValues" -> "log";
  "compareParameterValues" -> "log";
  "compareParameterValues" -> "log";
  "compareParameterValues" -> "log";
  "compareParameterValues" -> "log";
  "resetApiFailureCounter" -> "log";
  "_notifyParameterChanged" -> "log";
  "_notifyParameterChanged" -> "has";
  "_notifyParameterChanged" -> "log";
  "_notifyParameterChanged" -> "add";
  "_notifyParameterChanged" -> "setTimeout";
  "_notifyParameterChanged" -> "delete";
  "_notifyParameterChanged" -> "dispatchEvent";
  "getParameterFromEntityState" -> "find";
  "getParameterFromEntityState" -> "find";
  "getParameterFromEntityState" -> "toLowerCase";
  "getParameterFromEntityState" -> "toLowerCase";
  "logApiUsageStats" -> "log";
  "logApiUsageStats" -> "getApiStats";
  "logApiUsageStats" -> "log";
  "logApiUsageStats" -> "log";
  "findEntityForPart" -> "filter";
  "findEntityForPart" -> "keys";
  "findEntityForPart" -> "startsWith";
  "findEntityForPart" -> "isArray";
  "findEntityForPart" -> "find";
  "checkCrossEntityCondition" -> "error";
  "checkCrossEntityCondition" -> "find";
  "checkCrossEntityCondition" -> "toLowerCase";
  "checkCrossEntityCondition" -> "toLowerCase";
  "checkCrossEntityCondition" -> "log";
  "checkCrossEntityCondition" -> "error";
  "useFallbackForCondition" -> "log";
  "useFallbackForCondition" -> "startsWith";
  "useFallbackForCondition" -> "split";
  "useFallbackForCondition" -> "error";
  "useFallbackForCondition" -> "isArray";
  "useFallbackForCondition" -> "find";
  "useFallbackForCondition" -> "toLowerCase";
  "useFallbackForCondition" -> "toLowerCase";
  "useFallbackForCondition" -> "log";
  "useFallbackForCondition" -> "includes";
  "useFallbackForCondition" -> "split";
  "useFallbackForCondition" -> "find";
  "useFallbackForCondition" -> "toLowerCase";
  "useFallbackForCondition" -> "toLowerCase";
  "useFallbackForCondition" -> "error";
  "onParameterChange" -> "trackLastUpdate";
  "onParameterChange" -> "log";
  "onParameterChange" -> "dispatchEvent";
  "onParameterChange" -> "dispatchEvent";
  "onParameterChange" -> "warn";
  "onParameterChange" -> "error";
  "findEntityForPartAndTrack" -> "trackLastUpdate";
  "_handleWebSocketMessage" -> "parse";
  "_handleWebSocketMessage" -> "log";
  "_handleWebSocketMessage" -> "error";
  "updateEntityData" -> "setWebSocketData";
  "updateEntityData" -> "log";
  "updateEntityData" -> "dispatchEvent";
  "testStateIntegration" -> "log";
  "testStateIntegration" -> "setWebSocketData";
  "testStateIntegration" -> "getWebSocketData";
  "testStateIntegration" -> "log";
  "testStateIntegration" -> "error";
  "testStateIntegration" -> "setWebSocketData";
  "testStateIntegration" -> "error";
  "initStateIntegration" -> "log";
  "initStateIntegration" -> "addEventListener";
  "initStateIntegration" -> "trackLastUpdate";
  "initStateIntegration" -> "log";
  "testConnection" -> "warn";
  "testConnection" -> "getConnection";
  "testConnection" -> "log";
  "testConnection" -> "error";
  "_classicSubscribeToEntity" -> "has";
  "_classicSubscribeToEntity" -> "set";
  "_classicSubscribeToEntity" -> "add";
  "_classicSubscribeToEntity" -> "get";
  "_classicSubscribeToEntity" -> "has";
  "_classicSubscribeToEntity" -> "log";
  "_classicSubscribeToEntity" -> "get";
  "_classicSubscribeToEntity" -> "delete";
  "_classicSubscribeToEntity" -> "delete";
  "_sendAuthentication" -> "warn";
  "_sendAuthentication" -> "getConnection";
  "_sendAuthentication" -> "send";
  "_sendAuthentication" -> "stringify";
  "_sendAuthentication" -> "log";
  "_sendAuthentication" -> "error";
  "_sendSubscription" -> "warn";
  "_sendSubscription" -> "getConnection";
  "_sendSubscription" -> "send";
  "_sendSubscription" -> "stringify";
  "_sendSubscription" -> "log";
  "_sendSubscription" -> "error";
  "_isMessageForEntity" -> "includes";
  "_isMessageForEntity" -> "stringify";
}
