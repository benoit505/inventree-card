digraph FileAnalysis {
  rankdir=LR;
  node [shape=box, style=filled, fillcolor=lightblue];

  "getInstance" [fillcolor=lightblue];
  "setupRendering" [fillcolor=lightblue];
  "handleWebSocketUpdate" [fillcolor=lightblue];
  "startIdleTimer" [fillcolor=lightblue];
  "executeIdleRender" [fillcolor=lightblue];
  "restartIdleTimer" [fillcolor=lightblue];
  "registerRenderCallback" [fillcolor=lightblue];
  "notifyRenderCallbacks" [fillcolor=lightblue];
  "executeRenderCallbacks" [fillcolor=lightblue];
  "forceRender" [fillcolor=lightblue];
  "shouldRender" [fillcolor=lightblue];
  "notifyRenderComplete" [fillcolor=lightblue];
  "startScheduler" [fillcolor=lightblue];
  "stopScheduler" [fillcolor=lightblue];
  "processScheduledJobs" [fillcolor=lightblue];
  "shouldRunJob" [fillcolor=lightblue];
  "evaluateCronExpression" [fillcolor=lightblue];
  "matchesCronPart" [fillcolor=lightblue];
  "calculateNextRunTime" [fillcolor=lightblue];
  "addScheduledJob" [fillcolor=lightblue];
  "removeScheduledJob" [fillcolor=lightblue];
  "updateScheduledJob" [fillcolor=lightblue];
  "getScheduledJobs" [fillcolor=lightblue];
  "getScheduledJob" [fillcolor=lightblue];
  "destroy" [fillcolor=lightblue];
  "getTimerStats" [fillcolor=lightblue];
  "getTimerDetails" [fillcolor=lightblue];
  "getRenderingState" [fillcolor=lightblue];
  "getIdleTimerStatus" [fillcolor=lightblue];
  "getSchedulerStatus" [fillcolor=lightblue];
  "trackRenderTiming" [fillcolor=lightblue];
  "getRenderTimings" [fillcolor=lightblue];
  "setupRendering" -> "handleWebSocketUpdate";
  "setupRendering" -> "startIdleTimer";
  "setupRendering" -> "addScheduledJob";
  "setupRendering" -> "notifyRenderCallbacks";
  "handleWebSocketUpdate" -> "notifyRenderCallbacks";
  "startIdleTimer" -> "executeIdleRender";
  "startIdleTimer" -> "executeIdleRender";
  "startIdleTimer" -> "executeIdleRender";
  "executeIdleRender" -> "notifyRenderCallbacks";
  "executeIdleRender" -> "startIdleTimer";
  "restartIdleTimer" -> "startIdleTimer";
  "notifyRenderCallbacks" -> "executeRenderCallbacks";
  "notifyRenderCallbacks" -> "executeRenderCallbacks";
  "forceRender" -> "executeRenderCallbacks";
  "startScheduler" -> "processScheduledJobs";
  "processScheduledJobs" -> "shouldRunJob";
  "processScheduledJobs" -> "calculateNextRunTime";
  "shouldRunJob" -> "evaluateCronExpression";
  "evaluateCronExpression" -> "matchesCronPart";
  "evaluateCronExpression" -> "matchesCronPart";
  "evaluateCronExpression" -> "matchesCronPart";
  "evaluateCronExpression" -> "matchesCronPart";
  "evaluateCronExpression" -> "matchesCronPart";
  "log" [fillcolor=lightgreen];
  "max" [fillcolor=lightgreen];
  "min" [fillcolor=lightgreen];
  "addEventListener" [fillcolor=lightgreen];
  "add" [fillcolor=lightgreen];
  "clearTimeout" [fillcolor=lightgreen];
  "setTimeout" [fillcolor=lightgreen];
  "join" [fillcolor=lightgreen];
  "sort" [fillcolor=lightgreen];
  "from" [fillcolor=lightgreen];
  "has" [fillcolor=lightgreen];
  "clear" [fillcolor=lightgreen];
  "set" [fillcolor=lightgreen];
  "warn" [fillcolor=lightgreen];
  "error" [fillcolor=lightgreen];
  "push" [fillcolor=lightgreen];
  "indexOf" [fillcolor=lightgreen];
  "splice" [fillcolor=lightgreen];
  "now" [fillcolor=lightgreen];
  "substring" [fillcolor=lightgreen];
  "toString" [fillcolor=lightgreen];
  "random" [fillcolor=lightgreen];
  "get" [fillcolor=lightgreen];
  "delete" [fillcolor=lightgreen];
  "callback" [fillcolor=lightgreen];
  "clearInterval" [fillcolor=lightgreen];
  "setInterval" [fillcolor=lightgreen];
  "getTime" [fillcolor=lightgreen];
  "getHours" [fillcolor=lightgreen];
  "getMinutes" [fillcolor=lightgreen];
  "padStart" [fillcolor=lightgreen];
  "includes" [fillcolor=lightgreen];
  "split" [fillcolor=lightgreen];
  "getDate" [fillcolor=lightgreen];
  "getMonth" [fillcolor=lightgreen];
  "getDay" [fillcolor=lightgreen];
  "map" [fillcolor=lightgreen];
  "parseInt" [fillcolor=lightgreen];
  "assign" [fillcolor=lightgreen];
  "values" [fillcolor=lightgreen];
  "getActiveTimers" [fillcolor=lightgreen];
  "clearAll" [fillcolor=lightgreen];
  "getStats" [fillcolor=lightgreen];
  "slice" [fillcolor=lightgreen];
  "filter" [fillcolor=lightgreen];
  "shift" [fillcolor=lightgreen];
  "setupRendering" -> "log";
  "setupRendering" -> "log";
  "setupRendering" -> "max";
  "setupRendering" -> "min";
  "setupRendering" -> "log";
  "setupRendering" -> "log";
  "setupRendering" -> "addEventListener";
  "setupRendering" -> "log";
  "handleWebSocketUpdate" -> "add";
  "handleWebSocketUpdate" -> "clearTimeout";
  "handleWebSocketUpdate" -> "setTimeout";
  "handleWebSocketUpdate" -> "log";
  "handleWebSocketUpdate" -> "join";
  "handleWebSocketUpdate" -> "sort";
  "handleWebSocketUpdate" -> "from";
  "handleWebSocketUpdate" -> "has";
  "handleWebSocketUpdate" -> "log";
  "handleWebSocketUpdate" -> "clear";
  "handleWebSocketUpdate" -> "set";
  "handleWebSocketUpdate" -> "clear";
  "startIdleTimer" -> "log";
  "startIdleTimer" -> "warn";
  "startIdleTimer" -> "warn";
  "startIdleTimer" -> "error";
  "startIdleTimer" -> "setTimeout";
  "startIdleTimer" -> "setTimeout";
  "startIdleTimer" -> "error";
  "startIdleTimer" -> "setTimeout";
  "executeIdleRender" -> "log";
  "restartIdleTimer" -> "log";
  "restartIdleTimer" -> "clearTimeout";
  "registerRenderCallback" -> "push";
  "registerRenderCallback" -> "indexOf";
  "registerRenderCallback" -> "splice";
  "notifyRenderCallbacks" -> "now";
  "notifyRenderCallbacks" -> "substring";
  "notifyRenderCallbacks" -> "toString";
  "notifyRenderCallbacks" -> "random";
  "notifyRenderCallbacks" -> "add";
  "notifyRenderCallbacks" -> "has";
  "notifyRenderCallbacks" -> "clearTimeout";
  "notifyRenderCallbacks" -> "get";
  "notifyRenderCallbacks" -> "setTimeout";
  "notifyRenderCallbacks" -> "delete";
  "notifyRenderCallbacks" -> "delete";
  "notifyRenderCallbacks" -> "set";
  "notifyRenderCallbacks" -> "log";
  "executeRenderCallbacks" -> "now";
  "executeRenderCallbacks" -> "callback";
  "executeRenderCallbacks" -> "error";
  "shouldRender" -> "has";
  "shouldRender" -> "log";
  "shouldRender" -> "set";
  "notifyRenderComplete" -> "now";
  "notifyRenderComplete" -> "log";
  "startScheduler" -> "clearInterval";
  "startScheduler" -> "setInterval";
  "startScheduler" -> "log";
  "stopScheduler" -> "clearInterval";
  "stopScheduler" -> "log";
  "processScheduledJobs" -> "getTime";
  "processScheduledJobs" -> "log";
  "processScheduledJobs" -> "callback";
  "processScheduledJobs" -> "error";
  "shouldRunJob" -> "getTime";
  "shouldRunJob" -> "getHours";
  "shouldRunJob" -> "getMinutes";
  "shouldRunJob" -> "padStart";
  "shouldRunJob" -> "toString";
  "shouldRunJob" -> "padStart";
  "shouldRunJob" -> "toString";
  "shouldRunJob" -> "includes";
  "evaluateCronExpression" -> "split";
  "evaluateCronExpression" -> "getMinutes";
  "evaluateCronExpression" -> "getHours";
  "evaluateCronExpression" -> "getDate";
  "evaluateCronExpression" -> "getMonth";
  "evaluateCronExpression" -> "getDay";
  "matchesCronPart" -> "includes";
  "matchesCronPart" -> "map";
  "matchesCronPart" -> "split";
  "matchesCronPart" -> "parseInt";
  "matchesCronPart" -> "includes";
  "matchesCronPart" -> "includes";
  "matchesCronPart" -> "map";
  "matchesCronPart" -> "split";
  "matchesCronPart" -> "parseInt";
  "matchesCronPart" -> "includes";
  "matchesCronPart" -> "split";
  "matchesCronPart" -> "parseInt";
  "matchesCronPart" -> "includes";
  "matchesCronPart" -> "map";
  "matchesCronPart" -> "split";
  "matchesCronPart" -> "parseInt";
  "matchesCronPart" -> "parseInt";
  "calculateNextRunTime" -> "getTime";
  "calculateNextRunTime" -> "getTime";
  "addScheduledJob" -> "set";
  "addScheduledJob" -> "log";
  "removeScheduledJob" -> "delete";
  "removeScheduledJob" -> "log";
  "updateScheduledJob" -> "get";
  "updateScheduledJob" -> "assign";
  "updateScheduledJob" -> "log";
  "getScheduledJobs" -> "from";
  "getScheduledJobs" -> "values";
  "getScheduledJob" -> "get";
  "destroy" -> "getActiveTimers";
  "destroy" -> "clearAll";
  "destroy" -> "clear";
  "destroy" -> "clear";
  "destroy" -> "log";
  "getTimerStats" -> "getStats";
  "getTimerDetails" -> "getActiveTimers";
  "getRenderingState" -> "now";
  "getSchedulerStatus" -> "map";
  "getSchedulerStatus" -> "slice";
  "getSchedulerStatus" -> "sort";
  "getSchedulerStatus" -> "filter";
  "getSchedulerStatus" -> "from";
  "getSchedulerStatus" -> "values";
  "trackRenderTiming" -> "now";
  "trackRenderTiming" -> "push";
  "trackRenderTiming" -> "shift";
  "trackRenderTiming" -> "log";
  "trackRenderTiming" -> "error";
}
