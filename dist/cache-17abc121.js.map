{"version":3,"file":"cache-17abc121.js","sources":["../src/utils/metrics-tracker.ts","../node_modules/redux/dist/redux.mjs","../node_modules/immer/dist/immer.mjs","../node_modules/reselect/dist/reselect.mjs","../node_modules/redux-thunk/dist/redux-thunk.mjs","../node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs","../src/services/wled-service.ts","../src/services/inventree-api-service.ts","../src/store/slices/partsSlice.ts","../src/store/slices/apiSlice.ts","../src/store/thunks/parameterThunks.ts","../src/store/slices/parametersSlice.ts","../src/store/slices/uiSlice.ts","../src/utils/safe-timer.ts","../src/store/slices/timerSlice.ts","../src/store/slices/websocketSlice.ts","../src/store/slices/componentSlice.ts","../src/store/thunks/searchThunks.ts","../src/store/slices/searchSlice.ts","../src/store/slices/visualEffectsSlice.ts","../src/store/slices/configSlice.ts","../src/store/middleware/logging-middleware.ts","../src/store/middleware/services-middleware.ts","../src/store/middleware/timer-middleware.ts","../src/store/middleware/websocketMiddleware.ts","../src/store/middleware/debounceMiddleware.ts","../src/store/middleware/metricsMiddleware.ts","../src/store/index.ts","../src/services/cache.ts"],"sourcesContent":["import { Logger } from './logger';\n\n// Logger instance\nconst logger = Logger.getInstance();\n\n/**\n * Track usage of a feature for metrics and analytics\n * @param category Category of the feature (timer, rendering, etc)\n * @param action Action being performed\n * @param data Additional data to log\n */\nexport function trackUsage(\n  category: string,\n  action: string,\n  data: Record<string, any> = {}\n): void {\n  try {\n    // Generate a unified key for StateAdapter API\n    const key = `${category}-${action}`;\n    \n    // Track via StateAdapter based on data source\n    if (data.source === 'redux') {\n      // Placeholder for future implementation\n    } else {\n      // Placeholder for future implementation\n    }\n    \n    // Only log metrics at debug level to avoid spam\n    logger.log('MetricsTracker', `${category}/${action} [${data.source || 'unknown'}]`, {\n      category: 'metrics',\n      subsystem: 'tracking',\n      ...data\n    });\n  } catch (error) {\n    // Log error but don't fail the application\n    logger.error('MetricsTracker', `Error tracking metrics: ${error}`, {\n      category: 'metrics',\n      subsystem: 'error'\n    });\n  }\n}\n\n/**\n * Clear all tracked metrics (used for testing)\n */\nexport function clearMetrics(): void {\n  // No direct API to clear metrics in StateAdapter\n  // This is a placeholder for future implementation\n}\n\n/**\n * Get current metrics tracking state\n */\nexport function getMetrics(): Record<string, any> {\n  return {\n    // Placeholder for future implementation\n  };\n} ","// src/utils/formatProdErrorMessage.ts\nfunction formatProdErrorMessage(code) {\n  return `Minified Redux error #${code}; visit https://redux.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;\n}\n\n// src/utils/symbol-observable.ts\nvar $$observable = /* @__PURE__ */ (() => typeof Symbol === \"function\" && Symbol.observable || \"@@observable\")();\nvar symbol_observable_default = $$observable;\n\n// src/utils/actionTypes.ts\nvar randomString = () => Math.random().toString(36).substring(7).split(\"\").join(\".\");\nvar ActionTypes = {\n  INIT: `@@redux/INIT${/* @__PURE__ */ randomString()}`,\n  REPLACE: `@@redux/REPLACE${/* @__PURE__ */ randomString()}`,\n  PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${randomString()}`\n};\nvar actionTypes_default = ActionTypes;\n\n// src/utils/isPlainObject.ts\nfunction isPlainObject(obj) {\n  if (typeof obj !== \"object\" || obj === null)\n    return false;\n  let proto = obj;\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n  return Object.getPrototypeOf(obj) === proto || Object.getPrototypeOf(obj) === null;\n}\n\n// src/utils/kindOf.ts\nfunction miniKindOf(val) {\n  if (val === void 0)\n    return \"undefined\";\n  if (val === null)\n    return \"null\";\n  const type = typeof val;\n  switch (type) {\n    case \"boolean\":\n    case \"string\":\n    case \"number\":\n    case \"symbol\":\n    case \"function\": {\n      return type;\n    }\n  }\n  if (Array.isArray(val))\n    return \"array\";\n  if (isDate(val))\n    return \"date\";\n  if (isError(val))\n    return \"error\";\n  const constructorName = ctorName(val);\n  switch (constructorName) {\n    case \"Symbol\":\n    case \"Promise\":\n    case \"WeakMap\":\n    case \"WeakSet\":\n    case \"Map\":\n    case \"Set\":\n      return constructorName;\n  }\n  return Object.prototype.toString.call(val).slice(8, -1).toLowerCase().replace(/\\s/g, \"\");\n}\nfunction ctorName(val) {\n  return typeof val.constructor === \"function\" ? val.constructor.name : null;\n}\nfunction isError(val) {\n  return val instanceof Error || typeof val.message === \"string\" && val.constructor && typeof val.constructor.stackTraceLimit === \"number\";\n}\nfunction isDate(val) {\n  if (val instanceof Date)\n    return true;\n  return typeof val.toDateString === \"function\" && typeof val.getDate === \"function\" && typeof val.setDate === \"function\";\n}\nfunction kindOf(val) {\n  let typeOfVal = typeof val;\n  if (process.env.NODE_ENV !== \"production\") {\n    typeOfVal = miniKindOf(val);\n  }\n  return typeOfVal;\n}\n\n// src/createStore.ts\nfunction createStore(reducer, preloadedState, enhancer) {\n  if (typeof reducer !== \"function\") {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(2) : `Expected the root reducer to be a function. Instead, received: '${kindOf(reducer)}'`);\n  }\n  if (typeof preloadedState === \"function\" && typeof enhancer === \"function\" || typeof enhancer === \"function\" && typeof arguments[3] === \"function\") {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(0) : \"It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.\");\n  }\n  if (typeof preloadedState === \"function\" && typeof enhancer === \"undefined\") {\n    enhancer = preloadedState;\n    preloadedState = void 0;\n  }\n  if (typeof enhancer !== \"undefined\") {\n    if (typeof enhancer !== \"function\") {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(1) : `Expected the enhancer to be a function. Instead, received: '${kindOf(enhancer)}'`);\n    }\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n  let currentReducer = reducer;\n  let currentState = preloadedState;\n  let currentListeners = /* @__PURE__ */ new Map();\n  let nextListeners = currentListeners;\n  let listenerIdCounter = 0;\n  let isDispatching = false;\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = /* @__PURE__ */ new Map();\n      currentListeners.forEach((listener, key) => {\n        nextListeners.set(key, listener);\n      });\n    }\n  }\n  function getState() {\n    if (isDispatching) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(3) : \"You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.\");\n    }\n    return currentState;\n  }\n  function subscribe(listener) {\n    if (typeof listener !== \"function\") {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(4) : `Expected the listener to be a function. Instead, received: '${kindOf(listener)}'`);\n    }\n    if (isDispatching) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(5) : \"You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.\");\n    }\n    let isSubscribed = true;\n    ensureCanMutateNextListeners();\n    const listenerId = listenerIdCounter++;\n    nextListeners.set(listenerId, listener);\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n      if (isDispatching) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(6) : \"You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.\");\n      }\n      isSubscribed = false;\n      ensureCanMutateNextListeners();\n      nextListeners.delete(listenerId);\n      currentListeners = null;\n    };\n  }\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(7) : `Actions must be plain objects. Instead, the actual type was: '${kindOf(action)}'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);\n    }\n    if (typeof action.type === \"undefined\") {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(8) : 'Actions may not have an undefined \"type\" property. You may have misspelled an action type string constant.');\n    }\n    if (typeof action.type !== \"string\") {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(17) : `Action \"type\" property must be a string. Instead, the actual type was: '${kindOf(action.type)}'. Value was: '${action.type}' (stringified)`);\n    }\n    if (isDispatching) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(9) : \"Reducers may not dispatch actions.\");\n    }\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n    const listeners = currentListeners = nextListeners;\n    listeners.forEach((listener) => {\n      listener();\n    });\n    return action;\n  }\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== \"function\") {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(10) : `Expected the nextReducer to be a function. Instead, received: '${kindOf(nextReducer)}`);\n    }\n    currentReducer = nextReducer;\n    dispatch({\n      type: actionTypes_default.REPLACE\n    });\n  }\n  function observable() {\n    const outerSubscribe = subscribe;\n    return {\n      /**\n       * The minimal observable subscription method.\n       * @param observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe(observer) {\n        if (typeof observer !== \"object\" || observer === null) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(11) : `Expected the observer to be an object. Instead, received: '${kindOf(observer)}'`);\n        }\n        function observeState() {\n          const observerAsObserver = observer;\n          if (observerAsObserver.next) {\n            observerAsObserver.next(getState());\n          }\n        }\n        observeState();\n        const unsubscribe = outerSubscribe(observeState);\n        return {\n          unsubscribe\n        };\n      },\n      [symbol_observable_default]() {\n        return this;\n      }\n    };\n  }\n  dispatch({\n    type: actionTypes_default.INIT\n  });\n  const store = {\n    dispatch,\n    subscribe,\n    getState,\n    replaceReducer,\n    [symbol_observable_default]: observable\n  };\n  return store;\n}\nfunction legacy_createStore(reducer, preloadedState, enhancer) {\n  return createStore(reducer, preloadedState, enhancer);\n}\n\n// src/utils/warning.ts\nfunction warning(message) {\n  if (typeof console !== \"undefined\" && typeof console.error === \"function\") {\n    console.error(message);\n  }\n  try {\n    throw new Error(message);\n  } catch (e) {\n  }\n}\n\n// src/combineReducers.ts\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  const reducerKeys = Object.keys(reducers);\n  const argumentName = action && action.type === actionTypes_default.INIT ? \"preloadedState argument passed to createStore\" : \"previous state received by the reducer\";\n  if (reducerKeys.length === 0) {\n    return \"Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.\";\n  }\n  if (!isPlainObject(inputState)) {\n    return `The ${argumentName} has unexpected type of \"${kindOf(inputState)}\". Expected argument to be an object with the following keys: \"${reducerKeys.join('\", \"')}\"`;\n  }\n  const unexpectedKeys = Object.keys(inputState).filter((key) => !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key]);\n  unexpectedKeys.forEach((key) => {\n    unexpectedKeyCache[key] = true;\n  });\n  if (action && action.type === actionTypes_default.REPLACE)\n    return;\n  if (unexpectedKeys.length > 0) {\n    return `Unexpected ${unexpectedKeys.length > 1 ? \"keys\" : \"key\"} \"${unexpectedKeys.join('\", \"')}\" found in ${argumentName}. Expected to find one of the known reducer keys instead: \"${reducerKeys.join('\", \"')}\". Unexpected keys will be ignored.`;\n  }\n}\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach((key) => {\n    const reducer = reducers[key];\n    const initialState = reducer(void 0, {\n      type: actionTypes_default.INIT\n    });\n    if (typeof initialState === \"undefined\") {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(12) : `The slice reducer for key \"${key}\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`);\n    }\n    if (typeof reducer(void 0, {\n      type: actionTypes_default.PROBE_UNKNOWN_ACTION()\n    }) === \"undefined\") {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(13) : `The slice reducer for key \"${key}\" returned undefined when probed with a random type. Don't try to handle '${actionTypes_default.INIT}' or other actions in \"redux/*\" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.`);\n    }\n  });\n}\nfunction combineReducers(reducers) {\n  const reducerKeys = Object.keys(reducers);\n  const finalReducers = {};\n  for (let i = 0; i < reducerKeys.length; i++) {\n    const key = reducerKeys[i];\n    if (process.env.NODE_ENV !== \"production\") {\n      if (typeof reducers[key] === \"undefined\") {\n        warning(`No reducer provided for key \"${key}\"`);\n      }\n    }\n    if (typeof reducers[key] === \"function\") {\n      finalReducers[key] = reducers[key];\n    }\n  }\n  const finalReducerKeys = Object.keys(finalReducers);\n  let unexpectedKeyCache;\n  if (process.env.NODE_ENV !== \"production\") {\n    unexpectedKeyCache = {};\n  }\n  let shapeAssertionError;\n  try {\n    assertReducerShape(finalReducers);\n  } catch (e) {\n    shapeAssertionError = e;\n  }\n  return function combination(state = {}, action) {\n    if (shapeAssertionError) {\n      throw shapeAssertionError;\n    }\n    if (process.env.NODE_ENV !== \"production\") {\n      const warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n      if (warningMessage) {\n        warning(warningMessage);\n      }\n    }\n    let hasChanged = false;\n    const nextState = {};\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      const key = finalReducerKeys[i];\n      const reducer = finalReducers[key];\n      const previousStateForKey = state[key];\n      const nextStateForKey = reducer(previousStateForKey, action);\n      if (typeof nextStateForKey === \"undefined\") {\n        const actionType = action && action.type;\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(14) : `When called with an action of type ${actionType ? `\"${String(actionType)}\"` : \"(unknown type)\"}, the slice reducer for key \"${key}\" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.`);\n      }\n      nextState[key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;\n    return hasChanged ? nextState : state;\n  };\n}\n\n// src/bindActionCreators.ts\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function(...args) {\n    return dispatch(actionCreator.apply(this, args));\n  };\n}\nfunction bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === \"function\") {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n  if (typeof actionCreators !== \"object\" || actionCreators === null) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(16) : `bindActionCreators expected an object or a function, but instead received: '${kindOf(actionCreators)}'. Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?`);\n  }\n  const boundActionCreators = {};\n  for (const key in actionCreators) {\n    const actionCreator = actionCreators[key];\n    if (typeof actionCreator === \"function\") {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n  return boundActionCreators;\n}\n\n// src/compose.ts\nfunction compose(...funcs) {\n  if (funcs.length === 0) {\n    return (arg) => arg;\n  }\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n  return funcs.reduce((a, b) => (...args) => a(b(...args)));\n}\n\n// src/applyMiddleware.ts\nfunction applyMiddleware(...middlewares) {\n  return (createStore2) => (reducer, preloadedState) => {\n    const store = createStore2(reducer, preloadedState);\n    let dispatch = () => {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(15) : \"Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.\");\n    };\n    const middlewareAPI = {\n      getState: store.getState,\n      dispatch: (action, ...args) => dispatch(action, ...args)\n    };\n    const chain = middlewares.map((middleware) => middleware(middlewareAPI));\n    dispatch = compose(...chain)(store.dispatch);\n    return {\n      ...store,\n      dispatch\n    };\n  };\n}\n\n// src/utils/isAction.ts\nfunction isAction(action) {\n  return isPlainObject(action) && \"type\" in action && typeof action.type === \"string\";\n}\nexport {\n  actionTypes_default as __DO_NOT_USE__ActionTypes,\n  applyMiddleware,\n  bindActionCreators,\n  combineReducers,\n  compose,\n  createStore,\n  isAction,\n  isPlainObject,\n  legacy_createStore\n};\n//# sourceMappingURL=redux.mjs.map","// src/utils/env.ts\nvar NOTHING = Symbol.for(\"immer-nothing\");\nvar DRAFTABLE = Symbol.for(\"immer-draftable\");\nvar DRAFT_STATE = Symbol.for(\"immer-state\");\n\n// src/utils/errors.ts\nvar errors = process.env.NODE_ENV !== \"production\" ? [\n  // All error codes, starting by 0:\n  function(plugin) {\n    return `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`;\n  },\n  function(thing) {\n    return `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`;\n  },\n  \"This object has been frozen and should not be mutated\",\n  function(data) {\n    return \"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" + data;\n  },\n  \"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n  \"Immer forbids circular references\",\n  \"The first or second argument to `produce` must be a function\",\n  \"The third argument to `produce` must be a function or undefined\",\n  \"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n  \"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n  function(thing) {\n    return `'current' expects a draft, got: ${thing}`;\n  },\n  \"Object.defineProperty() cannot be used on an Immer draft\",\n  \"Object.setPrototypeOf() cannot be used on an Immer draft\",\n  \"Immer only supports deleting array indices\",\n  \"Immer only supports setting array indices and the 'length' property\",\n  function(thing) {\n    return `'original' expects a draft, got: ${thing}`;\n  }\n  // Note: if more errors are added, the errorOffset in Patches.ts should be increased\n  // See Patches.ts for additional errors\n] : [];\nfunction die(error, ...args) {\n  if (process.env.NODE_ENV !== \"production\") {\n    const e = errors[error];\n    const msg = typeof e === \"function\" ? e.apply(null, args) : e;\n    throw new Error(`[Immer] ${msg}`);\n  }\n  throw new Error(\n    `[Immer] minified error nr: ${error}. Full error at: https://bit.ly/3cXEKWf`\n  );\n}\n\n// src/utils/common.ts\nvar getPrototypeOf = Object.getPrototypeOf;\nfunction isDraft(value) {\n  return !!value && !!value[DRAFT_STATE];\n}\nfunction isDraftable(value) {\n  if (!value)\n    return false;\n  return isPlainObject(value) || Array.isArray(value) || !!value[DRAFTABLE] || !!value.constructor?.[DRAFTABLE] || isMap(value) || isSet(value);\n}\nvar objectCtorString = Object.prototype.constructor.toString();\nfunction isPlainObject(value) {\n  if (!value || typeof value !== \"object\")\n    return false;\n  const proto = getPrototypeOf(value);\n  if (proto === null) {\n    return true;\n  }\n  const Ctor = Object.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n  if (Ctor === Object)\n    return true;\n  return typeof Ctor == \"function\" && Function.toString.call(Ctor) === objectCtorString;\n}\nfunction original(value) {\n  if (!isDraft(value))\n    die(15, value);\n  return value[DRAFT_STATE].base_;\n}\nfunction each(obj, iter) {\n  if (getArchtype(obj) === 0 /* Object */) {\n    Reflect.ownKeys(obj).forEach((key) => {\n      iter(key, obj[key], obj);\n    });\n  } else {\n    obj.forEach((entry, index) => iter(index, entry, obj));\n  }\n}\nfunction getArchtype(thing) {\n  const state = thing[DRAFT_STATE];\n  return state ? state.type_ : Array.isArray(thing) ? 1 /* Array */ : isMap(thing) ? 2 /* Map */ : isSet(thing) ? 3 /* Set */ : 0 /* Object */;\n}\nfunction has(thing, prop) {\n  return getArchtype(thing) === 2 /* Map */ ? thing.has(prop) : Object.prototype.hasOwnProperty.call(thing, prop);\n}\nfunction get(thing, prop) {\n  return getArchtype(thing) === 2 /* Map */ ? thing.get(prop) : thing[prop];\n}\nfunction set(thing, propOrOldValue, value) {\n  const t = getArchtype(thing);\n  if (t === 2 /* Map */)\n    thing.set(propOrOldValue, value);\n  else if (t === 3 /* Set */) {\n    thing.add(value);\n  } else\n    thing[propOrOldValue] = value;\n}\nfunction is(x, y) {\n  if (x === y) {\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\nfunction isMap(target) {\n  return target instanceof Map;\n}\nfunction isSet(target) {\n  return target instanceof Set;\n}\nfunction latest(state) {\n  return state.copy_ || state.base_;\n}\nfunction shallowCopy(base, strict) {\n  if (isMap(base)) {\n    return new Map(base);\n  }\n  if (isSet(base)) {\n    return new Set(base);\n  }\n  if (Array.isArray(base))\n    return Array.prototype.slice.call(base);\n  const isPlain = isPlainObject(base);\n  if (strict === true || strict === \"class_only\" && !isPlain) {\n    const descriptors = Object.getOwnPropertyDescriptors(base);\n    delete descriptors[DRAFT_STATE];\n    let keys = Reflect.ownKeys(descriptors);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const desc = descriptors[key];\n      if (desc.writable === false) {\n        desc.writable = true;\n        desc.configurable = true;\n      }\n      if (desc.get || desc.set)\n        descriptors[key] = {\n          configurable: true,\n          writable: true,\n          // could live with !!desc.set as well here...\n          enumerable: desc.enumerable,\n          value: base[key]\n        };\n    }\n    return Object.create(getPrototypeOf(base), descriptors);\n  } else {\n    const proto = getPrototypeOf(base);\n    if (proto !== null && isPlain) {\n      return { ...base };\n    }\n    const obj = Object.create(proto);\n    return Object.assign(obj, base);\n  }\n}\nfunction freeze(obj, deep = false) {\n  if (isFrozen(obj) || isDraft(obj) || !isDraftable(obj))\n    return obj;\n  if (getArchtype(obj) > 1) {\n    obj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections;\n  }\n  Object.freeze(obj);\n  if (deep)\n    Object.entries(obj).forEach(([key, value]) => freeze(value, true));\n  return obj;\n}\nfunction dontMutateFrozenCollections() {\n  die(2);\n}\nfunction isFrozen(obj) {\n  return Object.isFrozen(obj);\n}\n\n// src/utils/plugins.ts\nvar plugins = {};\nfunction getPlugin(pluginKey) {\n  const plugin = plugins[pluginKey];\n  if (!plugin) {\n    die(0, pluginKey);\n  }\n  return plugin;\n}\nfunction loadPlugin(pluginKey, implementation) {\n  if (!plugins[pluginKey])\n    plugins[pluginKey] = implementation;\n}\n\n// src/core/scope.ts\nvar currentScope;\nfunction getCurrentScope() {\n  return currentScope;\n}\nfunction createScope(parent_, immer_) {\n  return {\n    drafts_: [],\n    parent_,\n    immer_,\n    // Whenever the modified draft contains a draft from another scope, we\n    // need to prevent auto-freezing so the unowned draft can be finalized.\n    canAutoFreeze_: true,\n    unfinalizedDrafts_: 0\n  };\n}\nfunction usePatchesInScope(scope, patchListener) {\n  if (patchListener) {\n    getPlugin(\"Patches\");\n    scope.patches_ = [];\n    scope.inversePatches_ = [];\n    scope.patchListener_ = patchListener;\n  }\n}\nfunction revokeScope(scope) {\n  leaveScope(scope);\n  scope.drafts_.forEach(revokeDraft);\n  scope.drafts_ = null;\n}\nfunction leaveScope(scope) {\n  if (scope === currentScope) {\n    currentScope = scope.parent_;\n  }\n}\nfunction enterScope(immer2) {\n  return currentScope = createScope(currentScope, immer2);\n}\nfunction revokeDraft(draft) {\n  const state = draft[DRAFT_STATE];\n  if (state.type_ === 0 /* Object */ || state.type_ === 1 /* Array */)\n    state.revoke_();\n  else\n    state.revoked_ = true;\n}\n\n// src/core/finalize.ts\nfunction processResult(result, scope) {\n  scope.unfinalizedDrafts_ = scope.drafts_.length;\n  const baseDraft = scope.drafts_[0];\n  const isReplaced = result !== void 0 && result !== baseDraft;\n  if (isReplaced) {\n    if (baseDraft[DRAFT_STATE].modified_) {\n      revokeScope(scope);\n      die(4);\n    }\n    if (isDraftable(result)) {\n      result = finalize(scope, result);\n      if (!scope.parent_)\n        maybeFreeze(scope, result);\n    }\n    if (scope.patches_) {\n      getPlugin(\"Patches\").generateReplacementPatches_(\n        baseDraft[DRAFT_STATE].base_,\n        result,\n        scope.patches_,\n        scope.inversePatches_\n      );\n    }\n  } else {\n    result = finalize(scope, baseDraft, []);\n  }\n  revokeScope(scope);\n  if (scope.patches_) {\n    scope.patchListener_(scope.patches_, scope.inversePatches_);\n  }\n  return result !== NOTHING ? result : void 0;\n}\nfunction finalize(rootScope, value, path) {\n  if (isFrozen(value))\n    return value;\n  const state = value[DRAFT_STATE];\n  if (!state) {\n    each(\n      value,\n      (key, childValue) => finalizeProperty(rootScope, state, value, key, childValue, path)\n    );\n    return value;\n  }\n  if (state.scope_ !== rootScope)\n    return value;\n  if (!state.modified_) {\n    maybeFreeze(rootScope, state.base_, true);\n    return state.base_;\n  }\n  if (!state.finalized_) {\n    state.finalized_ = true;\n    state.scope_.unfinalizedDrafts_--;\n    const result = state.copy_;\n    let resultEach = result;\n    let isSet2 = false;\n    if (state.type_ === 3 /* Set */) {\n      resultEach = new Set(result);\n      result.clear();\n      isSet2 = true;\n    }\n    each(\n      resultEach,\n      (key, childValue) => finalizeProperty(rootScope, state, result, key, childValue, path, isSet2)\n    );\n    maybeFreeze(rootScope, result, false);\n    if (path && rootScope.patches_) {\n      getPlugin(\"Patches\").generatePatches_(\n        state,\n        path,\n        rootScope.patches_,\n        rootScope.inversePatches_\n      );\n    }\n  }\n  return state.copy_;\n}\nfunction finalizeProperty(rootScope, parentState, targetObject, prop, childValue, rootPath, targetIsSet) {\n  if (process.env.NODE_ENV !== \"production\" && childValue === targetObject)\n    die(5);\n  if (isDraft(childValue)) {\n    const path = rootPath && parentState && parentState.type_ !== 3 /* Set */ && // Set objects are atomic since they have no keys.\n    !has(parentState.assigned_, prop) ? rootPath.concat(prop) : void 0;\n    const res = finalize(rootScope, childValue, path);\n    set(targetObject, prop, res);\n    if (isDraft(res)) {\n      rootScope.canAutoFreeze_ = false;\n    } else\n      return;\n  } else if (targetIsSet) {\n    targetObject.add(childValue);\n  }\n  if (isDraftable(childValue) && !isFrozen(childValue)) {\n    if (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n      return;\n    }\n    finalize(rootScope, childValue);\n    if ((!parentState || !parentState.scope_.parent_) && typeof prop !== \"symbol\" && Object.prototype.propertyIsEnumerable.call(targetObject, prop))\n      maybeFreeze(rootScope, childValue);\n  }\n}\nfunction maybeFreeze(scope, value, deep = false) {\n  if (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n    freeze(value, deep);\n  }\n}\n\n// src/core/proxy.ts\nfunction createProxyProxy(base, parent) {\n  const isArray = Array.isArray(base);\n  const state = {\n    type_: isArray ? 1 /* Array */ : 0 /* Object */,\n    // Track which produce call this is associated with.\n    scope_: parent ? parent.scope_ : getCurrentScope(),\n    // True for both shallow and deep changes.\n    modified_: false,\n    // Used during finalization.\n    finalized_: false,\n    // Track which properties have been assigned (true) or deleted (false).\n    assigned_: {},\n    // The parent draft state.\n    parent_: parent,\n    // The base state.\n    base_: base,\n    // The base proxy.\n    draft_: null,\n    // set below\n    // The base copy with any updated values.\n    copy_: null,\n    // Called by the `produce` function.\n    revoke_: null,\n    isManual_: false\n  };\n  let target = state;\n  let traps = objectTraps;\n  if (isArray) {\n    target = [state];\n    traps = arrayTraps;\n  }\n  const { revoke, proxy } = Proxy.revocable(target, traps);\n  state.draft_ = proxy;\n  state.revoke_ = revoke;\n  return proxy;\n}\nvar objectTraps = {\n  get(state, prop) {\n    if (prop === DRAFT_STATE)\n      return state;\n    const source = latest(state);\n    if (!has(source, prop)) {\n      return readPropFromProto(state, source, prop);\n    }\n    const value = source[prop];\n    if (state.finalized_ || !isDraftable(value)) {\n      return value;\n    }\n    if (value === peek(state.base_, prop)) {\n      prepareCopy(state);\n      return state.copy_[prop] = createProxy(value, state);\n    }\n    return value;\n  },\n  has(state, prop) {\n    return prop in latest(state);\n  },\n  ownKeys(state) {\n    return Reflect.ownKeys(latest(state));\n  },\n  set(state, prop, value) {\n    const desc = getDescriptorFromProto(latest(state), prop);\n    if (desc?.set) {\n      desc.set.call(state.draft_, value);\n      return true;\n    }\n    if (!state.modified_) {\n      const current2 = peek(latest(state), prop);\n      const currentState = current2?.[DRAFT_STATE];\n      if (currentState && currentState.base_ === value) {\n        state.copy_[prop] = value;\n        state.assigned_[prop] = false;\n        return true;\n      }\n      if (is(value, current2) && (value !== void 0 || has(state.base_, prop)))\n        return true;\n      prepareCopy(state);\n      markChanged(state);\n    }\n    if (state.copy_[prop] === value && // special case: handle new props with value 'undefined'\n    (value !== void 0 || prop in state.copy_) || // special case: NaN\n    Number.isNaN(value) && Number.isNaN(state.copy_[prop]))\n      return true;\n    state.copy_[prop] = value;\n    state.assigned_[prop] = true;\n    return true;\n  },\n  deleteProperty(state, prop) {\n    if (peek(state.base_, prop) !== void 0 || prop in state.base_) {\n      state.assigned_[prop] = false;\n      prepareCopy(state);\n      markChanged(state);\n    } else {\n      delete state.assigned_[prop];\n    }\n    if (state.copy_) {\n      delete state.copy_[prop];\n    }\n    return true;\n  },\n  // Note: We never coerce `desc.value` into an Immer draft, because we can't make\n  // the same guarantee in ES5 mode.\n  getOwnPropertyDescriptor(state, prop) {\n    const owner = latest(state);\n    const desc = Reflect.getOwnPropertyDescriptor(owner, prop);\n    if (!desc)\n      return desc;\n    return {\n      writable: true,\n      configurable: state.type_ !== 1 /* Array */ || prop !== \"length\",\n      enumerable: desc.enumerable,\n      value: owner[prop]\n    };\n  },\n  defineProperty() {\n    die(11);\n  },\n  getPrototypeOf(state) {\n    return getPrototypeOf(state.base_);\n  },\n  setPrototypeOf() {\n    die(12);\n  }\n};\nvar arrayTraps = {};\neach(objectTraps, (key, fn) => {\n  arrayTraps[key] = function() {\n    arguments[0] = arguments[0][0];\n    return fn.apply(this, arguments);\n  };\n});\narrayTraps.deleteProperty = function(state, prop) {\n  if (process.env.NODE_ENV !== \"production\" && isNaN(parseInt(prop)))\n    die(13);\n  return arrayTraps.set.call(this, state, prop, void 0);\n};\narrayTraps.set = function(state, prop, value) {\n  if (process.env.NODE_ENV !== \"production\" && prop !== \"length\" && isNaN(parseInt(prop)))\n    die(14);\n  return objectTraps.set.call(this, state[0], prop, value, state[0]);\n};\nfunction peek(draft, prop) {\n  const state = draft[DRAFT_STATE];\n  const source = state ? latest(state) : draft;\n  return source[prop];\n}\nfunction readPropFromProto(state, source, prop) {\n  const desc = getDescriptorFromProto(source, prop);\n  return desc ? `value` in desc ? desc.value : (\n    // This is a very special case, if the prop is a getter defined by the\n    // prototype, we should invoke it with the draft as context!\n    desc.get?.call(state.draft_)\n  ) : void 0;\n}\nfunction getDescriptorFromProto(source, prop) {\n  if (!(prop in source))\n    return void 0;\n  let proto = getPrototypeOf(source);\n  while (proto) {\n    const desc = Object.getOwnPropertyDescriptor(proto, prop);\n    if (desc)\n      return desc;\n    proto = getPrototypeOf(proto);\n  }\n  return void 0;\n}\nfunction markChanged(state) {\n  if (!state.modified_) {\n    state.modified_ = true;\n    if (state.parent_) {\n      markChanged(state.parent_);\n    }\n  }\n}\nfunction prepareCopy(state) {\n  if (!state.copy_) {\n    state.copy_ = shallowCopy(\n      state.base_,\n      state.scope_.immer_.useStrictShallowCopy_\n    );\n  }\n}\n\n// src/core/immerClass.ts\nvar Immer2 = class {\n  constructor(config) {\n    this.autoFreeze_ = true;\n    this.useStrictShallowCopy_ = false;\n    /**\n     * The `produce` function takes a value and a \"recipe function\" (whose\n     * return value often depends on the base state). The recipe function is\n     * free to mutate its first argument however it wants. All mutations are\n     * only ever applied to a __copy__ of the base state.\n     *\n     * Pass only a function to create a \"curried producer\" which relieves you\n     * from passing the recipe function every time.\n     *\n     * Only plain objects and arrays are made mutable. All other objects are\n     * considered uncopyable.\n     *\n     * Note: This function is __bound__ to its `Immer` instance.\n     *\n     * @param {any} base - the initial state\n     * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified\n     * @param {Function} patchListener - optional function that will be called with all the patches produced here\n     * @returns {any} a new state, or the initial state if nothing was modified\n     */\n    this.produce = (base, recipe, patchListener) => {\n      if (typeof base === \"function\" && typeof recipe !== \"function\") {\n        const defaultBase = recipe;\n        recipe = base;\n        const self = this;\n        return function curriedProduce(base2 = defaultBase, ...args) {\n          return self.produce(base2, (draft) => recipe.call(this, draft, ...args));\n        };\n      }\n      if (typeof recipe !== \"function\")\n        die(6);\n      if (patchListener !== void 0 && typeof patchListener !== \"function\")\n        die(7);\n      let result;\n      if (isDraftable(base)) {\n        const scope = enterScope(this);\n        const proxy = createProxy(base, void 0);\n        let hasError = true;\n        try {\n          result = recipe(proxy);\n          hasError = false;\n        } finally {\n          if (hasError)\n            revokeScope(scope);\n          else\n            leaveScope(scope);\n        }\n        usePatchesInScope(scope, patchListener);\n        return processResult(result, scope);\n      } else if (!base || typeof base !== \"object\") {\n        result = recipe(base);\n        if (result === void 0)\n          result = base;\n        if (result === NOTHING)\n          result = void 0;\n        if (this.autoFreeze_)\n          freeze(result, true);\n        if (patchListener) {\n          const p = [];\n          const ip = [];\n          getPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip);\n          patchListener(p, ip);\n        }\n        return result;\n      } else\n        die(1, base);\n    };\n    this.produceWithPatches = (base, recipe) => {\n      if (typeof base === \"function\") {\n        return (state, ...args) => this.produceWithPatches(state, (draft) => base(draft, ...args));\n      }\n      let patches, inversePatches;\n      const result = this.produce(base, recipe, (p, ip) => {\n        patches = p;\n        inversePatches = ip;\n      });\n      return [result, patches, inversePatches];\n    };\n    if (typeof config?.autoFreeze === \"boolean\")\n      this.setAutoFreeze(config.autoFreeze);\n    if (typeof config?.useStrictShallowCopy === \"boolean\")\n      this.setUseStrictShallowCopy(config.useStrictShallowCopy);\n  }\n  createDraft(base) {\n    if (!isDraftable(base))\n      die(8);\n    if (isDraft(base))\n      base = current(base);\n    const scope = enterScope(this);\n    const proxy = createProxy(base, void 0);\n    proxy[DRAFT_STATE].isManual_ = true;\n    leaveScope(scope);\n    return proxy;\n  }\n  finishDraft(draft, patchListener) {\n    const state = draft && draft[DRAFT_STATE];\n    if (!state || !state.isManual_)\n      die(9);\n    const { scope_: scope } = state;\n    usePatchesInScope(scope, patchListener);\n    return processResult(void 0, scope);\n  }\n  /**\n   * Pass true to automatically freeze all copies created by Immer.\n   *\n   * By default, auto-freezing is enabled.\n   */\n  setAutoFreeze(value) {\n    this.autoFreeze_ = value;\n  }\n  /**\n   * Pass true to enable strict shallow copy.\n   *\n   * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.\n   */\n  setUseStrictShallowCopy(value) {\n    this.useStrictShallowCopy_ = value;\n  }\n  applyPatches(base, patches) {\n    let i;\n    for (i = patches.length - 1; i >= 0; i--) {\n      const patch = patches[i];\n      if (patch.path.length === 0 && patch.op === \"replace\") {\n        base = patch.value;\n        break;\n      }\n    }\n    if (i > -1) {\n      patches = patches.slice(i + 1);\n    }\n    const applyPatchesImpl = getPlugin(\"Patches\").applyPatches_;\n    if (isDraft(base)) {\n      return applyPatchesImpl(base, patches);\n    }\n    return this.produce(\n      base,\n      (draft) => applyPatchesImpl(draft, patches)\n    );\n  }\n};\nfunction createProxy(value, parent) {\n  const draft = isMap(value) ? getPlugin(\"MapSet\").proxyMap_(value, parent) : isSet(value) ? getPlugin(\"MapSet\").proxySet_(value, parent) : createProxyProxy(value, parent);\n  const scope = parent ? parent.scope_ : getCurrentScope();\n  scope.drafts_.push(draft);\n  return draft;\n}\n\n// src/core/current.ts\nfunction current(value) {\n  if (!isDraft(value))\n    die(10, value);\n  return currentImpl(value);\n}\nfunction currentImpl(value) {\n  if (!isDraftable(value) || isFrozen(value))\n    return value;\n  const state = value[DRAFT_STATE];\n  let copy;\n  if (state) {\n    if (!state.modified_)\n      return state.base_;\n    state.finalized_ = true;\n    copy = shallowCopy(value, state.scope_.immer_.useStrictShallowCopy_);\n  } else {\n    copy = shallowCopy(value, true);\n  }\n  each(copy, (key, childValue) => {\n    set(copy, key, currentImpl(childValue));\n  });\n  if (state) {\n    state.finalized_ = false;\n  }\n  return copy;\n}\n\n// src/plugins/patches.ts\nfunction enablePatches() {\n  const errorOffset = 16;\n  if (process.env.NODE_ENV !== \"production\") {\n    errors.push(\n      'Sets cannot have \"replace\" patches.',\n      function(op) {\n        return \"Unsupported patch operation: \" + op;\n      },\n      function(path) {\n        return \"Cannot apply patch, path doesn't resolve: \" + path;\n      },\n      \"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n    );\n  }\n  const REPLACE = \"replace\";\n  const ADD = \"add\";\n  const REMOVE = \"remove\";\n  function generatePatches_(state, basePath, patches, inversePatches) {\n    switch (state.type_) {\n      case 0 /* Object */:\n      case 2 /* Map */:\n        return generatePatchesFromAssigned(\n          state,\n          basePath,\n          patches,\n          inversePatches\n        );\n      case 1 /* Array */:\n        return generateArrayPatches(state, basePath, patches, inversePatches);\n      case 3 /* Set */:\n        return generateSetPatches(\n          state,\n          basePath,\n          patches,\n          inversePatches\n        );\n    }\n  }\n  function generateArrayPatches(state, basePath, patches, inversePatches) {\n    let { base_, assigned_ } = state;\n    let copy_ = state.copy_;\n    if (copy_.length < base_.length) {\n      ;\n      [base_, copy_] = [copy_, base_];\n      [patches, inversePatches] = [inversePatches, patches];\n    }\n    for (let i = 0; i < base_.length; i++) {\n      if (assigned_[i] && copy_[i] !== base_[i]) {\n        const path = basePath.concat([i]);\n        patches.push({\n          op: REPLACE,\n          path,\n          // Need to maybe clone it, as it can in fact be the original value\n          // due to the base/copy inversion at the start of this function\n          value: clonePatchValueIfNeeded(copy_[i])\n        });\n        inversePatches.push({\n          op: REPLACE,\n          path,\n          value: clonePatchValueIfNeeded(base_[i])\n        });\n      }\n    }\n    for (let i = base_.length; i < copy_.length; i++) {\n      const path = basePath.concat([i]);\n      patches.push({\n        op: ADD,\n        path,\n        // Need to maybe clone it, as it can in fact be the original value\n        // due to the base/copy inversion at the start of this function\n        value: clonePatchValueIfNeeded(copy_[i])\n      });\n    }\n    for (let i = copy_.length - 1; base_.length <= i; --i) {\n      const path = basePath.concat([i]);\n      inversePatches.push({\n        op: REMOVE,\n        path\n      });\n    }\n  }\n  function generatePatchesFromAssigned(state, basePath, patches, inversePatches) {\n    const { base_, copy_ } = state;\n    each(state.assigned_, (key, assignedValue) => {\n      const origValue = get(base_, key);\n      const value = get(copy_, key);\n      const op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD;\n      if (origValue === value && op === REPLACE)\n        return;\n      const path = basePath.concat(key);\n      patches.push(op === REMOVE ? { op, path } : { op, path, value });\n      inversePatches.push(\n        op === ADD ? { op: REMOVE, path } : op === REMOVE ? { op: ADD, path, value: clonePatchValueIfNeeded(origValue) } : { op: REPLACE, path, value: clonePatchValueIfNeeded(origValue) }\n      );\n    });\n  }\n  function generateSetPatches(state, basePath, patches, inversePatches) {\n    let { base_, copy_ } = state;\n    let i = 0;\n    base_.forEach((value) => {\n      if (!copy_.has(value)) {\n        const path = basePath.concat([i]);\n        patches.push({\n          op: REMOVE,\n          path,\n          value\n        });\n        inversePatches.unshift({\n          op: ADD,\n          path,\n          value\n        });\n      }\n      i++;\n    });\n    i = 0;\n    copy_.forEach((value) => {\n      if (!base_.has(value)) {\n        const path = basePath.concat([i]);\n        patches.push({\n          op: ADD,\n          path,\n          value\n        });\n        inversePatches.unshift({\n          op: REMOVE,\n          path,\n          value\n        });\n      }\n      i++;\n    });\n  }\n  function generateReplacementPatches_(baseValue, replacement, patches, inversePatches) {\n    patches.push({\n      op: REPLACE,\n      path: [],\n      value: replacement === NOTHING ? void 0 : replacement\n    });\n    inversePatches.push({\n      op: REPLACE,\n      path: [],\n      value: baseValue\n    });\n  }\n  function applyPatches_(draft, patches) {\n    patches.forEach((patch) => {\n      const { path, op } = patch;\n      let base = draft;\n      for (let i = 0; i < path.length - 1; i++) {\n        const parentType = getArchtype(base);\n        let p = path[i];\n        if (typeof p !== \"string\" && typeof p !== \"number\") {\n          p = \"\" + p;\n        }\n        if ((parentType === 0 /* Object */ || parentType === 1 /* Array */) && (p === \"__proto__\" || p === \"constructor\"))\n          die(errorOffset + 3);\n        if (typeof base === \"function\" && p === \"prototype\")\n          die(errorOffset + 3);\n        base = get(base, p);\n        if (typeof base !== \"object\")\n          die(errorOffset + 2, path.join(\"/\"));\n      }\n      const type = getArchtype(base);\n      const value = deepClonePatchValue(patch.value);\n      const key = path[path.length - 1];\n      switch (op) {\n        case REPLACE:\n          switch (type) {\n            case 2 /* Map */:\n              return base.set(key, value);\n            case 3 /* Set */:\n              die(errorOffset);\n            default:\n              return base[key] = value;\n          }\n        case ADD:\n          switch (type) {\n            case 1 /* Array */:\n              return key === \"-\" ? base.push(value) : base.splice(key, 0, value);\n            case 2 /* Map */:\n              return base.set(key, value);\n            case 3 /* Set */:\n              return base.add(value);\n            default:\n              return base[key] = value;\n          }\n        case REMOVE:\n          switch (type) {\n            case 1 /* Array */:\n              return base.splice(key, 1);\n            case 2 /* Map */:\n              return base.delete(key);\n            case 3 /* Set */:\n              return base.delete(patch.value);\n            default:\n              return delete base[key];\n          }\n        default:\n          die(errorOffset + 1, op);\n      }\n    });\n    return draft;\n  }\n  function deepClonePatchValue(obj) {\n    if (!isDraftable(obj))\n      return obj;\n    if (Array.isArray(obj))\n      return obj.map(deepClonePatchValue);\n    if (isMap(obj))\n      return new Map(\n        Array.from(obj.entries()).map(([k, v]) => [k, deepClonePatchValue(v)])\n      );\n    if (isSet(obj))\n      return new Set(Array.from(obj).map(deepClonePatchValue));\n    const cloned = Object.create(getPrototypeOf(obj));\n    for (const key in obj)\n      cloned[key] = deepClonePatchValue(obj[key]);\n    if (has(obj, DRAFTABLE))\n      cloned[DRAFTABLE] = obj[DRAFTABLE];\n    return cloned;\n  }\n  function clonePatchValueIfNeeded(obj) {\n    if (isDraft(obj)) {\n      return deepClonePatchValue(obj);\n    } else\n      return obj;\n  }\n  loadPlugin(\"Patches\", {\n    applyPatches_,\n    generatePatches_,\n    generateReplacementPatches_\n  });\n}\n\n// src/plugins/mapset.ts\nfunction enableMapSet() {\n  class DraftMap extends Map {\n    constructor(target, parent) {\n      super();\n      this[DRAFT_STATE] = {\n        type_: 2 /* Map */,\n        parent_: parent,\n        scope_: parent ? parent.scope_ : getCurrentScope(),\n        modified_: false,\n        finalized_: false,\n        copy_: void 0,\n        assigned_: void 0,\n        base_: target,\n        draft_: this,\n        isManual_: false,\n        revoked_: false\n      };\n    }\n    get size() {\n      return latest(this[DRAFT_STATE]).size;\n    }\n    has(key) {\n      return latest(this[DRAFT_STATE]).has(key);\n    }\n    set(key, value) {\n      const state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n      if (!latest(state).has(key) || latest(state).get(key) !== value) {\n        prepareMapCopy(state);\n        markChanged(state);\n        state.assigned_.set(key, true);\n        state.copy_.set(key, value);\n        state.assigned_.set(key, true);\n      }\n      return this;\n    }\n    delete(key) {\n      if (!this.has(key)) {\n        return false;\n      }\n      const state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n      prepareMapCopy(state);\n      markChanged(state);\n      if (state.base_.has(key)) {\n        state.assigned_.set(key, false);\n      } else {\n        state.assigned_.delete(key);\n      }\n      state.copy_.delete(key);\n      return true;\n    }\n    clear() {\n      const state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n      if (latest(state).size) {\n        prepareMapCopy(state);\n        markChanged(state);\n        state.assigned_ = /* @__PURE__ */ new Map();\n        each(state.base_, (key) => {\n          state.assigned_.set(key, false);\n        });\n        state.copy_.clear();\n      }\n    }\n    forEach(cb, thisArg) {\n      const state = this[DRAFT_STATE];\n      latest(state).forEach((_value, key, _map) => {\n        cb.call(thisArg, this.get(key), key, this);\n      });\n    }\n    get(key) {\n      const state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n      const value = latest(state).get(key);\n      if (state.finalized_ || !isDraftable(value)) {\n        return value;\n      }\n      if (value !== state.base_.get(key)) {\n        return value;\n      }\n      const draft = createProxy(value, state);\n      prepareMapCopy(state);\n      state.copy_.set(key, draft);\n      return draft;\n    }\n    keys() {\n      return latest(this[DRAFT_STATE]).keys();\n    }\n    values() {\n      const iterator = this.keys();\n      return {\n        [Symbol.iterator]: () => this.values(),\n        next: () => {\n          const r = iterator.next();\n          if (r.done)\n            return r;\n          const value = this.get(r.value);\n          return {\n            done: false,\n            value\n          };\n        }\n      };\n    }\n    entries() {\n      const iterator = this.keys();\n      return {\n        [Symbol.iterator]: () => this.entries(),\n        next: () => {\n          const r = iterator.next();\n          if (r.done)\n            return r;\n          const value = this.get(r.value);\n          return {\n            done: false,\n            value: [r.value, value]\n          };\n        }\n      };\n    }\n    [(DRAFT_STATE, Symbol.iterator)]() {\n      return this.entries();\n    }\n  }\n  function proxyMap_(target, parent) {\n    return new DraftMap(target, parent);\n  }\n  function prepareMapCopy(state) {\n    if (!state.copy_) {\n      state.assigned_ = /* @__PURE__ */ new Map();\n      state.copy_ = new Map(state.base_);\n    }\n  }\n  class DraftSet extends Set {\n    constructor(target, parent) {\n      super();\n      this[DRAFT_STATE] = {\n        type_: 3 /* Set */,\n        parent_: parent,\n        scope_: parent ? parent.scope_ : getCurrentScope(),\n        modified_: false,\n        finalized_: false,\n        copy_: void 0,\n        base_: target,\n        draft_: this,\n        drafts_: /* @__PURE__ */ new Map(),\n        revoked_: false,\n        isManual_: false\n      };\n    }\n    get size() {\n      return latest(this[DRAFT_STATE]).size;\n    }\n    has(value) {\n      const state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n      if (!state.copy_) {\n        return state.base_.has(value);\n      }\n      if (state.copy_.has(value))\n        return true;\n      if (state.drafts_.has(value) && state.copy_.has(state.drafts_.get(value)))\n        return true;\n      return false;\n    }\n    add(value) {\n      const state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n      if (!this.has(value)) {\n        prepareSetCopy(state);\n        markChanged(state);\n        state.copy_.add(value);\n      }\n      return this;\n    }\n    delete(value) {\n      if (!this.has(value)) {\n        return false;\n      }\n      const state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n      prepareSetCopy(state);\n      markChanged(state);\n      return state.copy_.delete(value) || (state.drafts_.has(value) ? state.copy_.delete(state.drafts_.get(value)) : (\n        /* istanbul ignore next */\n        false\n      ));\n    }\n    clear() {\n      const state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n      if (latest(state).size) {\n        prepareSetCopy(state);\n        markChanged(state);\n        state.copy_.clear();\n      }\n    }\n    values() {\n      const state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n      prepareSetCopy(state);\n      return state.copy_.values();\n    }\n    entries() {\n      const state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n      prepareSetCopy(state);\n      return state.copy_.entries();\n    }\n    keys() {\n      return this.values();\n    }\n    [(DRAFT_STATE, Symbol.iterator)]() {\n      return this.values();\n    }\n    forEach(cb, thisArg) {\n      const iterator = this.values();\n      let result = iterator.next();\n      while (!result.done) {\n        cb.call(thisArg, result.value, result.value, this);\n        result = iterator.next();\n      }\n    }\n  }\n  function proxySet_(target, parent) {\n    return new DraftSet(target, parent);\n  }\n  function prepareSetCopy(state) {\n    if (!state.copy_) {\n      state.copy_ = /* @__PURE__ */ new Set();\n      state.base_.forEach((value) => {\n        if (isDraftable(value)) {\n          const draft = createProxy(value, state);\n          state.drafts_.set(value, draft);\n          state.copy_.add(draft);\n        } else {\n          state.copy_.add(value);\n        }\n      });\n    }\n  }\n  function assertUnrevoked(state) {\n    if (state.revoked_)\n      die(3, JSON.stringify(latest(state)));\n  }\n  loadPlugin(\"MapSet\", { proxyMap_, proxySet_ });\n}\n\n// src/immer.ts\nvar immer = new Immer2();\nvar produce = immer.produce;\nvar produceWithPatches = immer.produceWithPatches.bind(\n  immer\n);\nvar setAutoFreeze = immer.setAutoFreeze.bind(immer);\nvar setUseStrictShallowCopy = immer.setUseStrictShallowCopy.bind(immer);\nvar applyPatches = immer.applyPatches.bind(immer);\nvar createDraft = immer.createDraft.bind(immer);\nvar finishDraft = immer.finishDraft.bind(immer);\nfunction castDraft(value) {\n  return value;\n}\nfunction castImmutable(value) {\n  return value;\n}\nexport {\n  Immer2 as Immer,\n  applyPatches,\n  castDraft,\n  castImmutable,\n  createDraft,\n  current,\n  enableMapSet,\n  enablePatches,\n  finishDraft,\n  freeze,\n  DRAFTABLE as immerable,\n  isDraft,\n  isDraftable,\n  NOTHING as nothing,\n  original,\n  produce,\n  produceWithPatches,\n  setAutoFreeze,\n  setUseStrictShallowCopy\n};\n//# sourceMappingURL=immer.mjs.map","// src/devModeChecks/identityFunctionCheck.ts\nvar runIdentityFunctionCheck = (resultFunc, inputSelectorsResults, outputSelectorResult) => {\n  if (inputSelectorsResults.length === 1 && inputSelectorsResults[0] === outputSelectorResult) {\n    let isInputSameAsOutput = false;\n    try {\n      const emptyObject = {};\n      if (resultFunc(emptyObject) === emptyObject)\n        isInputSameAsOutput = true;\n    } catch {\n    }\n    if (isInputSameAsOutput) {\n      let stack = void 0;\n      try {\n        throw new Error();\n      } catch (e) {\n        ;\n        ({ stack } = e);\n      }\n      console.warn(\n        \"The result function returned its own inputs without modification. e.g\\n`createSelector([state => state.todos], todos => todos)`\\nThis could lead to inefficient memoization and unnecessary re-renders.\\nEnsure transformation logic is in the result function, and extraction logic is in the input selectors.\",\n        { stack }\n      );\n    }\n  }\n};\n\n// src/devModeChecks/inputStabilityCheck.ts\nvar runInputStabilityCheck = (inputSelectorResultsObject, options, inputSelectorArgs) => {\n  const { memoize, memoizeOptions } = options;\n  const { inputSelectorResults, inputSelectorResultsCopy } = inputSelectorResultsObject;\n  const createAnEmptyObject = memoize(() => ({}), ...memoizeOptions);\n  const areInputSelectorResultsEqual = createAnEmptyObject.apply(null, inputSelectorResults) === createAnEmptyObject.apply(null, inputSelectorResultsCopy);\n  if (!areInputSelectorResultsEqual) {\n    let stack = void 0;\n    try {\n      throw new Error();\n    } catch (e) {\n      ;\n      ({ stack } = e);\n    }\n    console.warn(\n      \"An input selector returned a different result when passed same arguments.\\nThis means your output selector will likely run more frequently than intended.\\nAvoid returning a new reference inside your input selector, e.g.\\n`createSelector([state => state.todos.map(todo => todo.id)], todoIds => todoIds.length)`\",\n      {\n        arguments: inputSelectorArgs,\n        firstInputs: inputSelectorResults,\n        secondInputs: inputSelectorResultsCopy,\n        stack\n      }\n    );\n  }\n};\n\n// src/devModeChecks/setGlobalDevModeChecks.ts\nvar globalDevModeChecks = {\n  inputStabilityCheck: \"once\",\n  identityFunctionCheck: \"once\"\n};\nvar setGlobalDevModeChecks = (devModeChecks) => {\n  Object.assign(globalDevModeChecks, devModeChecks);\n};\n\n// src/utils.ts\nvar NOT_FOUND = /* @__PURE__ */ Symbol(\"NOT_FOUND\");\nfunction assertIsFunction(func, errorMessage = `expected a function, instead received ${typeof func}`) {\n  if (typeof func !== \"function\") {\n    throw new TypeError(errorMessage);\n  }\n}\nfunction assertIsObject(object, errorMessage = `expected an object, instead received ${typeof object}`) {\n  if (typeof object !== \"object\") {\n    throw new TypeError(errorMessage);\n  }\n}\nfunction assertIsArrayOfFunctions(array, errorMessage = `expected all items to be functions, instead received the following types: `) {\n  if (!array.every((item) => typeof item === \"function\")) {\n    const itemTypes = array.map(\n      (item) => typeof item === \"function\" ? `function ${item.name || \"unnamed\"}()` : typeof item\n    ).join(\", \");\n    throw new TypeError(`${errorMessage}[${itemTypes}]`);\n  }\n}\nvar ensureIsArray = (item) => {\n  return Array.isArray(item) ? item : [item];\n};\nfunction getDependencies(createSelectorArgs) {\n  const dependencies = Array.isArray(createSelectorArgs[0]) ? createSelectorArgs[0] : createSelectorArgs;\n  assertIsArrayOfFunctions(\n    dependencies,\n    `createSelector expects all input-selectors to be functions, but received the following types: `\n  );\n  return dependencies;\n}\nfunction collectInputSelectorResults(dependencies, inputSelectorArgs) {\n  const inputSelectorResults = [];\n  const { length } = dependencies;\n  for (let i = 0; i < length; i++) {\n    inputSelectorResults.push(dependencies[i].apply(null, inputSelectorArgs));\n  }\n  return inputSelectorResults;\n}\nvar getDevModeChecksExecutionInfo = (firstRun, devModeChecks) => {\n  const { identityFunctionCheck, inputStabilityCheck } = {\n    ...globalDevModeChecks,\n    ...devModeChecks\n  };\n  return {\n    identityFunctionCheck: {\n      shouldRun: identityFunctionCheck === \"always\" || identityFunctionCheck === \"once\" && firstRun,\n      run: runIdentityFunctionCheck\n    },\n    inputStabilityCheck: {\n      shouldRun: inputStabilityCheck === \"always\" || inputStabilityCheck === \"once\" && firstRun,\n      run: runInputStabilityCheck\n    }\n  };\n};\n\n// src/autotrackMemoize/autotracking.ts\nvar $REVISION = 0;\nvar CURRENT_TRACKER = null;\nvar Cell = class {\n  revision = $REVISION;\n  _value;\n  _lastValue;\n  _isEqual = tripleEq;\n  constructor(initialValue, isEqual = tripleEq) {\n    this._value = this._lastValue = initialValue;\n    this._isEqual = isEqual;\n  }\n  // Whenever a storage value is read, it'll add itself to the current tracker if\n  // one exists, entangling its state with that cache.\n  get value() {\n    CURRENT_TRACKER?.add(this);\n    return this._value;\n  }\n  // Whenever a storage value is updated, we bump the global revision clock,\n  // assign the revision for this storage to the new value, _and_ we schedule a\n  // rerender. This is important, and it's what makes autotracking  _pull_\n  // based. We don't actively tell the caches which depend on the storage that\n  // anything has happened. Instead, we recompute the caches when needed.\n  set value(newValue) {\n    if (this.value === newValue)\n      return;\n    this._value = newValue;\n    this.revision = ++$REVISION;\n  }\n};\nfunction tripleEq(a, b) {\n  return a === b;\n}\nvar TrackingCache = class {\n  _cachedValue;\n  _cachedRevision = -1;\n  _deps = [];\n  hits = 0;\n  fn;\n  constructor(fn) {\n    this.fn = fn;\n  }\n  clear() {\n    this._cachedValue = void 0;\n    this._cachedRevision = -1;\n    this._deps = [];\n    this.hits = 0;\n  }\n  get value() {\n    if (this.revision > this._cachedRevision) {\n      const { fn } = this;\n      const currentTracker = /* @__PURE__ */ new Set();\n      const prevTracker = CURRENT_TRACKER;\n      CURRENT_TRACKER = currentTracker;\n      this._cachedValue = fn();\n      CURRENT_TRACKER = prevTracker;\n      this.hits++;\n      this._deps = Array.from(currentTracker);\n      this._cachedRevision = this.revision;\n    }\n    CURRENT_TRACKER?.add(this);\n    return this._cachedValue;\n  }\n  get revision() {\n    return Math.max(...this._deps.map((d) => d.revision), 0);\n  }\n};\nfunction getValue(cell) {\n  if (!(cell instanceof Cell)) {\n    console.warn(\"Not a valid cell! \", cell);\n  }\n  return cell.value;\n}\nfunction setValue(storage, value) {\n  if (!(storage instanceof Cell)) {\n    throw new TypeError(\n      \"setValue must be passed a tracked store created with `createStorage`.\"\n    );\n  }\n  storage.value = storage._lastValue = value;\n}\nfunction createCell(initialValue, isEqual = tripleEq) {\n  return new Cell(initialValue, isEqual);\n}\nfunction createCache(fn) {\n  assertIsFunction(\n    fn,\n    \"the first parameter to `createCache` must be a function\"\n  );\n  return new TrackingCache(fn);\n}\n\n// src/autotrackMemoize/tracking.ts\nvar neverEq = (a, b) => false;\nfunction createTag() {\n  return createCell(null, neverEq);\n}\nfunction dirtyTag(tag, value) {\n  setValue(tag, value);\n}\nvar consumeCollection = (node) => {\n  let tag = node.collectionTag;\n  if (tag === null) {\n    tag = node.collectionTag = createTag();\n  }\n  getValue(tag);\n};\nvar dirtyCollection = (node) => {\n  const tag = node.collectionTag;\n  if (tag !== null) {\n    dirtyTag(tag, null);\n  }\n};\n\n// src/autotrackMemoize/proxy.ts\nvar REDUX_PROXY_LABEL = Symbol();\nvar nextId = 0;\nvar proto = Object.getPrototypeOf({});\nvar ObjectTreeNode = class {\n  constructor(value) {\n    this.value = value;\n    this.value = value;\n    this.tag.value = value;\n  }\n  proxy = new Proxy(this, objectProxyHandler);\n  tag = createTag();\n  tags = {};\n  children = {};\n  collectionTag = null;\n  id = nextId++;\n};\nvar objectProxyHandler = {\n  get(node, key) {\n    function calculateResult() {\n      const { value } = node;\n      const childValue = Reflect.get(value, key);\n      if (typeof key === \"symbol\") {\n        return childValue;\n      }\n      if (key in proto) {\n        return childValue;\n      }\n      if (typeof childValue === \"object\" && childValue !== null) {\n        let childNode = node.children[key];\n        if (childNode === void 0) {\n          childNode = node.children[key] = createNode(childValue);\n        }\n        if (childNode.tag) {\n          getValue(childNode.tag);\n        }\n        return childNode.proxy;\n      } else {\n        let tag = node.tags[key];\n        if (tag === void 0) {\n          tag = node.tags[key] = createTag();\n          tag.value = childValue;\n        }\n        getValue(tag);\n        return childValue;\n      }\n    }\n    const res = calculateResult();\n    return res;\n  },\n  ownKeys(node) {\n    consumeCollection(node);\n    return Reflect.ownKeys(node.value);\n  },\n  getOwnPropertyDescriptor(node, prop) {\n    return Reflect.getOwnPropertyDescriptor(node.value, prop);\n  },\n  has(node, prop) {\n    return Reflect.has(node.value, prop);\n  }\n};\nvar ArrayTreeNode = class {\n  constructor(value) {\n    this.value = value;\n    this.value = value;\n    this.tag.value = value;\n  }\n  proxy = new Proxy([this], arrayProxyHandler);\n  tag = createTag();\n  tags = {};\n  children = {};\n  collectionTag = null;\n  id = nextId++;\n};\nvar arrayProxyHandler = {\n  get([node], key) {\n    if (key === \"length\") {\n      consumeCollection(node);\n    }\n    return objectProxyHandler.get(node, key);\n  },\n  ownKeys([node]) {\n    return objectProxyHandler.ownKeys(node);\n  },\n  getOwnPropertyDescriptor([node], prop) {\n    return objectProxyHandler.getOwnPropertyDescriptor(node, prop);\n  },\n  has([node], prop) {\n    return objectProxyHandler.has(node, prop);\n  }\n};\nfunction createNode(value) {\n  if (Array.isArray(value)) {\n    return new ArrayTreeNode(value);\n  }\n  return new ObjectTreeNode(value);\n}\nfunction updateNode(node, newValue) {\n  const { value, tags, children } = node;\n  node.value = newValue;\n  if (Array.isArray(value) && Array.isArray(newValue) && value.length !== newValue.length) {\n    dirtyCollection(node);\n  } else {\n    if (value !== newValue) {\n      let oldKeysSize = 0;\n      let newKeysSize = 0;\n      let anyKeysAdded = false;\n      for (const _key in value) {\n        oldKeysSize++;\n      }\n      for (const key in newValue) {\n        newKeysSize++;\n        if (!(key in value)) {\n          anyKeysAdded = true;\n          break;\n        }\n      }\n      const isDifferent = anyKeysAdded || oldKeysSize !== newKeysSize;\n      if (isDifferent) {\n        dirtyCollection(node);\n      }\n    }\n  }\n  for (const key in tags) {\n    const childValue = value[key];\n    const newChildValue = newValue[key];\n    if (childValue !== newChildValue) {\n      dirtyCollection(node);\n      dirtyTag(tags[key], newChildValue);\n    }\n    if (typeof newChildValue === \"object\" && newChildValue !== null) {\n      delete tags[key];\n    }\n  }\n  for (const key in children) {\n    const childNode = children[key];\n    const newChildValue = newValue[key];\n    const childValue = childNode.value;\n    if (childValue === newChildValue) {\n      continue;\n    } else if (typeof newChildValue === \"object\" && newChildValue !== null) {\n      updateNode(childNode, newChildValue);\n    } else {\n      deleteNode(childNode);\n      delete children[key];\n    }\n  }\n}\nfunction deleteNode(node) {\n  if (node.tag) {\n    dirtyTag(node.tag, null);\n  }\n  dirtyCollection(node);\n  for (const key in node.tags) {\n    dirtyTag(node.tags[key], null);\n  }\n  for (const key in node.children) {\n    deleteNode(node.children[key]);\n  }\n}\n\n// src/lruMemoize.ts\nfunction createSingletonCache(equals) {\n  let entry;\n  return {\n    get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n      return NOT_FOUND;\n    },\n    put(key, value) {\n      entry = { key, value };\n    },\n    getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear() {\n      entry = void 0;\n    }\n  };\n}\nfunction createLruCache(maxSize, equals) {\n  let entries = [];\n  function get(key) {\n    const cacheIndex = entries.findIndex((entry) => equals(key, entry.key));\n    if (cacheIndex > -1) {\n      const entry = entries[cacheIndex];\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n      return entry.value;\n    }\n    return NOT_FOUND;\n  }\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      entries.unshift({ key, value });\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n  function getEntries() {\n    return entries;\n  }\n  function clear() {\n    entries = [];\n  }\n  return { get, put, getEntries, clear };\n}\nvar referenceEqualityCheck = (a, b) => a === b;\nfunction createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    }\n    const { length } = prev;\n    for (let i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n    return true;\n  };\n}\nfunction lruMemoize(func, equalityCheckOrOptions) {\n  const providedOptions = typeof equalityCheckOrOptions === \"object\" ? equalityCheckOrOptions : { equalityCheck: equalityCheckOrOptions };\n  const {\n    equalityCheck = referenceEqualityCheck,\n    maxSize = 1,\n    resultEqualityCheck\n  } = providedOptions;\n  const comparator = createCacheKeyComparator(equalityCheck);\n  let resultsCount = 0;\n  const cache = maxSize <= 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator);\n  function memoized() {\n    let value = cache.get(arguments);\n    if (value === NOT_FOUND) {\n      value = func.apply(null, arguments);\n      resultsCount++;\n      if (resultEqualityCheck) {\n        const entries = cache.getEntries();\n        const matchingEntry = entries.find(\n          (entry) => resultEqualityCheck(entry.value, value)\n        );\n        if (matchingEntry) {\n          value = matchingEntry.value;\n          resultsCount !== 0 && resultsCount--;\n        }\n      }\n      cache.put(arguments, value);\n    }\n    return value;\n  }\n  memoized.clearCache = () => {\n    cache.clear();\n    memoized.resetResultsCount();\n  };\n  memoized.resultsCount = () => resultsCount;\n  memoized.resetResultsCount = () => {\n    resultsCount = 0;\n  };\n  return memoized;\n}\n\n// src/autotrackMemoize/autotrackMemoize.ts\nfunction autotrackMemoize(func) {\n  const node = createNode(\n    []\n  );\n  let lastArgs = null;\n  const shallowEqual = createCacheKeyComparator(referenceEqualityCheck);\n  const cache = createCache(() => {\n    const res = func.apply(null, node.proxy);\n    return res;\n  });\n  function memoized() {\n    if (!shallowEqual(lastArgs, arguments)) {\n      updateNode(node, arguments);\n      lastArgs = arguments;\n    }\n    return cache.value;\n  }\n  memoized.clearCache = () => {\n    return cache.clear();\n  };\n  return memoized;\n}\n\n// src/weakMapMemoize.ts\nvar StrongRef = class {\n  constructor(value) {\n    this.value = value;\n  }\n  deref() {\n    return this.value;\n  }\n};\nvar Ref = typeof WeakRef !== \"undefined\" ? WeakRef : StrongRef;\nvar UNTERMINATED = 0;\nvar TERMINATED = 1;\nfunction createCacheNode() {\n  return {\n    s: UNTERMINATED,\n    v: void 0,\n    o: null,\n    p: null\n  };\n}\nfunction weakMapMemoize(func, options = {}) {\n  let fnNode = createCacheNode();\n  const { resultEqualityCheck } = options;\n  let lastResult;\n  let resultsCount = 0;\n  function memoized() {\n    let cacheNode = fnNode;\n    const { length } = arguments;\n    for (let i = 0, l = length; i < l; i++) {\n      const arg = arguments[i];\n      if (typeof arg === \"function\" || typeof arg === \"object\" && arg !== null) {\n        let objectCache = cacheNode.o;\n        if (objectCache === null) {\n          cacheNode.o = objectCache = /* @__PURE__ */ new WeakMap();\n        }\n        const objectNode = objectCache.get(arg);\n        if (objectNode === void 0) {\n          cacheNode = createCacheNode();\n          objectCache.set(arg, cacheNode);\n        } else {\n          cacheNode = objectNode;\n        }\n      } else {\n        let primitiveCache = cacheNode.p;\n        if (primitiveCache === null) {\n          cacheNode.p = primitiveCache = /* @__PURE__ */ new Map();\n        }\n        const primitiveNode = primitiveCache.get(arg);\n        if (primitiveNode === void 0) {\n          cacheNode = createCacheNode();\n          primitiveCache.set(arg, cacheNode);\n        } else {\n          cacheNode = primitiveNode;\n        }\n      }\n    }\n    const terminatedNode = cacheNode;\n    let result;\n    if (cacheNode.s === TERMINATED) {\n      result = cacheNode.v;\n    } else {\n      result = func.apply(null, arguments);\n      resultsCount++;\n      if (resultEqualityCheck) {\n        const lastResultValue = lastResult?.deref?.() ?? lastResult;\n        if (lastResultValue != null && resultEqualityCheck(lastResultValue, result)) {\n          result = lastResultValue;\n          resultsCount !== 0 && resultsCount--;\n        }\n        const needsWeakRef = typeof result === \"object\" && result !== null || typeof result === \"function\";\n        lastResult = needsWeakRef ? new Ref(result) : result;\n      }\n    }\n    terminatedNode.s = TERMINATED;\n    terminatedNode.v = result;\n    return result;\n  }\n  memoized.clearCache = () => {\n    fnNode = createCacheNode();\n    memoized.resetResultsCount();\n  };\n  memoized.resultsCount = () => resultsCount;\n  memoized.resetResultsCount = () => {\n    resultsCount = 0;\n  };\n  return memoized;\n}\n\n// src/createSelectorCreator.ts\nfunction createSelectorCreator(memoizeOrOptions, ...memoizeOptionsFromArgs) {\n  const createSelectorCreatorOptions = typeof memoizeOrOptions === \"function\" ? {\n    memoize: memoizeOrOptions,\n    memoizeOptions: memoizeOptionsFromArgs\n  } : memoizeOrOptions;\n  const createSelector2 = (...createSelectorArgs) => {\n    let recomputations = 0;\n    let dependencyRecomputations = 0;\n    let lastResult;\n    let directlyPassedOptions = {};\n    let resultFunc = createSelectorArgs.pop();\n    if (typeof resultFunc === \"object\") {\n      directlyPassedOptions = resultFunc;\n      resultFunc = createSelectorArgs.pop();\n    }\n    assertIsFunction(\n      resultFunc,\n      `createSelector expects an output function after the inputs, but received: [${typeof resultFunc}]`\n    );\n    const combinedOptions = {\n      ...createSelectorCreatorOptions,\n      ...directlyPassedOptions\n    };\n    const {\n      memoize,\n      memoizeOptions = [],\n      argsMemoize = weakMapMemoize,\n      argsMemoizeOptions = [],\n      devModeChecks = {}\n    } = combinedOptions;\n    const finalMemoizeOptions = ensureIsArray(memoizeOptions);\n    const finalArgsMemoizeOptions = ensureIsArray(argsMemoizeOptions);\n    const dependencies = getDependencies(createSelectorArgs);\n    const memoizedResultFunc = memoize(function recomputationWrapper() {\n      recomputations++;\n      return resultFunc.apply(\n        null,\n        arguments\n      );\n    }, ...finalMemoizeOptions);\n    let firstRun = true;\n    const selector = argsMemoize(function dependenciesChecker() {\n      dependencyRecomputations++;\n      const inputSelectorResults = collectInputSelectorResults(\n        dependencies,\n        arguments\n      );\n      lastResult = memoizedResultFunc.apply(null, inputSelectorResults);\n      if (process.env.NODE_ENV !== \"production\") {\n        const { identityFunctionCheck, inputStabilityCheck } = getDevModeChecksExecutionInfo(firstRun, devModeChecks);\n        if (identityFunctionCheck.shouldRun) {\n          identityFunctionCheck.run(\n            resultFunc,\n            inputSelectorResults,\n            lastResult\n          );\n        }\n        if (inputStabilityCheck.shouldRun) {\n          const inputSelectorResultsCopy = collectInputSelectorResults(\n            dependencies,\n            arguments\n          );\n          inputStabilityCheck.run(\n            { inputSelectorResults, inputSelectorResultsCopy },\n            { memoize, memoizeOptions: finalMemoizeOptions },\n            arguments\n          );\n        }\n        if (firstRun)\n          firstRun = false;\n      }\n      return lastResult;\n    }, ...finalArgsMemoizeOptions);\n    return Object.assign(selector, {\n      resultFunc,\n      memoizedResultFunc,\n      dependencies,\n      dependencyRecomputations: () => dependencyRecomputations,\n      resetDependencyRecomputations: () => {\n        dependencyRecomputations = 0;\n      },\n      lastResult: () => lastResult,\n      recomputations: () => recomputations,\n      resetRecomputations: () => {\n        recomputations = 0;\n      },\n      memoize,\n      argsMemoize\n    });\n  };\n  Object.assign(createSelector2, {\n    withTypes: () => createSelector2\n  });\n  return createSelector2;\n}\nvar createSelector = /* @__PURE__ */ createSelectorCreator(weakMapMemoize);\n\n// src/createStructuredSelector.ts\nvar createStructuredSelector = Object.assign(\n  (inputSelectorsObject, selectorCreator = createSelector) => {\n    assertIsObject(\n      inputSelectorsObject,\n      `createStructuredSelector expects first argument to be an object where each property is a selector, instead received a ${typeof inputSelectorsObject}`\n    );\n    const inputSelectorKeys = Object.keys(inputSelectorsObject);\n    const dependencies = inputSelectorKeys.map(\n      (key) => inputSelectorsObject[key]\n    );\n    const structuredSelector = selectorCreator(\n      dependencies,\n      (...inputSelectorResults) => {\n        return inputSelectorResults.reduce((composition, value, index) => {\n          composition[inputSelectorKeys[index]] = value;\n          return composition;\n        }, {});\n      }\n    );\n    return structuredSelector;\n  },\n  { withTypes: () => createStructuredSelector }\n);\nexport {\n  createSelector,\n  createSelectorCreator,\n  createStructuredSelector,\n  lruMemoize,\n  referenceEqualityCheck,\n  setGlobalDevModeChecks,\n  autotrackMemoize as unstable_autotrackMemoize,\n  weakMapMemoize\n};\n//# sourceMappingURL=reselect.mjs.map","// src/index.ts\nfunction createThunkMiddleware(extraArgument) {\n  const middleware = ({ dispatch, getState }) => (next) => (action) => {\n    if (typeof action === \"function\") {\n      return action(dispatch, getState, extraArgument);\n    }\n    return next(action);\n  };\n  return middleware;\n}\nvar thunk = createThunkMiddleware();\nvar withExtraArgument = createThunkMiddleware;\nexport {\n  thunk,\n  withExtraArgument\n};\n","// src/index.ts\nexport * from \"redux\";\nimport { produce, current as current3, freeze, original as original2, isDraft as isDraft5 } from \"immer\";\nimport { createSelector, createSelectorCreator as createSelectorCreator2, lruMemoize, weakMapMemoize as weakMapMemoize2 } from \"reselect\";\n\n// src/createDraftSafeSelector.ts\nimport { current, isDraft } from \"immer\";\nimport { createSelectorCreator, weakMapMemoize } from \"reselect\";\nvar createDraftSafeSelectorCreator = (...args) => {\n  const createSelector2 = createSelectorCreator(...args);\n  const createDraftSafeSelector2 = Object.assign((...args2) => {\n    const selector = createSelector2(...args2);\n    const wrappedSelector = (value, ...rest) => selector(isDraft(value) ? current(value) : value, ...rest);\n    Object.assign(wrappedSelector, selector);\n    return wrappedSelector;\n  }, {\n    withTypes: () => createDraftSafeSelector2\n  });\n  return createDraftSafeSelector2;\n};\nvar createDraftSafeSelector = /* @__PURE__ */ createDraftSafeSelectorCreator(weakMapMemoize);\n\n// src/configureStore.ts\nimport { applyMiddleware, createStore, compose as compose2, combineReducers, isPlainObject as isPlainObject2 } from \"redux\";\n\n// src/devtoolsExtension.ts\nimport { compose } from \"redux\";\nvar composeWithDevTools = typeof window !== \"undefined\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function() {\n  if (arguments.length === 0) return void 0;\n  if (typeof arguments[0] === \"object\") return compose;\n  return compose.apply(null, arguments);\n};\nvar devToolsEnhancer = typeof window !== \"undefined\" && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__ : function() {\n  return function(noop3) {\n    return noop3;\n  };\n};\n\n// src/getDefaultMiddleware.ts\nimport { thunk as thunkMiddleware, withExtraArgument } from \"redux-thunk\";\n\n// src/createAction.ts\nimport { isAction } from \"redux\";\n\n// src/tsHelpers.ts\nvar hasMatchFunction = (v) => {\n  return v && typeof v.match === \"function\";\n};\n\n// src/createAction.ts\nfunction createAction(type, prepareAction) {\n  function actionCreator(...args) {\n    if (prepareAction) {\n      let prepared = prepareAction(...args);\n      if (!prepared) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(0) : \"prepareAction did not return an object\");\n      }\n      return {\n        type,\n        payload: prepared.payload,\n        ...\"meta\" in prepared && {\n          meta: prepared.meta\n        },\n        ...\"error\" in prepared && {\n          error: prepared.error\n        }\n      };\n    }\n    return {\n      type,\n      payload: args[0]\n    };\n  }\n  actionCreator.toString = () => `${type}`;\n  actionCreator.type = type;\n  actionCreator.match = (action) => isAction(action) && action.type === type;\n  return actionCreator;\n}\nfunction isActionCreator(action) {\n  return typeof action === \"function\" && \"type\" in action && // hasMatchFunction only wants Matchers but I don't see the point in rewriting it\n  hasMatchFunction(action);\n}\nfunction isFSA(action) {\n  return isAction(action) && Object.keys(action).every(isValidKey);\n}\nfunction isValidKey(key) {\n  return [\"type\", \"payload\", \"error\", \"meta\"].indexOf(key) > -1;\n}\n\n// src/actionCreatorInvariantMiddleware.ts\nfunction getMessage(type) {\n  const splitType = type ? `${type}`.split(\"/\") : [];\n  const actionName = splitType[splitType.length - 1] || \"actionCreator\";\n  return `Detected an action creator with type \"${type || \"unknown\"}\" being dispatched. \nMake sure you're calling the action creator before dispatching, i.e. \\`dispatch(${actionName}())\\` instead of \\`dispatch(${actionName})\\`. This is necessary even if the action has no payload.`;\n}\nfunction createActionCreatorInvariantMiddleware(options = {}) {\n  if (process.env.NODE_ENV === \"production\") {\n    return () => (next) => (action) => next(action);\n  }\n  const {\n    isActionCreator: isActionCreator2 = isActionCreator\n  } = options;\n  return () => (next) => (action) => {\n    if (isActionCreator2(action)) {\n      console.warn(getMessage(action.type));\n    }\n    return next(action);\n  };\n}\n\n// src/utils.ts\nimport { produce as createNextState, isDraftable } from \"immer\";\nfunction getTimeMeasureUtils(maxDelay, fnName) {\n  let elapsed = 0;\n  return {\n    measureTime(fn) {\n      const started = Date.now();\n      try {\n        return fn();\n      } finally {\n        const finished = Date.now();\n        elapsed += finished - started;\n      }\n    },\n    warnIfExceeded() {\n      if (elapsed > maxDelay) {\n        console.warn(`${fnName} took ${elapsed}ms, which is more than the warning threshold of ${maxDelay}ms. \nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\nIt is disabled in production builds, so you don't need to worry about that.`);\n      }\n    }\n  };\n}\nvar Tuple = class _Tuple extends Array {\n  constructor(...items) {\n    super(...items);\n    Object.setPrototypeOf(this, _Tuple.prototype);\n  }\n  static get [Symbol.species]() {\n    return _Tuple;\n  }\n  concat(...arr) {\n    return super.concat.apply(this, arr);\n  }\n  prepend(...arr) {\n    if (arr.length === 1 && Array.isArray(arr[0])) {\n      return new _Tuple(...arr[0].concat(this));\n    }\n    return new _Tuple(...arr.concat(this));\n  }\n};\nfunction freezeDraftable(val) {\n  return isDraftable(val) ? createNextState(val, () => {\n  }) : val;\n}\nfunction getOrInsertComputed(map, key, compute) {\n  if (map.has(key)) return map.get(key);\n  return map.set(key, compute(key)).get(key);\n}\n\n// src/immutableStateInvariantMiddleware.ts\nfunction isImmutableDefault(value) {\n  return typeof value !== \"object\" || value == null || Object.isFrozen(value);\n}\nfunction trackForMutations(isImmutable, ignorePaths, obj) {\n  const trackedProperties = trackProperties(isImmutable, ignorePaths, obj);\n  return {\n    detectMutations() {\n      return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);\n    }\n  };\n}\nfunction trackProperties(isImmutable, ignorePaths = [], obj, path = \"\", checkedObjects = /* @__PURE__ */ new Set()) {\n  const tracked = {\n    value: obj\n  };\n  if (!isImmutable(obj) && !checkedObjects.has(obj)) {\n    checkedObjects.add(obj);\n    tracked.children = {};\n    for (const key in obj) {\n      const childPath = path ? path + \".\" + key : key;\n      if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {\n        continue;\n      }\n      tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);\n    }\n  }\n  return tracked;\n}\nfunction detectMutations(isImmutable, ignoredPaths = [], trackedProperty, obj, sameParentRef = false, path = \"\") {\n  const prevObj = trackedProperty ? trackedProperty.value : void 0;\n  const sameRef = prevObj === obj;\n  if (sameParentRef && !sameRef && !Number.isNaN(obj)) {\n    return {\n      wasMutated: true,\n      path\n    };\n  }\n  if (isImmutable(prevObj) || isImmutable(obj)) {\n    return {\n      wasMutated: false\n    };\n  }\n  const keysToDetect = {};\n  for (let key in trackedProperty.children) {\n    keysToDetect[key] = true;\n  }\n  for (let key in obj) {\n    keysToDetect[key] = true;\n  }\n  const hasIgnoredPaths = ignoredPaths.length > 0;\n  for (let key in keysToDetect) {\n    const nestedPath = path ? path + \".\" + key : key;\n    if (hasIgnoredPaths) {\n      const hasMatches = ignoredPaths.some((ignored) => {\n        if (ignored instanceof RegExp) {\n          return ignored.test(nestedPath);\n        }\n        return nestedPath === ignored;\n      });\n      if (hasMatches) {\n        continue;\n      }\n    }\n    const result = detectMutations(isImmutable, ignoredPaths, trackedProperty.children[key], obj[key], sameRef, nestedPath);\n    if (result.wasMutated) {\n      return result;\n    }\n  }\n  return {\n    wasMutated: false\n  };\n}\nfunction createImmutableStateInvariantMiddleware(options = {}) {\n  if (process.env.NODE_ENV === \"production\") {\n    return () => (next) => (action) => next(action);\n  } else {\n    let stringify2 = function(obj, serializer, indent, decycler) {\n      return JSON.stringify(obj, getSerialize2(serializer, decycler), indent);\n    }, getSerialize2 = function(serializer, decycler) {\n      let stack = [], keys = [];\n      if (!decycler) decycler = function(_, value) {\n        if (stack[0] === value) return \"[Circular ~]\";\n        return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\";\n      };\n      return function(key, value) {\n        if (stack.length > 0) {\n          var thisPos = stack.indexOf(this);\n          ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\n          ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\n          if (~stack.indexOf(value)) value = decycler.call(this, key, value);\n        } else stack.push(value);\n        return serializer == null ? value : serializer.call(this, key, value);\n      };\n    };\n    var stringify = stringify2, getSerialize = getSerialize2;\n    let {\n      isImmutable = isImmutableDefault,\n      ignoredPaths,\n      warnAfter = 32\n    } = options;\n    const track = trackForMutations.bind(null, isImmutable, ignoredPaths);\n    return ({\n      getState\n    }) => {\n      let state = getState();\n      let tracker = track(state);\n      let result;\n      return (next) => (action) => {\n        const measureUtils = getTimeMeasureUtils(warnAfter, \"ImmutableStateInvariantMiddleware\");\n        measureUtils.measureTime(() => {\n          state = getState();\n          result = tracker.detectMutations();\n          tracker = track(state);\n          if (result.wasMutated) {\n            throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(19) : `A state mutation was detected between dispatches, in the path '${result.path || \"\"}'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);\n          }\n        });\n        const dispatchedAction = next(action);\n        measureUtils.measureTime(() => {\n          state = getState();\n          result = tracker.detectMutations();\n          tracker = track(state);\n          if (result.wasMutated) {\n            throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(20) : `A state mutation was detected inside a dispatch, in the path: ${result.path || \"\"}. Take a look at the reducer(s) handling the action ${stringify2(action)}. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);\n          }\n        });\n        measureUtils.warnIfExceeded();\n        return dispatchedAction;\n      };\n    };\n  }\n}\n\n// src/serializableStateInvariantMiddleware.ts\nimport { isAction as isAction2, isPlainObject } from \"redux\";\nfunction isPlain(val) {\n  const type = typeof val;\n  return val == null || type === \"string\" || type === \"boolean\" || type === \"number\" || Array.isArray(val) || isPlainObject(val);\n}\nfunction findNonSerializableValue(value, path = \"\", isSerializable = isPlain, getEntries, ignoredPaths = [], cache) {\n  let foundNestedSerializable;\n  if (!isSerializable(value)) {\n    return {\n      keyPath: path || \"<root>\",\n      value\n    };\n  }\n  if (typeof value !== \"object\" || value === null) {\n    return false;\n  }\n  if (cache?.has(value)) return false;\n  const entries = getEntries != null ? getEntries(value) : Object.entries(value);\n  const hasIgnoredPaths = ignoredPaths.length > 0;\n  for (const [key, nestedValue] of entries) {\n    const nestedPath = path ? path + \".\" + key : key;\n    if (hasIgnoredPaths) {\n      const hasMatches = ignoredPaths.some((ignored) => {\n        if (ignored instanceof RegExp) {\n          return ignored.test(nestedPath);\n        }\n        return nestedPath === ignored;\n      });\n      if (hasMatches) {\n        continue;\n      }\n    }\n    if (!isSerializable(nestedValue)) {\n      return {\n        keyPath: nestedPath,\n        value: nestedValue\n      };\n    }\n    if (typeof nestedValue === \"object\") {\n      foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths, cache);\n      if (foundNestedSerializable) {\n        return foundNestedSerializable;\n      }\n    }\n  }\n  if (cache && isNestedFrozen(value)) cache.add(value);\n  return false;\n}\nfunction isNestedFrozen(value) {\n  if (!Object.isFrozen(value)) return false;\n  for (const nestedValue of Object.values(value)) {\n    if (typeof nestedValue !== \"object\" || nestedValue === null) continue;\n    if (!isNestedFrozen(nestedValue)) return false;\n  }\n  return true;\n}\nfunction createSerializableStateInvariantMiddleware(options = {}) {\n  if (process.env.NODE_ENV === \"production\") {\n    return () => (next) => (action) => next(action);\n  } else {\n    const {\n      isSerializable = isPlain,\n      getEntries,\n      ignoredActions = [],\n      ignoredActionPaths = [\"meta.arg\", \"meta.baseQueryMeta\"],\n      ignoredPaths = [],\n      warnAfter = 32,\n      ignoreState = false,\n      ignoreActions = false,\n      disableCache = false\n    } = options;\n    const cache = !disableCache && WeakSet ? /* @__PURE__ */ new WeakSet() : void 0;\n    return (storeAPI) => (next) => (action) => {\n      if (!isAction2(action)) {\n        return next(action);\n      }\n      const result = next(action);\n      const measureUtils = getTimeMeasureUtils(warnAfter, \"SerializableStateInvariantMiddleware\");\n      if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)) {\n        measureUtils.measureTime(() => {\n          const foundActionNonSerializableValue = findNonSerializableValue(action, \"\", isSerializable, getEntries, ignoredActionPaths, cache);\n          if (foundActionNonSerializableValue) {\n            const {\n              keyPath,\n              value\n            } = foundActionNonSerializableValue;\n            console.error(`A non-serializable value was detected in an action, in the path: \\`${keyPath}\\`. Value:`, value, \"\\nTake a look at the logic that dispatched this action: \", action, \"\\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)\", \"\\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)\");\n          }\n        });\n      }\n      if (!ignoreState) {\n        measureUtils.measureTime(() => {\n          const state = storeAPI.getState();\n          const foundStateNonSerializableValue = findNonSerializableValue(state, \"\", isSerializable, getEntries, ignoredPaths, cache);\n          if (foundStateNonSerializableValue) {\n            const {\n              keyPath,\n              value\n            } = foundStateNonSerializableValue;\n            console.error(`A non-serializable value was detected in the state, in the path: \\`${keyPath}\\`. Value:`, value, `\nTake a look at the reducer(s) handling this action type: ${action.type}.\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)`);\n          }\n        });\n        measureUtils.warnIfExceeded();\n      }\n      return result;\n    };\n  }\n}\n\n// src/getDefaultMiddleware.ts\nfunction isBoolean(x) {\n  return typeof x === \"boolean\";\n}\nvar buildGetDefaultMiddleware = () => function getDefaultMiddleware(options) {\n  const {\n    thunk = true,\n    immutableCheck = true,\n    serializableCheck = true,\n    actionCreatorCheck = true\n  } = options ?? {};\n  let middlewareArray = new Tuple();\n  if (thunk) {\n    if (isBoolean(thunk)) {\n      middlewareArray.push(thunkMiddleware);\n    } else {\n      middlewareArray.push(withExtraArgument(thunk.extraArgument));\n    }\n  }\n  if (process.env.NODE_ENV !== \"production\") {\n    if (immutableCheck) {\n      let immutableOptions = {};\n      if (!isBoolean(immutableCheck)) {\n        immutableOptions = immutableCheck;\n      }\n      middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));\n    }\n    if (serializableCheck) {\n      let serializableOptions = {};\n      if (!isBoolean(serializableCheck)) {\n        serializableOptions = serializableCheck;\n      }\n      middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));\n    }\n    if (actionCreatorCheck) {\n      let actionCreatorOptions = {};\n      if (!isBoolean(actionCreatorCheck)) {\n        actionCreatorOptions = actionCreatorCheck;\n      }\n      middlewareArray.unshift(createActionCreatorInvariantMiddleware(actionCreatorOptions));\n    }\n  }\n  return middlewareArray;\n};\n\n// src/autoBatchEnhancer.ts\nvar SHOULD_AUTOBATCH = \"RTK_autoBatch\";\nvar prepareAutoBatched = () => (payload) => ({\n  payload,\n  meta: {\n    [SHOULD_AUTOBATCH]: true\n  }\n});\nvar createQueueWithTimer = (timeout) => {\n  return (notify) => {\n    setTimeout(notify, timeout);\n  };\n};\nvar autoBatchEnhancer = (options = {\n  type: \"raf\"\n}) => (next) => (...args) => {\n  const store = next(...args);\n  let notifying = true;\n  let shouldNotifyAtEndOfTick = false;\n  let notificationQueued = false;\n  const listeners = /* @__PURE__ */ new Set();\n  const queueCallback = options.type === \"tick\" ? queueMicrotask : options.type === \"raf\" ? (\n    // requestAnimationFrame won't exist in SSR environments. Fall back to a vague approximation just to keep from erroring.\n    typeof window !== \"undefined\" && window.requestAnimationFrame ? window.requestAnimationFrame : createQueueWithTimer(10)\n  ) : options.type === \"callback\" ? options.queueNotification : createQueueWithTimer(options.timeout);\n  const notifyListeners = () => {\n    notificationQueued = false;\n    if (shouldNotifyAtEndOfTick) {\n      shouldNotifyAtEndOfTick = false;\n      listeners.forEach((l) => l());\n    }\n  };\n  return Object.assign({}, store, {\n    // Override the base `store.subscribe` method to keep original listeners\n    // from running if we're delaying notifications\n    subscribe(listener2) {\n      const wrappedListener = () => notifying && listener2();\n      const unsubscribe = store.subscribe(wrappedListener);\n      listeners.add(listener2);\n      return () => {\n        unsubscribe();\n        listeners.delete(listener2);\n      };\n    },\n    // Override the base `store.dispatch` method so that we can check actions\n    // for the `shouldAutoBatch` flag and determine if batching is active\n    dispatch(action) {\n      try {\n        notifying = !action?.meta?.[SHOULD_AUTOBATCH];\n        shouldNotifyAtEndOfTick = !notifying;\n        if (shouldNotifyAtEndOfTick) {\n          if (!notificationQueued) {\n            notificationQueued = true;\n            queueCallback(notifyListeners);\n          }\n        }\n        return store.dispatch(action);\n      } finally {\n        notifying = true;\n      }\n    }\n  });\n};\n\n// src/getDefaultEnhancers.ts\nvar buildGetDefaultEnhancers = (middlewareEnhancer) => function getDefaultEnhancers(options) {\n  const {\n    autoBatch = true\n  } = options ?? {};\n  let enhancerArray = new Tuple(middlewareEnhancer);\n  if (autoBatch) {\n    enhancerArray.push(autoBatchEnhancer(typeof autoBatch === \"object\" ? autoBatch : void 0));\n  }\n  return enhancerArray;\n};\n\n// src/configureStore.ts\nfunction configureStore(options) {\n  const getDefaultMiddleware = buildGetDefaultMiddleware();\n  const {\n    reducer = void 0,\n    middleware,\n    devTools = true,\n    duplicateMiddlewareCheck = true,\n    preloadedState = void 0,\n    enhancers = void 0\n  } = options || {};\n  let rootReducer;\n  if (typeof reducer === \"function\") {\n    rootReducer = reducer;\n  } else if (isPlainObject2(reducer)) {\n    rootReducer = combineReducers(reducer);\n  } else {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(1) : \"`reducer` is a required argument, and must be a function or an object of functions that can be passed to combineReducers\");\n  }\n  if (process.env.NODE_ENV !== \"production\" && middleware && typeof middleware !== \"function\") {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(2) : \"`middleware` field must be a callback\");\n  }\n  let finalMiddleware;\n  if (typeof middleware === \"function\") {\n    finalMiddleware = middleware(getDefaultMiddleware);\n    if (process.env.NODE_ENV !== \"production\" && !Array.isArray(finalMiddleware)) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(3) : \"when using a middleware builder function, an array of middleware must be returned\");\n    }\n  } else {\n    finalMiddleware = getDefaultMiddleware();\n  }\n  if (process.env.NODE_ENV !== \"production\" && finalMiddleware.some((item) => typeof item !== \"function\")) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(4) : \"each middleware provided to configureStore must be a function\");\n  }\n  if (process.env.NODE_ENV !== \"production\" && duplicateMiddlewareCheck) {\n    let middlewareReferences = /* @__PURE__ */ new Set();\n    finalMiddleware.forEach((middleware2) => {\n      if (middlewareReferences.has(middleware2)) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(42) : \"Duplicate middleware references found when creating the store. Ensure that each middleware is only included once.\");\n      }\n      middlewareReferences.add(middleware2);\n    });\n  }\n  let finalCompose = compose2;\n  if (devTools) {\n    finalCompose = composeWithDevTools({\n      // Enable capture of stack traces for dispatched Redux actions\n      trace: process.env.NODE_ENV !== \"production\",\n      ...typeof devTools === \"object\" && devTools\n    });\n  }\n  const middlewareEnhancer = applyMiddleware(...finalMiddleware);\n  const getDefaultEnhancers = buildGetDefaultEnhancers(middlewareEnhancer);\n  if (process.env.NODE_ENV !== \"production\" && enhancers && typeof enhancers !== \"function\") {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(5) : \"`enhancers` field must be a callback\");\n  }\n  let storeEnhancers = typeof enhancers === \"function\" ? enhancers(getDefaultEnhancers) : getDefaultEnhancers();\n  if (process.env.NODE_ENV !== \"production\" && !Array.isArray(storeEnhancers)) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(6) : \"`enhancers` callback must return an array\");\n  }\n  if (process.env.NODE_ENV !== \"production\" && storeEnhancers.some((item) => typeof item !== \"function\")) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(7) : \"each enhancer provided to configureStore must be a function\");\n  }\n  if (process.env.NODE_ENV !== \"production\" && finalMiddleware.length && !storeEnhancers.includes(middlewareEnhancer)) {\n    console.error(\"middlewares were provided, but middleware enhancer was not included in final enhancers - make sure to call `getDefaultEnhancers`\");\n  }\n  const composedEnhancer = finalCompose(...storeEnhancers);\n  return createStore(rootReducer, preloadedState, composedEnhancer);\n}\n\n// src/createReducer.ts\nimport { produce as createNextState2, isDraft as isDraft2, isDraftable as isDraftable2 } from \"immer\";\n\n// src/mapBuilders.ts\nfunction executeReducerBuilderCallback(builderCallback) {\n  const actionsMap = {};\n  const actionMatchers = [];\n  let defaultCaseReducer;\n  const builder = {\n    addCase(typeOrActionCreator, reducer) {\n      if (process.env.NODE_ENV !== \"production\") {\n        if (actionMatchers.length > 0) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(26) : \"`builder.addCase` should only be called before calling `builder.addMatcher`\");\n        }\n        if (defaultCaseReducer) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(27) : \"`builder.addCase` should only be called before calling `builder.addDefaultCase`\");\n        }\n      }\n      const type = typeof typeOrActionCreator === \"string\" ? typeOrActionCreator : typeOrActionCreator.type;\n      if (!type) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(28) : \"`builder.addCase` cannot be called with an empty action type\");\n      }\n      if (type in actionsMap) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(29) : `\\`builder.addCase\\` cannot be called with two reducers for the same action type '${type}'`);\n      }\n      actionsMap[type] = reducer;\n      return builder;\n    },\n    addMatcher(matcher, reducer) {\n      if (process.env.NODE_ENV !== \"production\") {\n        if (defaultCaseReducer) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(30) : \"`builder.addMatcher` should only be called before calling `builder.addDefaultCase`\");\n        }\n      }\n      actionMatchers.push({\n        matcher,\n        reducer\n      });\n      return builder;\n    },\n    addDefaultCase(reducer) {\n      if (process.env.NODE_ENV !== \"production\") {\n        if (defaultCaseReducer) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(31) : \"`builder.addDefaultCase` can only be called once\");\n        }\n      }\n      defaultCaseReducer = reducer;\n      return builder;\n    }\n  };\n  builderCallback(builder);\n  return [actionsMap, actionMatchers, defaultCaseReducer];\n}\n\n// src/createReducer.ts\nfunction isStateFunction(x) {\n  return typeof x === \"function\";\n}\nfunction createReducer(initialState, mapOrBuilderCallback) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (typeof mapOrBuilderCallback === \"object\") {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(8) : \"The object notation for `createReducer` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer\");\n    }\n  }\n  let [actionsMap, finalActionMatchers, finalDefaultCaseReducer] = executeReducerBuilderCallback(mapOrBuilderCallback);\n  let getInitialState;\n  if (isStateFunction(initialState)) {\n    getInitialState = () => freezeDraftable(initialState());\n  } else {\n    const frozenInitialState = freezeDraftable(initialState);\n    getInitialState = () => frozenInitialState;\n  }\n  function reducer(state = getInitialState(), action) {\n    let caseReducers = [actionsMap[action.type], ...finalActionMatchers.filter(({\n      matcher\n    }) => matcher(action)).map(({\n      reducer: reducer2\n    }) => reducer2)];\n    if (caseReducers.filter((cr) => !!cr).length === 0) {\n      caseReducers = [finalDefaultCaseReducer];\n    }\n    return caseReducers.reduce((previousState, caseReducer) => {\n      if (caseReducer) {\n        if (isDraft2(previousState)) {\n          const draft = previousState;\n          const result = caseReducer(draft, action);\n          if (result === void 0) {\n            return previousState;\n          }\n          return result;\n        } else if (!isDraftable2(previousState)) {\n          const result = caseReducer(previousState, action);\n          if (result === void 0) {\n            if (previousState === null) {\n              return previousState;\n            }\n            throw Error(\"A case reducer on a non-draftable value must not return undefined\");\n          }\n          return result;\n        } else {\n          return createNextState2(previousState, (draft) => {\n            return caseReducer(draft, action);\n          });\n        }\n      }\n      return previousState;\n    }, state);\n  }\n  reducer.getInitialState = getInitialState;\n  return reducer;\n}\n\n// src/matchers.ts\nvar matches = (matcher, action) => {\n  if (hasMatchFunction(matcher)) {\n    return matcher.match(action);\n  } else {\n    return matcher(action);\n  }\n};\nfunction isAnyOf(...matchers) {\n  return (action) => {\n    return matchers.some((matcher) => matches(matcher, action));\n  };\n}\nfunction isAllOf(...matchers) {\n  return (action) => {\n    return matchers.every((matcher) => matches(matcher, action));\n  };\n}\nfunction hasExpectedRequestMetadata(action, validStatus) {\n  if (!action || !action.meta) return false;\n  const hasValidRequestId = typeof action.meta.requestId === \"string\";\n  const hasValidRequestStatus = validStatus.indexOf(action.meta.requestStatus) > -1;\n  return hasValidRequestId && hasValidRequestStatus;\n}\nfunction isAsyncThunkArray(a) {\n  return typeof a[0] === \"function\" && \"pending\" in a[0] && \"fulfilled\" in a[0] && \"rejected\" in a[0];\n}\nfunction isPending(...asyncThunks) {\n  if (asyncThunks.length === 0) {\n    return (action) => hasExpectedRequestMetadata(action, [\"pending\"]);\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isPending()(asyncThunks[0]);\n  }\n  return isAnyOf(...asyncThunks.map((asyncThunk) => asyncThunk.pending));\n}\nfunction isRejected(...asyncThunks) {\n  if (asyncThunks.length === 0) {\n    return (action) => hasExpectedRequestMetadata(action, [\"rejected\"]);\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isRejected()(asyncThunks[0]);\n  }\n  return isAnyOf(...asyncThunks.map((asyncThunk) => asyncThunk.rejected));\n}\nfunction isRejectedWithValue(...asyncThunks) {\n  const hasFlag = (action) => {\n    return action && action.meta && action.meta.rejectedWithValue;\n  };\n  if (asyncThunks.length === 0) {\n    return isAllOf(isRejected(...asyncThunks), hasFlag);\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isRejectedWithValue()(asyncThunks[0]);\n  }\n  return isAllOf(isRejected(...asyncThunks), hasFlag);\n}\nfunction isFulfilled(...asyncThunks) {\n  if (asyncThunks.length === 0) {\n    return (action) => hasExpectedRequestMetadata(action, [\"fulfilled\"]);\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isFulfilled()(asyncThunks[0]);\n  }\n  return isAnyOf(...asyncThunks.map((asyncThunk) => asyncThunk.fulfilled));\n}\nfunction isAsyncThunkAction(...asyncThunks) {\n  if (asyncThunks.length === 0) {\n    return (action) => hasExpectedRequestMetadata(action, [\"pending\", \"fulfilled\", \"rejected\"]);\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isAsyncThunkAction()(asyncThunks[0]);\n  }\n  return isAnyOf(...asyncThunks.flatMap((asyncThunk) => [asyncThunk.pending, asyncThunk.rejected, asyncThunk.fulfilled]));\n}\n\n// src/nanoid.ts\nvar urlAlphabet = \"ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW\";\nvar nanoid = (size = 21) => {\n  let id = \"\";\n  let i = size;\n  while (i--) {\n    id += urlAlphabet[Math.random() * 64 | 0];\n  }\n  return id;\n};\n\n// src/createAsyncThunk.ts\nvar commonProperties = [\"name\", \"message\", \"stack\", \"code\"];\nvar RejectWithValue = class {\n  constructor(payload, meta) {\n    this.payload = payload;\n    this.meta = meta;\n  }\n  /*\n  type-only property to distinguish between RejectWithValue and FulfillWithMeta\n  does not exist at runtime\n  */\n  _type;\n};\nvar FulfillWithMeta = class {\n  constructor(payload, meta) {\n    this.payload = payload;\n    this.meta = meta;\n  }\n  /*\n  type-only property to distinguish between RejectWithValue and FulfillWithMeta\n  does not exist at runtime\n  */\n  _type;\n};\nvar miniSerializeError = (value) => {\n  if (typeof value === \"object\" && value !== null) {\n    const simpleError = {};\n    for (const property of commonProperties) {\n      if (typeof value[property] === \"string\") {\n        simpleError[property] = value[property];\n      }\n    }\n    return simpleError;\n  }\n  return {\n    message: String(value)\n  };\n};\nvar externalAbortMessage = \"External signal was aborted\";\nvar createAsyncThunk = /* @__PURE__ */ (() => {\n  function createAsyncThunk2(typePrefix, payloadCreator, options) {\n    const fulfilled = createAction(typePrefix + \"/fulfilled\", (payload, requestId, arg, meta) => ({\n      payload,\n      meta: {\n        ...meta || {},\n        arg,\n        requestId,\n        requestStatus: \"fulfilled\"\n      }\n    }));\n    const pending = createAction(typePrefix + \"/pending\", (requestId, arg, meta) => ({\n      payload: void 0,\n      meta: {\n        ...meta || {},\n        arg,\n        requestId,\n        requestStatus: \"pending\"\n      }\n    }));\n    const rejected = createAction(typePrefix + \"/rejected\", (error, requestId, arg, payload, meta) => ({\n      payload,\n      error: (options && options.serializeError || miniSerializeError)(error || \"Rejected\"),\n      meta: {\n        ...meta || {},\n        arg,\n        requestId,\n        rejectedWithValue: !!payload,\n        requestStatus: \"rejected\",\n        aborted: error?.name === \"AbortError\",\n        condition: error?.name === \"ConditionError\"\n      }\n    }));\n    function actionCreator(arg, {\n      signal\n    } = {}) {\n      return (dispatch, getState, extra) => {\n        const requestId = options?.idGenerator ? options.idGenerator(arg) : nanoid();\n        const abortController = new AbortController();\n        let abortHandler;\n        let abortReason;\n        function abort(reason) {\n          abortReason = reason;\n          abortController.abort();\n        }\n        if (signal) {\n          if (signal.aborted) {\n            abort(externalAbortMessage);\n          } else {\n            signal.addEventListener(\"abort\", () => abort(externalAbortMessage), {\n              once: true\n            });\n          }\n        }\n        const promise = async function() {\n          let finalAction;\n          try {\n            let conditionResult = options?.condition?.(arg, {\n              getState,\n              extra\n            });\n            if (isThenable(conditionResult)) {\n              conditionResult = await conditionResult;\n            }\n            if (conditionResult === false || abortController.signal.aborted) {\n              throw {\n                name: \"ConditionError\",\n                message: \"Aborted due to condition callback returning false.\"\n              };\n            }\n            const abortedPromise = new Promise((_, reject) => {\n              abortHandler = () => {\n                reject({\n                  name: \"AbortError\",\n                  message: abortReason || \"Aborted\"\n                });\n              };\n              abortController.signal.addEventListener(\"abort\", abortHandler);\n            });\n            dispatch(pending(requestId, arg, options?.getPendingMeta?.({\n              requestId,\n              arg\n            }, {\n              getState,\n              extra\n            })));\n            finalAction = await Promise.race([abortedPromise, Promise.resolve(payloadCreator(arg, {\n              dispatch,\n              getState,\n              extra,\n              requestId,\n              signal: abortController.signal,\n              abort,\n              rejectWithValue: (value, meta) => {\n                return new RejectWithValue(value, meta);\n              },\n              fulfillWithValue: (value, meta) => {\n                return new FulfillWithMeta(value, meta);\n              }\n            })).then((result) => {\n              if (result instanceof RejectWithValue) {\n                throw result;\n              }\n              if (result instanceof FulfillWithMeta) {\n                return fulfilled(result.payload, requestId, arg, result.meta);\n              }\n              return fulfilled(result, requestId, arg);\n            })]);\n          } catch (err) {\n            finalAction = err instanceof RejectWithValue ? rejected(null, requestId, arg, err.payload, err.meta) : rejected(err, requestId, arg);\n          } finally {\n            if (abortHandler) {\n              abortController.signal.removeEventListener(\"abort\", abortHandler);\n            }\n          }\n          const skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;\n          if (!skipDispatch) {\n            dispatch(finalAction);\n          }\n          return finalAction;\n        }();\n        return Object.assign(promise, {\n          abort,\n          requestId,\n          arg,\n          unwrap() {\n            return promise.then(unwrapResult);\n          }\n        });\n      };\n    }\n    return Object.assign(actionCreator, {\n      pending,\n      rejected,\n      fulfilled,\n      settled: isAnyOf(rejected, fulfilled),\n      typePrefix\n    });\n  }\n  createAsyncThunk2.withTypes = () => createAsyncThunk2;\n  return createAsyncThunk2;\n})();\nfunction unwrapResult(action) {\n  if (action.meta && action.meta.rejectedWithValue) {\n    throw action.payload;\n  }\n  if (action.error) {\n    throw action.error;\n  }\n  return action.payload;\n}\nfunction isThenable(value) {\n  return value !== null && typeof value === \"object\" && typeof value.then === \"function\";\n}\n\n// src/createSlice.ts\nvar asyncThunkSymbol = /* @__PURE__ */ Symbol.for(\"rtk-slice-createasyncthunk\");\nvar asyncThunkCreator = {\n  [asyncThunkSymbol]: createAsyncThunk\n};\nvar ReducerType = /* @__PURE__ */ ((ReducerType2) => {\n  ReducerType2[\"reducer\"] = \"reducer\";\n  ReducerType2[\"reducerWithPrepare\"] = \"reducerWithPrepare\";\n  ReducerType2[\"asyncThunk\"] = \"asyncThunk\";\n  return ReducerType2;\n})(ReducerType || {});\nfunction getType(slice, actionKey) {\n  return `${slice}/${actionKey}`;\n}\nfunction buildCreateSlice({\n  creators\n} = {}) {\n  const cAT = creators?.asyncThunk?.[asyncThunkSymbol];\n  return function createSlice2(options) {\n    const {\n      name,\n      reducerPath = name\n    } = options;\n    if (!name) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(11) : \"`name` is a required option for createSlice\");\n    }\n    if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n      if (options.initialState === void 0) {\n        console.error(\"You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`\");\n      }\n    }\n    const reducers = (typeof options.reducers === \"function\" ? options.reducers(buildReducerCreators()) : options.reducers) || {};\n    const reducerNames = Object.keys(reducers);\n    const context = {\n      sliceCaseReducersByName: {},\n      sliceCaseReducersByType: {},\n      actionCreators: {},\n      sliceMatchers: []\n    };\n    const contextMethods = {\n      addCase(typeOrActionCreator, reducer2) {\n        const type = typeof typeOrActionCreator === \"string\" ? typeOrActionCreator : typeOrActionCreator.type;\n        if (!type) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(12) : \"`context.addCase` cannot be called with an empty action type\");\n        }\n        if (type in context.sliceCaseReducersByType) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(13) : \"`context.addCase` cannot be called with two reducers for the same action type: \" + type);\n        }\n        context.sliceCaseReducersByType[type] = reducer2;\n        return contextMethods;\n      },\n      addMatcher(matcher, reducer2) {\n        context.sliceMatchers.push({\n          matcher,\n          reducer: reducer2\n        });\n        return contextMethods;\n      },\n      exposeAction(name2, actionCreator) {\n        context.actionCreators[name2] = actionCreator;\n        return contextMethods;\n      },\n      exposeCaseReducer(name2, reducer2) {\n        context.sliceCaseReducersByName[name2] = reducer2;\n        return contextMethods;\n      }\n    };\n    reducerNames.forEach((reducerName) => {\n      const reducerDefinition = reducers[reducerName];\n      const reducerDetails = {\n        reducerName,\n        type: getType(name, reducerName),\n        createNotation: typeof options.reducers === \"function\"\n      };\n      if (isAsyncThunkSliceReducerDefinition(reducerDefinition)) {\n        handleThunkCaseReducerDefinition(reducerDetails, reducerDefinition, contextMethods, cAT);\n      } else {\n        handleNormalReducerDefinition(reducerDetails, reducerDefinition, contextMethods);\n      }\n    });\n    function buildReducer() {\n      if (process.env.NODE_ENV !== \"production\") {\n        if (typeof options.extraReducers === \"object\") {\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(14) : \"The object notation for `createSlice.extraReducers` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice\");\n        }\n      }\n      const [extraReducers = {}, actionMatchers = [], defaultCaseReducer = void 0] = typeof options.extraReducers === \"function\" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers];\n      const finalCaseReducers = {\n        ...extraReducers,\n        ...context.sliceCaseReducersByType\n      };\n      return createReducer(options.initialState, (builder) => {\n        for (let key in finalCaseReducers) {\n          builder.addCase(key, finalCaseReducers[key]);\n        }\n        for (let sM of context.sliceMatchers) {\n          builder.addMatcher(sM.matcher, sM.reducer);\n        }\n        for (let m of actionMatchers) {\n          builder.addMatcher(m.matcher, m.reducer);\n        }\n        if (defaultCaseReducer) {\n          builder.addDefaultCase(defaultCaseReducer);\n        }\n      });\n    }\n    const selectSelf = (state) => state;\n    const injectedSelectorCache = /* @__PURE__ */ new Map();\n    const injectedStateCache = /* @__PURE__ */ new WeakMap();\n    let _reducer;\n    function reducer(state, action) {\n      if (!_reducer) _reducer = buildReducer();\n      return _reducer(state, action);\n    }\n    function getInitialState() {\n      if (!_reducer) _reducer = buildReducer();\n      return _reducer.getInitialState();\n    }\n    function makeSelectorProps(reducerPath2, injected = false) {\n      function selectSlice(state) {\n        let sliceState = state[reducerPath2];\n        if (typeof sliceState === \"undefined\") {\n          if (injected) {\n            sliceState = getOrInsertComputed(injectedStateCache, selectSlice, getInitialState);\n          } else if (process.env.NODE_ENV !== \"production\") {\n            throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(15) : \"selectSlice returned undefined for an uninjected slice reducer\");\n          }\n        }\n        return sliceState;\n      }\n      function getSelectors(selectState = selectSelf) {\n        const selectorCache = getOrInsertComputed(injectedSelectorCache, injected, () => /* @__PURE__ */ new WeakMap());\n        return getOrInsertComputed(selectorCache, selectState, () => {\n          const map = {};\n          for (const [name2, selector] of Object.entries(options.selectors ?? {})) {\n            map[name2] = wrapSelector(selector, selectState, () => getOrInsertComputed(injectedStateCache, selectState, getInitialState), injected);\n          }\n          return map;\n        });\n      }\n      return {\n        reducerPath: reducerPath2,\n        getSelectors,\n        get selectors() {\n          return getSelectors(selectSlice);\n        },\n        selectSlice\n      };\n    }\n    const slice = {\n      name,\n      reducer,\n      actions: context.actionCreators,\n      caseReducers: context.sliceCaseReducersByName,\n      getInitialState,\n      ...makeSelectorProps(reducerPath),\n      injectInto(injectable, {\n        reducerPath: pathOpt,\n        ...config\n      } = {}) {\n        const newReducerPath = pathOpt ?? reducerPath;\n        injectable.inject({\n          reducerPath: newReducerPath,\n          reducer\n        }, config);\n        return {\n          ...slice,\n          ...makeSelectorProps(newReducerPath, true)\n        };\n      }\n    };\n    return slice;\n  };\n}\nfunction wrapSelector(selector, selectState, getInitialState, injected) {\n  function wrapper(rootState, ...args) {\n    let sliceState = selectState(rootState);\n    if (typeof sliceState === \"undefined\") {\n      if (injected) {\n        sliceState = getInitialState();\n      } else if (process.env.NODE_ENV !== \"production\") {\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(16) : \"selectState returned undefined for an uninjected slice reducer\");\n      }\n    }\n    return selector(sliceState, ...args);\n  }\n  wrapper.unwrapped = selector;\n  return wrapper;\n}\nvar createSlice = /* @__PURE__ */ buildCreateSlice();\nfunction buildReducerCreators() {\n  function asyncThunk(payloadCreator, config) {\n    return {\n      _reducerDefinitionType: \"asyncThunk\" /* asyncThunk */,\n      payloadCreator,\n      ...config\n    };\n  }\n  asyncThunk.withTypes = () => asyncThunk;\n  return {\n    reducer(caseReducer) {\n      return Object.assign({\n        // hack so the wrapping function has the same name as the original\n        // we need to create a wrapper so the `reducerDefinitionType` is not assigned to the original\n        [caseReducer.name](...args) {\n          return caseReducer(...args);\n        }\n      }[caseReducer.name], {\n        _reducerDefinitionType: \"reducer\" /* reducer */\n      });\n    },\n    preparedReducer(prepare, reducer) {\n      return {\n        _reducerDefinitionType: \"reducerWithPrepare\" /* reducerWithPrepare */,\n        prepare,\n        reducer\n      };\n    },\n    asyncThunk\n  };\n}\nfunction handleNormalReducerDefinition({\n  type,\n  reducerName,\n  createNotation\n}, maybeReducerWithPrepare, context) {\n  let caseReducer;\n  let prepareCallback;\n  if (\"reducer\" in maybeReducerWithPrepare) {\n    if (createNotation && !isCaseReducerWithPrepareDefinition(maybeReducerWithPrepare)) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(17) : \"Please use the `create.preparedReducer` notation for prepared action creators with the `create` notation.\");\n    }\n    caseReducer = maybeReducerWithPrepare.reducer;\n    prepareCallback = maybeReducerWithPrepare.prepare;\n  } else {\n    caseReducer = maybeReducerWithPrepare;\n  }\n  context.addCase(type, caseReducer).exposeCaseReducer(reducerName, caseReducer).exposeAction(reducerName, prepareCallback ? createAction(type, prepareCallback) : createAction(type));\n}\nfunction isAsyncThunkSliceReducerDefinition(reducerDefinition) {\n  return reducerDefinition._reducerDefinitionType === \"asyncThunk\" /* asyncThunk */;\n}\nfunction isCaseReducerWithPrepareDefinition(reducerDefinition) {\n  return reducerDefinition._reducerDefinitionType === \"reducerWithPrepare\" /* reducerWithPrepare */;\n}\nfunction handleThunkCaseReducerDefinition({\n  type,\n  reducerName\n}, reducerDefinition, context, cAT) {\n  if (!cAT) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(18) : \"Cannot use `create.asyncThunk` in the built-in `createSlice`. Use `buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })` to create a customised version of `createSlice`.\");\n  }\n  const {\n    payloadCreator,\n    fulfilled,\n    pending,\n    rejected,\n    settled,\n    options\n  } = reducerDefinition;\n  const thunk = cAT(type, payloadCreator, options);\n  context.exposeAction(reducerName, thunk);\n  if (fulfilled) {\n    context.addCase(thunk.fulfilled, fulfilled);\n  }\n  if (pending) {\n    context.addCase(thunk.pending, pending);\n  }\n  if (rejected) {\n    context.addCase(thunk.rejected, rejected);\n  }\n  if (settled) {\n    context.addMatcher(thunk.settled, settled);\n  }\n  context.exposeCaseReducer(reducerName, {\n    fulfilled: fulfilled || noop,\n    pending: pending || noop,\n    rejected: rejected || noop,\n    settled: settled || noop\n  });\n}\nfunction noop() {\n}\n\n// src/entities/entity_state.ts\nfunction getInitialEntityState() {\n  return {\n    ids: [],\n    entities: {}\n  };\n}\nfunction createInitialStateFactory(stateAdapter) {\n  function getInitialState(additionalState = {}, entities) {\n    const state = Object.assign(getInitialEntityState(), additionalState);\n    return entities ? stateAdapter.setAll(state, entities) : state;\n  }\n  return {\n    getInitialState\n  };\n}\n\n// src/entities/state_selectors.ts\nfunction createSelectorsFactory() {\n  function getSelectors(selectState, options = {}) {\n    const {\n      createSelector: createSelector2 = createDraftSafeSelector\n    } = options;\n    const selectIds = (state) => state.ids;\n    const selectEntities = (state) => state.entities;\n    const selectAll = createSelector2(selectIds, selectEntities, (ids, entities) => ids.map((id) => entities[id]));\n    const selectId = (_, id) => id;\n    const selectById = (entities, id) => entities[id];\n    const selectTotal = createSelector2(selectIds, (ids) => ids.length);\n    if (!selectState) {\n      return {\n        selectIds,\n        selectEntities,\n        selectAll,\n        selectTotal,\n        selectById: createSelector2(selectEntities, selectId, selectById)\n      };\n    }\n    const selectGlobalizedEntities = createSelector2(selectState, selectEntities);\n    return {\n      selectIds: createSelector2(selectState, selectIds),\n      selectEntities: selectGlobalizedEntities,\n      selectAll: createSelector2(selectState, selectAll),\n      selectTotal: createSelector2(selectState, selectTotal),\n      selectById: createSelector2(selectGlobalizedEntities, selectId, selectById)\n    };\n  }\n  return {\n    getSelectors\n  };\n}\n\n// src/entities/state_adapter.ts\nimport { produce as createNextState3, isDraft as isDraft3 } from \"immer\";\nvar isDraftTyped = isDraft3;\nfunction createSingleArgumentStateOperator(mutator) {\n  const operator = createStateOperator((_, state) => mutator(state));\n  return function operation(state) {\n    return operator(state, void 0);\n  };\n}\nfunction createStateOperator(mutator) {\n  return function operation(state, arg) {\n    function isPayloadActionArgument(arg2) {\n      return isFSA(arg2);\n    }\n    const runMutator = (draft) => {\n      if (isPayloadActionArgument(arg)) {\n        mutator(arg.payload, draft);\n      } else {\n        mutator(arg, draft);\n      }\n    };\n    if (isDraftTyped(state)) {\n      runMutator(state);\n      return state;\n    }\n    return createNextState3(state, runMutator);\n  };\n}\n\n// src/entities/utils.ts\nimport { current as current2, isDraft as isDraft4 } from \"immer\";\nfunction selectIdValue(entity, selectId) {\n  const key = selectId(entity);\n  if (process.env.NODE_ENV !== \"production\" && key === void 0) {\n    console.warn(\"The entity passed to the `selectId` implementation returned undefined.\", \"You should probably provide your own `selectId` implementation.\", \"The entity that was passed:\", entity, \"The `selectId` implementation:\", selectId.toString());\n  }\n  return key;\n}\nfunction ensureEntitiesArray(entities) {\n  if (!Array.isArray(entities)) {\n    entities = Object.values(entities);\n  }\n  return entities;\n}\nfunction getCurrent(value) {\n  return isDraft4(value) ? current2(value) : value;\n}\nfunction splitAddedUpdatedEntities(newEntities, selectId, state) {\n  newEntities = ensureEntitiesArray(newEntities);\n  const existingIdsArray = getCurrent(state.ids);\n  const existingIds = new Set(existingIdsArray);\n  const added = [];\n  const addedIds = /* @__PURE__ */ new Set([]);\n  const updated = [];\n  for (const entity of newEntities) {\n    const id = selectIdValue(entity, selectId);\n    if (existingIds.has(id) || addedIds.has(id)) {\n      updated.push({\n        id,\n        changes: entity\n      });\n    } else {\n      addedIds.add(id);\n      added.push(entity);\n    }\n  }\n  return [added, updated, existingIdsArray];\n}\n\n// src/entities/unsorted_state_adapter.ts\nfunction createUnsortedStateAdapter(selectId) {\n  function addOneMutably(entity, state) {\n    const key = selectIdValue(entity, selectId);\n    if (key in state.entities) {\n      return;\n    }\n    state.ids.push(key);\n    state.entities[key] = entity;\n  }\n  function addManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    for (const entity of newEntities) {\n      addOneMutably(entity, state);\n    }\n  }\n  function setOneMutably(entity, state) {\n    const key = selectIdValue(entity, selectId);\n    if (!(key in state.entities)) {\n      state.ids.push(key);\n    }\n    ;\n    state.entities[key] = entity;\n  }\n  function setManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    for (const entity of newEntities) {\n      setOneMutably(entity, state);\n    }\n  }\n  function setAllMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    state.ids = [];\n    state.entities = {};\n    addManyMutably(newEntities, state);\n  }\n  function removeOneMutably(key, state) {\n    return removeManyMutably([key], state);\n  }\n  function removeManyMutably(keys, state) {\n    let didMutate = false;\n    keys.forEach((key) => {\n      if (key in state.entities) {\n        delete state.entities[key];\n        didMutate = true;\n      }\n    });\n    if (didMutate) {\n      state.ids = state.ids.filter((id) => id in state.entities);\n    }\n  }\n  function removeAllMutably(state) {\n    Object.assign(state, {\n      ids: [],\n      entities: {}\n    });\n  }\n  function takeNewKey(keys, update, state) {\n    const original3 = state.entities[update.id];\n    if (original3 === void 0) {\n      return false;\n    }\n    const updated = Object.assign({}, original3, update.changes);\n    const newKey = selectIdValue(updated, selectId);\n    const hasNewKey = newKey !== update.id;\n    if (hasNewKey) {\n      keys[update.id] = newKey;\n      delete state.entities[update.id];\n    }\n    ;\n    state.entities[newKey] = updated;\n    return hasNewKey;\n  }\n  function updateOneMutably(update, state) {\n    return updateManyMutably([update], state);\n  }\n  function updateManyMutably(updates, state) {\n    const newKeys = {};\n    const updatesPerEntity = {};\n    updates.forEach((update) => {\n      if (update.id in state.entities) {\n        updatesPerEntity[update.id] = {\n          id: update.id,\n          // Spreads ignore falsy values, so this works even if there isn't\n          // an existing update already at this key\n          changes: {\n            ...updatesPerEntity[update.id]?.changes,\n            ...update.changes\n          }\n        };\n      }\n    });\n    updates = Object.values(updatesPerEntity);\n    const didMutateEntities = updates.length > 0;\n    if (didMutateEntities) {\n      const didMutateIds = updates.filter((update) => takeNewKey(newKeys, update, state)).length > 0;\n      if (didMutateIds) {\n        state.ids = Object.values(state.entities).map((e) => selectIdValue(e, selectId));\n      }\n    }\n  }\n  function upsertOneMutably(entity, state) {\n    return upsertManyMutably([entity], state);\n  }\n  function upsertManyMutably(newEntities, state) {\n    const [added, updated] = splitAddedUpdatedEntities(newEntities, selectId, state);\n    addManyMutably(added, state);\n    updateManyMutably(updated, state);\n  }\n  return {\n    removeAll: createSingleArgumentStateOperator(removeAllMutably),\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably)\n  };\n}\n\n// src/entities/sorted_state_adapter.ts\nfunction findInsertIndex(sortedItems, item, comparisonFunction) {\n  let lowIndex = 0;\n  let highIndex = sortedItems.length;\n  while (lowIndex < highIndex) {\n    let middleIndex = lowIndex + highIndex >>> 1;\n    const currentItem = sortedItems[middleIndex];\n    const res = comparisonFunction(item, currentItem);\n    if (res >= 0) {\n      lowIndex = middleIndex + 1;\n    } else {\n      highIndex = middleIndex;\n    }\n  }\n  return lowIndex;\n}\nfunction insert(sortedItems, item, comparisonFunction) {\n  const insertAtIndex = findInsertIndex(sortedItems, item, comparisonFunction);\n  sortedItems.splice(insertAtIndex, 0, item);\n  return sortedItems;\n}\nfunction createSortedStateAdapter(selectId, comparer) {\n  const {\n    removeOne,\n    removeMany,\n    removeAll\n  } = createUnsortedStateAdapter(selectId);\n  function addOneMutably(entity, state) {\n    return addManyMutably([entity], state);\n  }\n  function addManyMutably(newEntities, state, existingIds) {\n    newEntities = ensureEntitiesArray(newEntities);\n    const existingKeys = new Set(existingIds ?? getCurrent(state.ids));\n    const models = newEntities.filter((model) => !existingKeys.has(selectIdValue(model, selectId)));\n    if (models.length !== 0) {\n      mergeFunction(state, models);\n    }\n  }\n  function setOneMutably(entity, state) {\n    return setManyMutably([entity], state);\n  }\n  function setManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    if (newEntities.length !== 0) {\n      for (const item of newEntities) {\n        delete state.entities[selectId(item)];\n      }\n      mergeFunction(state, newEntities);\n    }\n  }\n  function setAllMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    state.entities = {};\n    state.ids = [];\n    addManyMutably(newEntities, state, []);\n  }\n  function updateOneMutably(update, state) {\n    return updateManyMutably([update], state);\n  }\n  function updateManyMutably(updates, state) {\n    let appliedUpdates = false;\n    let replacedIds = false;\n    for (let update of updates) {\n      const entity = state.entities[update.id];\n      if (!entity) {\n        continue;\n      }\n      appliedUpdates = true;\n      Object.assign(entity, update.changes);\n      const newId = selectId(entity);\n      if (update.id !== newId) {\n        replacedIds = true;\n        delete state.entities[update.id];\n        const oldIndex = state.ids.indexOf(update.id);\n        state.ids[oldIndex] = newId;\n        state.entities[newId] = entity;\n      }\n    }\n    if (appliedUpdates) {\n      mergeFunction(state, [], appliedUpdates, replacedIds);\n    }\n  }\n  function upsertOneMutably(entity, state) {\n    return upsertManyMutably([entity], state);\n  }\n  function upsertManyMutably(newEntities, state) {\n    const [added, updated, existingIdsArray] = splitAddedUpdatedEntities(newEntities, selectId, state);\n    if (added.length) {\n      addManyMutably(added, state, existingIdsArray);\n    }\n    if (updated.length) {\n      updateManyMutably(updated, state);\n    }\n  }\n  function areArraysEqual(a, b) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n      if (a[i] === b[i]) {\n        continue;\n      }\n      return false;\n    }\n    return true;\n  }\n  const mergeFunction = (state, addedItems, appliedUpdates, replacedIds) => {\n    const currentEntities = getCurrent(state.entities);\n    const currentIds = getCurrent(state.ids);\n    const stateEntities = state.entities;\n    let ids = currentIds;\n    if (replacedIds) {\n      ids = new Set(currentIds);\n    }\n    let sortedEntities = [];\n    for (const id of ids) {\n      const entity = currentEntities[id];\n      if (entity) {\n        sortedEntities.push(entity);\n      }\n    }\n    const wasPreviouslyEmpty = sortedEntities.length === 0;\n    for (const item of addedItems) {\n      stateEntities[selectId(item)] = item;\n      if (!wasPreviouslyEmpty) {\n        insert(sortedEntities, item, comparer);\n      }\n    }\n    if (wasPreviouslyEmpty) {\n      sortedEntities = addedItems.slice().sort(comparer);\n    } else if (appliedUpdates) {\n      sortedEntities.sort(comparer);\n    }\n    const newSortedIds = sortedEntities.map(selectId);\n    if (!areArraysEqual(currentIds, newSortedIds)) {\n      state.ids = newSortedIds;\n    }\n  };\n  return {\n    removeOne,\n    removeMany,\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertMany: createStateOperator(upsertManyMutably)\n  };\n}\n\n// src/entities/create_adapter.ts\nfunction createEntityAdapter(options = {}) {\n  const {\n    selectId,\n    sortComparer\n  } = {\n    sortComparer: false,\n    selectId: (instance) => instance.id,\n    ...options\n  };\n  const stateAdapter = sortComparer ? createSortedStateAdapter(selectId, sortComparer) : createUnsortedStateAdapter(selectId);\n  const stateFactory = createInitialStateFactory(stateAdapter);\n  const selectorsFactory = createSelectorsFactory();\n  return {\n    selectId,\n    sortComparer,\n    ...stateFactory,\n    ...selectorsFactory,\n    ...stateAdapter\n  };\n}\n\n// src/listenerMiddleware/index.ts\nimport { isAction as isAction3 } from \"redux\";\n\n// src/listenerMiddleware/exceptions.ts\nvar task = \"task\";\nvar listener = \"listener\";\nvar completed = \"completed\";\nvar cancelled = \"cancelled\";\nvar taskCancelled = `task-${cancelled}`;\nvar taskCompleted = `task-${completed}`;\nvar listenerCancelled = `${listener}-${cancelled}`;\nvar listenerCompleted = `${listener}-${completed}`;\nvar TaskAbortError = class {\n  constructor(code) {\n    this.code = code;\n    this.message = `${task} ${cancelled} (reason: ${code})`;\n  }\n  name = \"TaskAbortError\";\n  message;\n};\n\n// src/listenerMiddleware/utils.ts\nvar assertFunction = (func, expected) => {\n  if (typeof func !== \"function\") {\n    throw new TypeError(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(32) : `${expected} is not a function`);\n  }\n};\nvar noop2 = () => {\n};\nvar catchRejection = (promise, onError = noop2) => {\n  promise.catch(onError);\n  return promise;\n};\nvar addAbortSignalListener = (abortSignal, callback) => {\n  abortSignal.addEventListener(\"abort\", callback, {\n    once: true\n  });\n  return () => abortSignal.removeEventListener(\"abort\", callback);\n};\nvar abortControllerWithReason = (abortController, reason) => {\n  const signal = abortController.signal;\n  if (signal.aborted) {\n    return;\n  }\n  if (!(\"reason\" in signal)) {\n    Object.defineProperty(signal, \"reason\", {\n      enumerable: true,\n      value: reason,\n      configurable: true,\n      writable: true\n    });\n  }\n  ;\n  abortController.abort(reason);\n};\n\n// src/listenerMiddleware/task.ts\nvar validateActive = (signal) => {\n  if (signal.aborted) {\n    const {\n      reason\n    } = signal;\n    throw new TaskAbortError(reason);\n  }\n};\nfunction raceWithSignal(signal, promise) {\n  let cleanup = noop2;\n  return new Promise((resolve, reject) => {\n    const notifyRejection = () => reject(new TaskAbortError(signal.reason));\n    if (signal.aborted) {\n      notifyRejection();\n      return;\n    }\n    cleanup = addAbortSignalListener(signal, notifyRejection);\n    promise.finally(() => cleanup()).then(resolve, reject);\n  }).finally(() => {\n    cleanup = noop2;\n  });\n}\nvar runTask = async (task2, cleanUp) => {\n  try {\n    await Promise.resolve();\n    const value = await task2();\n    return {\n      status: \"ok\",\n      value\n    };\n  } catch (error) {\n    return {\n      status: error instanceof TaskAbortError ? \"cancelled\" : \"rejected\",\n      error\n    };\n  } finally {\n    cleanUp?.();\n  }\n};\nvar createPause = (signal) => {\n  return (promise) => {\n    return catchRejection(raceWithSignal(signal, promise).then((output) => {\n      validateActive(signal);\n      return output;\n    }));\n  };\n};\nvar createDelay = (signal) => {\n  const pause = createPause(signal);\n  return (timeoutMs) => {\n    return pause(new Promise((resolve) => setTimeout(resolve, timeoutMs)));\n  };\n};\n\n// src/listenerMiddleware/index.ts\nvar {\n  assign\n} = Object;\nvar INTERNAL_NIL_TOKEN = {};\nvar alm = \"listenerMiddleware\";\nvar createFork = (parentAbortSignal, parentBlockingPromises) => {\n  const linkControllers = (controller) => addAbortSignalListener(parentAbortSignal, () => abortControllerWithReason(controller, parentAbortSignal.reason));\n  return (taskExecutor, opts) => {\n    assertFunction(taskExecutor, \"taskExecutor\");\n    const childAbortController = new AbortController();\n    linkControllers(childAbortController);\n    const result = runTask(async () => {\n      validateActive(parentAbortSignal);\n      validateActive(childAbortController.signal);\n      const result2 = await taskExecutor({\n        pause: createPause(childAbortController.signal),\n        delay: createDelay(childAbortController.signal),\n        signal: childAbortController.signal\n      });\n      validateActive(childAbortController.signal);\n      return result2;\n    }, () => abortControllerWithReason(childAbortController, taskCompleted));\n    if (opts?.autoJoin) {\n      parentBlockingPromises.push(result.catch(noop2));\n    }\n    return {\n      result: createPause(parentAbortSignal)(result),\n      cancel() {\n        abortControllerWithReason(childAbortController, taskCancelled);\n      }\n    };\n  };\n};\nvar createTakePattern = (startListening, signal) => {\n  const take = async (predicate, timeout) => {\n    validateActive(signal);\n    let unsubscribe = () => {\n    };\n    const tuplePromise = new Promise((resolve, reject) => {\n      let stopListening = startListening({\n        predicate,\n        effect: (action, listenerApi) => {\n          listenerApi.unsubscribe();\n          resolve([action, listenerApi.getState(), listenerApi.getOriginalState()]);\n        }\n      });\n      unsubscribe = () => {\n        stopListening();\n        reject();\n      };\n    });\n    const promises = [tuplePromise];\n    if (timeout != null) {\n      promises.push(new Promise((resolve) => setTimeout(resolve, timeout, null)));\n    }\n    try {\n      const output = await raceWithSignal(signal, Promise.race(promises));\n      validateActive(signal);\n      return output;\n    } finally {\n      unsubscribe();\n    }\n  };\n  return (predicate, timeout) => catchRejection(take(predicate, timeout));\n};\nvar getListenerEntryPropsFrom = (options) => {\n  let {\n    type,\n    actionCreator,\n    matcher,\n    predicate,\n    effect\n  } = options;\n  if (type) {\n    predicate = createAction(type).match;\n  } else if (actionCreator) {\n    type = actionCreator.type;\n    predicate = actionCreator.match;\n  } else if (matcher) {\n    predicate = matcher;\n  } else if (predicate) {\n  } else {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(21) : \"Creating or removing a listener requires one of the known fields for matching an action\");\n  }\n  assertFunction(effect, \"options.listener\");\n  return {\n    predicate,\n    type,\n    effect\n  };\n};\nvar createListenerEntry = /* @__PURE__ */ assign((options) => {\n  const {\n    type,\n    predicate,\n    effect\n  } = getListenerEntryPropsFrom(options);\n  const entry = {\n    id: nanoid(),\n    effect,\n    type,\n    predicate,\n    pending: /* @__PURE__ */ new Set(),\n    unsubscribe: () => {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(22) : \"Unsubscribe not initialized\");\n    }\n  };\n  return entry;\n}, {\n  withTypes: () => createListenerEntry\n});\nvar findListenerEntry = (listenerMap, options) => {\n  const {\n    type,\n    effect,\n    predicate\n  } = getListenerEntryPropsFrom(options);\n  return Array.from(listenerMap.values()).find((entry) => {\n    const matchPredicateOrType = typeof type === \"string\" ? entry.type === type : entry.predicate === predicate;\n    return matchPredicateOrType && entry.effect === effect;\n  });\n};\nvar cancelActiveListeners = (entry) => {\n  entry.pending.forEach((controller) => {\n    abortControllerWithReason(controller, listenerCancelled);\n  });\n};\nvar createClearListenerMiddleware = (listenerMap) => {\n  return () => {\n    listenerMap.forEach(cancelActiveListeners);\n    listenerMap.clear();\n  };\n};\nvar safelyNotifyError = (errorHandler, errorToNotify, errorInfo) => {\n  try {\n    errorHandler(errorToNotify, errorInfo);\n  } catch (errorHandlerError) {\n    setTimeout(() => {\n      throw errorHandlerError;\n    }, 0);\n  }\n};\nvar addListener = /* @__PURE__ */ assign(/* @__PURE__ */ createAction(`${alm}/add`), {\n  withTypes: () => addListener\n});\nvar clearAllListeners = /* @__PURE__ */ createAction(`${alm}/removeAll`);\nvar removeListener = /* @__PURE__ */ assign(/* @__PURE__ */ createAction(`${alm}/remove`), {\n  withTypes: () => removeListener\n});\nvar defaultErrorHandler = (...args) => {\n  console.error(`${alm}/error`, ...args);\n};\nvar createListenerMiddleware = (middlewareOptions = {}) => {\n  const listenerMap = /* @__PURE__ */ new Map();\n  const {\n    extra,\n    onError = defaultErrorHandler\n  } = middlewareOptions;\n  assertFunction(onError, \"onError\");\n  const insertEntry = (entry) => {\n    entry.unsubscribe = () => listenerMap.delete(entry.id);\n    listenerMap.set(entry.id, entry);\n    return (cancelOptions) => {\n      entry.unsubscribe();\n      if (cancelOptions?.cancelActive) {\n        cancelActiveListeners(entry);\n      }\n    };\n  };\n  const startListening = (options) => {\n    const entry = findListenerEntry(listenerMap, options) ?? createListenerEntry(options);\n    return insertEntry(entry);\n  };\n  assign(startListening, {\n    withTypes: () => startListening\n  });\n  const stopListening = (options) => {\n    const entry = findListenerEntry(listenerMap, options);\n    if (entry) {\n      entry.unsubscribe();\n      if (options.cancelActive) {\n        cancelActiveListeners(entry);\n      }\n    }\n    return !!entry;\n  };\n  assign(stopListening, {\n    withTypes: () => stopListening\n  });\n  const notifyListener = async (entry, action, api, getOriginalState) => {\n    const internalTaskController = new AbortController();\n    const take = createTakePattern(startListening, internalTaskController.signal);\n    const autoJoinPromises = [];\n    try {\n      entry.pending.add(internalTaskController);\n      await Promise.resolve(entry.effect(\n        action,\n        // Use assign() rather than ... to avoid extra helper functions added to bundle\n        assign({}, api, {\n          getOriginalState,\n          condition: (predicate, timeout) => take(predicate, timeout).then(Boolean),\n          take,\n          delay: createDelay(internalTaskController.signal),\n          pause: createPause(internalTaskController.signal),\n          extra,\n          signal: internalTaskController.signal,\n          fork: createFork(internalTaskController.signal, autoJoinPromises),\n          unsubscribe: entry.unsubscribe,\n          subscribe: () => {\n            listenerMap.set(entry.id, entry);\n          },\n          cancelActiveListeners: () => {\n            entry.pending.forEach((controller, _, set) => {\n              if (controller !== internalTaskController) {\n                abortControllerWithReason(controller, listenerCancelled);\n                set.delete(controller);\n              }\n            });\n          },\n          cancel: () => {\n            abortControllerWithReason(internalTaskController, listenerCancelled);\n            entry.pending.delete(internalTaskController);\n          },\n          throwIfCancelled: () => {\n            validateActive(internalTaskController.signal);\n          }\n        })\n      ));\n    } catch (listenerError) {\n      if (!(listenerError instanceof TaskAbortError)) {\n        safelyNotifyError(onError, listenerError, {\n          raisedBy: \"effect\"\n        });\n      }\n    } finally {\n      await Promise.all(autoJoinPromises);\n      abortControllerWithReason(internalTaskController, listenerCompleted);\n      entry.pending.delete(internalTaskController);\n    }\n  };\n  const clearListenerMiddleware = createClearListenerMiddleware(listenerMap);\n  const middleware = (api) => (next) => (action) => {\n    if (!isAction3(action)) {\n      return next(action);\n    }\n    if (addListener.match(action)) {\n      return startListening(action.payload);\n    }\n    if (clearAllListeners.match(action)) {\n      clearListenerMiddleware();\n      return;\n    }\n    if (removeListener.match(action)) {\n      return stopListening(action.payload);\n    }\n    let originalState = api.getState();\n    const getOriginalState = () => {\n      if (originalState === INTERNAL_NIL_TOKEN) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(23) : `${alm}: getOriginalState can only be called synchronously`);\n      }\n      return originalState;\n    };\n    let result;\n    try {\n      result = next(action);\n      if (listenerMap.size > 0) {\n        const currentState = api.getState();\n        const listenerEntries = Array.from(listenerMap.values());\n        for (const entry of listenerEntries) {\n          let runListener = false;\n          try {\n            runListener = entry.predicate(action, currentState, originalState);\n          } catch (predicateError) {\n            runListener = false;\n            safelyNotifyError(onError, predicateError, {\n              raisedBy: \"predicate\"\n            });\n          }\n          if (!runListener) {\n            continue;\n          }\n          notifyListener(entry, action, api, getOriginalState);\n        }\n      }\n    } finally {\n      originalState = INTERNAL_NIL_TOKEN;\n    }\n    return result;\n  };\n  return {\n    middleware,\n    startListening,\n    stopListening,\n    clearListeners: clearListenerMiddleware\n  };\n};\n\n// src/dynamicMiddleware/index.ts\nimport { compose as compose3 } from \"redux\";\nvar createMiddlewareEntry = (middleware) => ({\n  middleware,\n  applied: /* @__PURE__ */ new Map()\n});\nvar matchInstance = (instanceId) => (action) => action?.meta?.instanceId === instanceId;\nvar createDynamicMiddleware = () => {\n  const instanceId = nanoid();\n  const middlewareMap = /* @__PURE__ */ new Map();\n  const withMiddleware = Object.assign(createAction(\"dynamicMiddleware/add\", (...middlewares) => ({\n    payload: middlewares,\n    meta: {\n      instanceId\n    }\n  })), {\n    withTypes: () => withMiddleware\n  });\n  const addMiddleware = Object.assign(function addMiddleware2(...middlewares) {\n    middlewares.forEach((middleware2) => {\n      getOrInsertComputed(middlewareMap, middleware2, createMiddlewareEntry);\n    });\n  }, {\n    withTypes: () => addMiddleware\n  });\n  const getFinalMiddleware = (api) => {\n    const appliedMiddleware = Array.from(middlewareMap.values()).map((entry) => getOrInsertComputed(entry.applied, api, entry.middleware));\n    return compose3(...appliedMiddleware);\n  };\n  const isWithMiddleware = isAllOf(withMiddleware, matchInstance(instanceId));\n  const middleware = (api) => (next) => (action) => {\n    if (isWithMiddleware(action)) {\n      addMiddleware(...action.payload);\n      return api.dispatch;\n    }\n    return getFinalMiddleware(api)(next)(action);\n  };\n  return {\n    middleware,\n    addMiddleware,\n    withMiddleware,\n    instanceId\n  };\n};\n\n// src/combineSlices.ts\nimport { combineReducers as combineReducers2 } from \"redux\";\nvar isSliceLike = (maybeSliceLike) => \"reducerPath\" in maybeSliceLike && typeof maybeSliceLike.reducerPath === \"string\";\nvar getReducers = (slices) => slices.flatMap((sliceOrMap) => isSliceLike(sliceOrMap) ? [[sliceOrMap.reducerPath, sliceOrMap.reducer]] : Object.entries(sliceOrMap));\nvar ORIGINAL_STATE = Symbol.for(\"rtk-state-proxy-original\");\nvar isStateProxy = (value) => !!value && !!value[ORIGINAL_STATE];\nvar stateProxyMap = /* @__PURE__ */ new WeakMap();\nvar createStateProxy = (state, reducerMap, initialStateCache) => getOrInsertComputed(stateProxyMap, state, () => new Proxy(state, {\n  get: (target, prop, receiver) => {\n    if (prop === ORIGINAL_STATE) return target;\n    const result = Reflect.get(target, prop, receiver);\n    if (typeof result === \"undefined\") {\n      const cached = initialStateCache[prop];\n      if (typeof cached !== \"undefined\") return cached;\n      const reducer = reducerMap[prop];\n      if (reducer) {\n        const reducerResult = reducer(void 0, {\n          type: nanoid()\n        });\n        if (typeof reducerResult === \"undefined\") {\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(24) : `The slice reducer for key \"${prop.toString()}\" returned undefined when called for selector(). If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`);\n        }\n        initialStateCache[prop] = reducerResult;\n        return reducerResult;\n      }\n    }\n    return result;\n  }\n}));\nvar original = (state) => {\n  if (!isStateProxy(state)) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(25) : \"original must be used on state Proxy\");\n  }\n  return state[ORIGINAL_STATE];\n};\nvar emptyObject = {};\nvar noopReducer = (state = emptyObject) => state;\nfunction combineSlices(...slices) {\n  const reducerMap = Object.fromEntries(getReducers(slices));\n  const getReducer = () => Object.keys(reducerMap).length ? combineReducers2(reducerMap) : noopReducer;\n  let reducer = getReducer();\n  function combinedReducer(state, action) {\n    return reducer(state, action);\n  }\n  combinedReducer.withLazyLoadedSlices = () => combinedReducer;\n  const initialStateCache = {};\n  const inject = (slice, config = {}) => {\n    const {\n      reducerPath,\n      reducer: reducerToInject\n    } = slice;\n    const currentReducer = reducerMap[reducerPath];\n    if (!config.overrideExisting && currentReducer && currentReducer !== reducerToInject) {\n      if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n        console.error(`called \\`inject\\` to override already-existing reducer ${reducerPath} without specifying \\`overrideExisting: true\\``);\n      }\n      return combinedReducer;\n    }\n    if (config.overrideExisting && currentReducer !== reducerToInject) {\n      delete initialStateCache[reducerPath];\n    }\n    reducerMap[reducerPath] = reducerToInject;\n    reducer = getReducer();\n    return combinedReducer;\n  };\n  const selector = Object.assign(function makeSelector(selectorFn, selectState) {\n    return function selector2(state, ...args) {\n      return selectorFn(createStateProxy(selectState ? selectState(state, ...args) : state, reducerMap, initialStateCache), ...args);\n    };\n  }, {\n    original\n  });\n  return Object.assign(combinedReducer, {\n    inject,\n    selector\n  });\n}\n\n// src/formatProdErrorMessage.ts\nfunction formatProdErrorMessage(code) {\n  return `Minified Redux Toolkit error #${code}; visit https://redux-toolkit.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;\n}\nexport {\n  ReducerType,\n  SHOULD_AUTOBATCH,\n  TaskAbortError,\n  Tuple,\n  addListener,\n  asyncThunkCreator,\n  autoBatchEnhancer,\n  buildCreateSlice,\n  clearAllListeners,\n  combineSlices,\n  configureStore,\n  createAction,\n  createActionCreatorInvariantMiddleware,\n  createAsyncThunk,\n  createDraftSafeSelector,\n  createDraftSafeSelectorCreator,\n  createDynamicMiddleware,\n  createEntityAdapter,\n  createImmutableStateInvariantMiddleware,\n  createListenerMiddleware,\n  produce as createNextState,\n  createReducer,\n  createSelector,\n  createSelectorCreator2 as createSelectorCreator,\n  createSerializableStateInvariantMiddleware,\n  createSlice,\n  current3 as current,\n  findNonSerializableValue,\n  formatProdErrorMessage,\n  freeze,\n  isActionCreator,\n  isAllOf,\n  isAnyOf,\n  isAsyncThunkAction,\n  isDraft5 as isDraft,\n  isFSA as isFluxStandardAction,\n  isFulfilled,\n  isImmutableDefault,\n  isPending,\n  isPlain,\n  isRejected,\n  isRejectedWithValue,\n  lruMemoize,\n  miniSerializeError,\n  nanoid,\n  original2 as original,\n  prepareAutoBatched,\n  removeListener,\n  unwrapResult,\n  weakMapMemoize2 as weakMapMemoize\n};\n//# sourceMappingURL=redux-toolkit.modern.mjs.map","import { HomeAssistant, forwardHaptic } from \"custom-card-helpers\";\nimport { InventreeItem, WLEDConfig } from \"../types\";\n\nexport class WLEDService {\n    constructor(private hass: HomeAssistant) {\n        console.debug('🌈 WLED Service: Initialized');\n    }\n\n    async toggleLED(entityId: string): Promise<void> {\n        try {\n            if (!entityId) {\n                forwardHaptic(\"failure\");\n                throw new Error('No entity_id provided');\n            }\n\n            const state = this.hass.states[entityId];\n            if (!state) {\n                forwardHaptic(\"failure\");\n                throw new Error(`Entity ${entityId} not found`);\n            }\n\n            // Toggle the light\n            await this.hass.callService(\n                \"light\",\n                state.state === \"on\" ? \"turn_off\" : \"turn_on\",\n                {\n                    entity_id: entityId\n                }\n            );\n\n            forwardHaptic(\"success\");\n\n        } catch (e) {\n            forwardHaptic(\"failure\");\n            console.error('Failed to toggle LED:', e);\n            throw e;\n        }\n    }\n\n    async locatePart(part: InventreeItem, config: WLEDConfig): Promise<void> {\n        try {\n            console.debug('🌈 WLED: Starting locate part process', { part, config });\n\n            if (!config.entity_id) {\n                forwardHaptic(\"failure\");\n                throw new Error('No entity_id configured for WLED');\n            }\n\n            // Get LED position from part parameters\n            const positionParam = part.parameters?.find(p => \n                p.template_detail?.name === config.parameter_name\n            )?.data;\n\n            if (!positionParam) {\n                throw new Error(`No ${config.parameter_name} parameter found for part`);\n            }\n\n            // Convert position to number\n            const position = parseInt(positionParam);\n            console.debug('🌈 WLED: Using LED position:', position);\n\n            // Get WLED entity\n            const wledEntity = this.hass.states[config.entity_id];\n            if (!wledEntity) {\n                throw new Error(`Entity ${config.entity_id} not found`);\n            }\n\n            // Clean up IP address (remove http:// if present)\n            const wledIp = config.ip_address?.replace('http://', '') || '192.168.0.61';\n            console.debug('🌈 WLED IP:', wledIp);\n\n            // Check current state\n            const isOn = wledEntity.state === 'on';\n\n            // Use Home Assistant's rest service\n            await this.hass.callService('rest_command', 'wled_segment', {\n                url: `http://${wledIp}/json/state`,\n                payload: JSON.stringify(isOn ? {\n                    on: false\n                } : {\n                    on: true,\n                    bri: config.intensity || 128,\n                    seg: [{\n                        id: 0,\n                        start: position - 1,\n                        stop: position,\n                        col: [[255, 0, 0], [0, 0, 0], [0, 0, 0]],\n                        fx: 0  // Solid effect\n                    }]\n                })\n            });\n\n            forwardHaptic(\"success\");\n\n        } catch (e) {\n            forwardHaptic(\"failure\");\n            console.error('Failed to locate part with WLED:', e);\n            throw e;\n        }\n    }\n}\n","import { InventreeItem, ParameterDetail, StockItem } from '../types';\nimport { Logger } from '../utils/logger';\nimport { store } from '../store'; // Import the Redux store\nimport { selectApiConfig, selectApiThrottleDelayMs } from '../store/slices/apiSlice'; // Import the selector\n\nconst logger = Logger.getInstance();\n\n/**\n * Placeholder for InvenTree API Service.\n * Implement actual API calls here.\n */\nclass InventreeApiService {\n  private lastApiCallTimestamp: number = 0;\n  private lastApiFailureTimestamp: number = 0; // Timestamp of the last API failure\n\n  constructor() {\n    logger.log('InventreeApiService', `Initialized.`);\n  }\n\n  private async request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\n    const state = store.getState();\n    const apiSliceConfig = state.api; // Get the whole api slice state\n    \n    const baseUrl = apiSliceConfig.url;\n    const apiKey = apiSliceConfig.apiKey;\n    const throttleDelayMs = apiSliceConfig.throttleDelayMs;\n    const failedRequestRetryDelayMs = apiSliceConfig.failedRequestRetryDelayMs;\n\n    if (!baseUrl || !apiKey) {\n      const errorMsg = 'API base URL or API key is not configured in Redux store (apiSlice).';\n      logger.error('InventreeApiService', errorMsg);\n      this.lastApiFailureTimestamp = Date.now(); // Treat config error as a failure to prevent spamming\n      throw new Error(errorMsg);\n    }\n\n    // Ensure baseUrl has no trailing slash for consistency before appending endpoint\n    const cleanBaseUrl = baseUrl.endsWith('/') ? baseUrl.slice(0, -1) : baseUrl;\n    const url = `${cleanBaseUrl}/${endpoint.startsWith('/') ? endpoint.substring(1) : endpoint}`;\n    \n    const headers = new Headers({\n      'Authorization': `Token ${apiKey}`,\n      'Content-Type': 'application/json',\n      ...(options.headers || {}),\n    });\n\n    logger.log('InventreeApiService', `Requesting URL: ${url}`, { method: options.method || 'GET', level: 'debug' });\n\n    // 1. Handle Failure-Specific Delay (if a recent failure occurred)\n    if (this.lastApiFailureTimestamp > 0) {\n      const timeSinceLastFailure = Date.now() - this.lastApiFailureTimestamp;\n      if (timeSinceLastFailure < failedRequestRetryDelayMs) {\n        const failureDelayNeeded = failedRequestRetryDelayMs - timeSinceLastFailure;\n        logger.warn('InventreeApiService', `Recent API Failure: Delaying next request by ${failureDelayNeeded}ms. Cooldown until ${new Date(Date.now() + failureDelayNeeded).toISOString()}`);\n        await new Promise(resolve => setTimeout(resolve, failureDelayNeeded));\n        // After this enforced delay, we still respect the general throttle for the actual call attempt.\n      }\n    }\n\n    // 2. General Throttling (based on last *attempt*)\n    // This ensures that even after the failure delay, we don't spam rapid calls.\n    if (throttleDelayMs > 0) {\n      const currentTimeForThrottle = Date.now(); // Get current time *after* potential failure delay\n      const timeSinceLastAttempt = currentTimeForThrottle - this.lastApiCallTimestamp;\n      if (timeSinceLastAttempt < throttleDelayMs) {\n        const generalDelayNeeded = throttleDelayMs - timeSinceLastAttempt;\n        logger.log('InventreeApiService', `General Throttling: Delaying by ${generalDelayNeeded}ms.`, { level: 'debug' });\n        await new Promise(resolve => setTimeout(resolve, generalDelayNeeded));\n      }\n    }\n    \n    this.lastApiCallTimestamp = Date.now(); // Update timestamp *before* making the actual call\n\n    try {\n      const response = await fetch(url, { ...options, headers });\n\n      if (!response.ok) {\n        let errorData;\n        try {\n          errorData = await response.json();\n        } catch (e) {\n          errorData = await response.text();\n        }\n        const errorMsg = `API request failed: ${response.status} ${response.statusText}`;\n        logger.error('InventreeApiService', errorMsg, { url, status: response.status, errorData });\n        this.lastApiFailureTimestamp = Date.now(); // Record failure timestamp\n        throw new Error(errorMsg); // Propagate error\n      }\n      \n      // Handle cases where response might be empty (e.g., 204 No Content for DELETE)\n      if (response.status === 204) {\n        this.lastApiFailureTimestamp = 0; // Reset on success\n        return null as T; \n      }\n      \n      const responseData = await response.json() as T;\n      this.lastApiFailureTimestamp = 0; // Reset on success\n      return responseData;\n\n    } catch (error) { // This catches fetch internal errors (network, CORS after preflight) and the re-thrown !response.ok error\n      logger.error('InventreeApiService', `Catch-all for ${url}. Setting failure timestamp. Error:`, error);\n      // Ensure lastApiFailureTimestamp is set for any error during the try block related to the request\n      this.lastApiFailureTimestamp = Date.now();\n      throw error; // Re-throw the error to be caught by the caller (thunks)\n    }\n  }\n\n  async getPart(partId: number): Promise<InventreeItem | null> {\n    logger.log('InventreeApiService', `Fetching part ${partId}...`);\n    try {\n      return await this.request<InventreeItem>(`part/${partId}/`);\n    } catch (error) {\n      logger.error('InventreeApiService', `Failed to get part ${partId}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Fetches multiple parts based on provided parameters.\n   * Example: getParts({ category: 5, limit: 10 })\n   * Example: getParts({ pk__in: [1, 2, 3] })\n   */\n  async getParts(params: Record<string, any> = {}): Promise<InventreeItem[]> {\n    logger.log('InventreeApiService', 'Fetching parts with params:', params);\n    try {\n      const queryParams = new URLSearchParams(params).toString();\n      return await this.request<InventreeItem[]>(`part/?${queryParams}`);\n    } catch (error) {\n      logger.error('InventreeApiService', 'Failed to get parts:', { params, error });\n      return []; // Return empty array on error, or rethrow if preferred\n    }\n  }\n\n  async adjustStock(partId: number, relativeAmount: number, locationId?: number, notes?: string): Promise<{ pk: number; newTotalStock: number | undefined } | null> {\n    logger.log('InventreeApiService', `Adjusting stock for part ${partId} by ${relativeAmount}. Location: ${locationId}, Notes: \"${notes}\"`);\n    try {\n      if (relativeAmount === 0) {\n        logger.log('InventreeApiService', `Relative amount is 0 for part ${partId}, no stock change needed. Fetching current stock.`);\n        // No operation needed, just return current stock\n      } else if (relativeAmount > 0) {\n        // --- Add Stock --- \n        const addResult = await this.addStockItem(partId, relativeAmount, locationId, notes);\n        if (!addResult) {\n          throw new Error('Failed to add stock item during positive adjustment.');\n        }\n        logger.log('InventreeApiService', `Added stock item PK: ${addResult.pk} for part ${partId}.`);\n      } else { \n        // --- Remove Stock --- \n        const amountToRemove = Math.abs(relativeAmount);\n        logger.log('InventreeApiService', `Attempting to remove ${amountToRemove} for part ${partId}.`);\n\n        // 1. Consolidate stock first to make removal simpler/more predictable\n        //    Consolidate to the target location if specified, otherwise let the function decide.\n        const consolidatedItem = await this.consolidateStockForPart(partId, locationId, notes || 'Consolidating before stock removal');\n        \n        // Check current stock *after* consolidation attempt\n        const currentStockItems = await this.getStockItemsForPart(partId, locationId);\n        const currentTotalStock = currentStockItems?.reduce((sum, item) => sum + parseFloat(item.quantity || '0'), 0) ?? 0;\n\n        if (!currentStockItems || currentStockItems.length === 0 || currentTotalStock < amountToRemove) {\n            logger.warn('InventreeApiService', `Cannot remove ${amountToRemove} for part ${partId}: Insufficient stock (${currentTotalStock}) available after consolidation attempt.`);\n             // Even if we can't remove, fetch final state\n        } else {\n            // We have enough stock. If consolidated, there should be one item.\n            // If not consolidated (e.g., multiple batches remained), remove from the first available.\n            const itemToRemoveFrom = currentStockItems[0]; // Assume first item after potential consolidation\n            \n            if (!itemToRemoveFrom) {\n                // This case should ideally not happen if currentTotalStock > 0\n                logger.error('InventreeApiService', `Logic error: Stock exists (${currentTotalStock}) but no stock item found after consolidation for part ${partId}.`);\n                throw new Error('Stock item not found after consolidation despite available quantity.');\n            }\n\n            logger.log('InventreeApiService', `Removing ${amountToRemove} from stock item PK ${itemToRemoveFrom.pk} for part ${partId}.`);\n            const removeResult = await this.removeStockItems([{ pk: itemToRemoveFrom.pk, quantity: amountToRemove }], notes || 'Stock removal');\n            if (!removeResult) {\n                 logger.error('InventreeApiService', `Stock removal API call failed for part ${partId}, item ${itemToRemoveFrom.pk}.`);\n                // Allow proceeding to fetch final state despite API error\n            }\n        }\n      }\n\n      // --- Final Step: Fetch updated part details --- \n      logger.log('InventreeApiService', `Fetching final part details for ${partId} after stock adjustment.`);\n      const updatedPart = await this.getPart(partId);\n      if (!updatedPart) {\n        logger.error('InventreeApiService', `Failed to fetch updated part details for part ${partId} after stock adjustment.`);\n        // Return null if the final part fetch fails, as we can't confirm the stock level\n        return null;\n      }\n\n      logger.log('InventreeApiService', `Stock adjustment process complete for part ${partId}. Final stock: ${updatedPart.in_stock}.`);\n      return { pk: partId, newTotalStock: updatedPart.in_stock };\n\n    } catch (error) {\n      logger.error('InventreeApiService', `Failed to adjust stock for part ${partId}:`, error);\n      // Attempt to fetch final part details even on error during adjustment steps\n       try {\n           const finalPartCheck = await this.getPart(partId);\n           if (finalPartCheck) {\n               logger.warn('InventreeApiService', `Returning last known stock (${finalPartCheck.in_stock}) for part ${partId} after adjustment error.`);\n               return { pk: partId, newTotalStock: finalPartCheck.in_stock };\n           }\n       } catch (finalFetchError) {\n            logger.error('InventreeApiService', `Failed to fetch final part details for ${partId} even after catching primary error:`, finalFetchError);\n       }\n      return null; // Return null if adjustment failed and final fetch also failed\n    }\n  }\n  \n  // Add other API methods as needed, e.g.,\n  // async getCategories(): Promise<any[]> { ... }\n  // async getStockLocations(): Promise<any[]> { ... }\n\n  async getPartParameters(partId: number): Promise<ParameterDetail[] | null> {\n    logger.log('InventreeApiService', `Fetching parameters for part ${partId}...`);\n    try {\n      // The API returns a list of PartParameter objects\n      return await this.request<ParameterDetail[]>(`part/parameter/?part=${partId}`);\n    } catch (error) {\n      logger.error('InventreeApiService', `Failed to get parameters for part ${partId}:`, error);\n      return null;\n    }\n  }\n\n  async updatePartParameter(parameterInstancePk: number, newValue: string): Promise<ParameterDetail | null> {\n    logger.log('InventreeApiService', `Updating parameter ${parameterInstancePk} to value: \"${newValue}\"...`);\n    try {\n      return await this.request<ParameterDetail>(`part/parameter/${parameterInstancePk}/`, {\n        method: 'PATCH',\n        body: JSON.stringify({ data: newValue }),\n      });\n    } catch (error) {\n      logger.error('InventreeApiService', `Failed to update parameter ${parameterInstancePk}:`, error);\n      return null;\n    }\n  }\n\n  // --- Robust Stock Adjustment Methods (Phase R3.4) ---\n\n  async getStockItemsForPart(partId: number, locationId?: number): Promise<StockItem[] | null> {\n    logger.log('InventreeApiService', `Fetching stock items for part ${partId}${locationId ? ` at location ${locationId}` : ''}...`);\n    try {\n      const params = new URLSearchParams({ part: String(partId) });\n      if (locationId !== undefined) {\n        params.set('location', String(locationId));\n      }\n      // Use the internal request helper\n      return await this.request<StockItem[]>(`stock/?${params.toString()}`);\n    } catch (error) {\n      logger.error('InventreeApiService', `Failed to get stock items for part ${partId}:`, error);\n      return null;\n    }\n  }\n\n  async addStockItem(partId: number, quantity: number, locationId?: number, notes?: string): Promise<StockItem | null> {\n    logger.log('InventreeApiService', `Adding stock for part ${partId}: quantity ${quantity}, location ${locationId}, notes: \"${notes}\"`);\n    try {\n      const payload: any = {\n        part: partId,\n        quantity: String(quantity), // Ensure quantity is sent as string\n        status: 10, // Default to OK status = 10 in InvenTree\n      };\n      if (locationId !== undefined) {\n        payload.location = locationId;\n      }\n      if (notes) {\n        payload.notes = notes;\n      }\n      // Use the internal request helper\n      return await this.request<StockItem>('stock/', {\n        method: 'POST',\n        body: JSON.stringify(payload),\n      });\n    } catch (error) {\n      logger.error('InventreeApiService', `Failed to add stock for part ${partId}:`, error);\n      return null;\n    }\n  }\n\n  async removeStockItems(stockItems: Array<{ pk: number; quantity: number }>, notes?: string): Promise<any | null> {\n    logger.log('InventreeApiService', `Removing stock for items: ${stockItems.map(si => `PK: ${si.pk}, Qty: ${si.quantity}`).join('; ')}. Notes: \"${notes}\"`);\n    if (stockItems.length === 0) {\n        logger.warn('InventreeApiService', 'removeStockItems called with empty stockItems array.');\n        return { success: true, message: 'No items to remove.' }; // Indicate success as nothing needed doing\n    }\n    try {\n      const payload: any = {\n        // Ensure quantity is stringified\n        items: stockItems.map(item => ({ pk: item.pk, quantity: String(item.quantity) })),\n      };\n      if (notes) {\n        payload.notes = notes;\n      }\n      // Use the internal request helper\n      // Endpoint is /api/stock/remove/\n      return await this.request<any>('stock/remove/', {\n        method: 'POST',\n        body: JSON.stringify(payload),\n      });\n    } catch (error) {\n      logger.error('InventreeApiService', 'Failed to remove stock items:', { stockItems, error });\n      return null;\n    }\n  }\n\n  async deleteStockItem(stockItemPk: number): Promise<void | null> {\n    logger.log('InventreeApiService', `Deleting stock item PK ${stockItemPk}...`);\n    try {\n      // Use the internal request helper, endpoint is /api/stock/{pk}/\n      // DELETE requests usually don't have a body and often return 204 No Content on success.\n      await this.request<void>(`stock/${stockItemPk}/`, {\n        method: 'DELETE',\n      });\n      return; // Explicitly return void on success (or handle 204 specifically in request helper)\n    } catch (error) {\n      logger.error('InventreeApiService', `Failed to delete stock item ${stockItemPk}:`, error);\n      return null; // Indicate failure\n    }\n  }\n\n  // Placeholder for consolidateStockForPart\n  async consolidateStockForPart(partId: number, targetLocationId?: number, notes?: string): Promise<StockItem | null> {\n    logger.log('InventreeApiService', `Consolidating stock for part ${partId}${targetLocationId !== undefined ? ` to location ${targetLocationId}` : ''}...`);\n    try {\n      // 1. Get all existing stock items for the part\n      const existingStockItems = await this.getStockItemsForPart(partId);\n      if (!existingStockItems) {\n          logger.error('InventreeApiService', `Failed to fetch existing stock items for part ${partId} during consolidation.`);\n          return null; // Error fetching items\n      }\n      if (existingStockItems.length === 0) {\n        logger.log('InventreeApiService', `No stock items found for part ${partId} to consolidate.`);\n        // Nothing to consolidate, return null as no *new* consolidated item was created.\n        return null;\n      }\n\n      // 2. Calculate total quantity\n      let totalQuantity = 0;\n      existingStockItems.forEach(item => {\n        const itemQuantity = parseFloat(item.quantity); // Handle string quantity\n        if (!isNaN(itemQuantity)) {\n            totalQuantity += itemQuantity;\n        } else {\n            logger.warn('InventreeApiService', `Invalid quantity found for stock item ${item.pk}: ${item.quantity}. Skipping in total calculation.`);\n        }\n      });\n\n      const consolidatedNotes = notes || `Consolidated from ${existingStockItems.length} item(s).`;\n      const itemPksToDelete = existingStockItems.map(item => item.pk);\n\n      // Determine the location for the new consolidated stock item\n      // Priority: targetLocationId > first item's location > undefined (error)\n      let determinedLocationId: number | undefined | null = targetLocationId;\n      if (determinedLocationId === undefined) {\n          determinedLocationId = existingStockItems[0]?.location; // Use optional chaining\n      }\n      // Convert null location (meaning top-level/no specific location) to undefined for addStockItem if necessary,\n      // but keep it as number if it's a valid location PK.\n      const newLocationId = determinedLocationId === null ? undefined : determinedLocationId;\n\n      if (newLocationId === undefined && totalQuantity > 0) { // Only require location if adding stock\n          // Attempt to find *any* location from the items if target wasn't specified and first item had no location\n          const firstLocatedItem = existingStockItems.find(item => item.location !== null && item.location !== undefined);\n          if (firstLocatedItem) {\n               logger.warn('InventreeApiService', `No targetLocationId provided and first item had no location. Using location ${firstLocatedItem.location} from item ${firstLocatedItem.pk}.`);\n               determinedLocationId = firstLocatedItem.location;\n               // newLocationId = determinedLocationId; // Re-assign - done above\n          } else {\n               logger.error('InventreeApiService', `Cannot determine location for consolidated stock for part ${partId}. Provide targetLocationId or ensure at least one existing item has a location.`);\n               return null; // Fail if no location can be determined and stock needs to be added\n          }\n      }\n\n      // 3. Create ONE new stock item with the total quantity (if > 0)\n      let newStockItem: StockItem | null = null;\n      if (totalQuantity > 0) {\n          newStockItem = await this.addStockItem(partId, totalQuantity, newLocationId, consolidatedNotes);\n          if (!newStockItem) {\n            logger.error('InventreeApiService', `Failed to create new consolidated stock item for part ${partId}. Aborting consolidation.`);\n            // Don't delete old items if we couldn't create the new one\n            return null;\n          }\n          logger.log('InventreeApiService', `Created new consolidated stock item PK: ${newStockItem.pk}`);\n          // Ensure we don't delete the item we just created if it somehow shared a PK (highly unlikely)\n          const indexOfNew = itemPksToDelete.indexOf(newStockItem.pk);\n          if (indexOfNew > -1) {\n              itemPksToDelete.splice(indexOfNew, 1);\n          }\n      } else {\n           logger.log('InventreeApiService', `Total quantity is 0 for part ${partId}. Proceeding to delete old items.`);\n      }\n\n      // 4. Delete all the old stock items\n      logger.log('InventreeApiService', `Deleting ${itemPksToDelete.length} old stock items for part ${partId}: [${itemPksToDelete.join(', ')}]`);\n      let deleteErrors = 0;\n      for (const pk of itemPksToDelete) {\n        const deleteResult = await this.deleteStockItem(pk);\n        if (deleteResult === null) { // deleteStockItem returns null on failure\n            logger.warn('InventreeApiService', `Failed to delete old stock item ${pk} during consolidation.`);\n            deleteErrors++;\n            // Continue deleting others even if one fails\n        }\n      }\n\n      if (deleteErrors > 0) {\n           logger.warn('InventreeApiService', `Consolidation completed for part ${partId}, but ${deleteErrors} old stock items failed to delete.`);\n      }\n\n      logger.log('InventreeApiService', `Successfully consolidated stock for part ${partId}. Returning ${newStockItem ? `new item PK ${newStockItem.pk}` : 'null (zero stock)'}.`);\n      return newStockItem; // Return the new item (or null if total quantity was 0)\n\n    } catch (error) {\n      logger.error('InventreeApiService', `Failed to consolidate stock for part ${partId}:`, error);\n      return null;\n    }\n  }\n}\n\n// Export a singleton instance\nexport const inventreeApiService = new InventreeApiService(); \n","import { createSlice, createAsyncThunk, PayloadAction, ActionReducerMapBuilder } from '@reduxjs/toolkit';\nimport { InventreeItem, WLEDConfig, EnhancedStockItemEventData, ParameterDetail } from '../../types';\nimport { RootState } from '../index';\nimport { WLEDService } from '../../services/wled-service';\nimport { HomeAssistant } from 'custom-card-helpers';\nimport { createSelector } from 'reselect';\nimport { Logger } from '../../utils/logger';\nimport { inventreeApiService } from '../../services/inventree-api-service';\n\nconst logger = Logger.getInstance();\n\ninterface PartsState {\n  partsById: Record<number, InventreeItem>;\n  partsByEntity: Record<string, number[]>;\n  loading: boolean;\n  error: string | null;\n  locatingPartId: number | null;\n  adjustingStockPartId: number | null;\n  adjustmentError: string | null;\n}\n\nconst initialState: PartsState = {\n  partsById: {},\n  partsByEntity: {},\n  loading: false,\n  error: null,\n  locatingPartId: null,\n  adjustingStockPartId: null,\n  adjustmentError: null,\n};\n\n// Async thunk for fetching a single part's details\nexport const fetchPartDetails = createAsyncThunk<\n  InventreeItem, // Return type\n  number, // Argument type (partId)\n  { rejectValue: string } // Thunk config\n>(\n  'parts/fetchPartDetails',\n  async (partId, { rejectWithValue, getState }) => {\n    logger.info('partsSlice', `Fetching details for part ${partId}...`);\n    try {\n      const { api } = (getState() as RootState); // Access api state for URL and key\n      if (!api.directApiConfig?.url || !api.directApiConfig.apiKey) {\n        logger.warn('partsSlice', 'Direct API URL or API Key not configured. Cannot fetch part details.');\n        return rejectWithValue('Direct API not configured.');\n      }\n      // Temporarily use the placeholder service\n      \n      const partData = await inventreeApiService.getPart(partId);\n\n      if (!partData) {\n        logger.warn('partsSlice', `No data returned for part ${partId} from API.`);\n        return rejectWithValue(`Part ${partId} not found or API error.`);\n      }\n      logger.log('partsSlice', `Successfully fetched part details for ${partId}`, partData);\n      return partData;\n    } catch (error: any) {\n      logger.error('partsSlice', `Error fetching part details for ${partId}:`, error);\n      return rejectWithValue(error.message || `Failed to fetch part ${partId}`);\n    }\n  }\n);\n\n// Async thunk for locating a part (e.g., with WLED)\nexport const locatePartById = createAsyncThunk<\n  void, // Return type (void as it's a side effect)\n  number, // Argument type (partId)\n  { state: RootState, rejectValue: string } // Thunk config\n>(\n  'parts/locatePartById',\n  async (partId, { getState, dispatch, rejectWithValue }) => {\n    const state = getState();\n    const part = state.parts.partsById[partId];\n    // Get WLED config from the resolvedCardConfig in configSlice\n    const wledConfigFromState = state.config.resolvedConfig?.services?.wled;\n\n    if (!part) {\n      logger.warn('partsSlice', `Part with ID ${partId} not found for location.`);\n      return rejectWithValue(`Part with ID ${partId} not found.`);\n    }\n    // Use the wledConfigFromState directly for checks and passing to the service\n    if (!wledConfigFromState || !wledConfigFromState.enabled || !wledConfigFromState.entity_id || !wledConfigFromState.parameter_name) {\n      logger.warn('partsSlice', `WLED service not configured or enabled for part ${partId}.`);\n      return rejectWithValue('WLED service not configured or enabled.');\n    }\n\n    // Correct WLEDService instantiation\n    const wledService = new WLEDService(state.hass.hass!); \n    // Explicitly type 'p' using ParameterDetail from '../../types'\n    const locationParameter = part.parameters?.find((p: ParameterDetail) => p.template_detail?.name === wledConfigFromState.parameter_name);\n\n    if (!locationParameter || !locationParameter.data) {\n      logger.warn('partsSlice', `Location parameter '${wledConfigFromState.parameter_name}' not found or empty for part ${partId}.`);\n      return rejectWithValue(`Location parameter not found for part ${partId}.`);\n    }\n\n    try {\n      // Call the correct method 'locatePart' and pass the part and WLED config from state\n      await wledService.locatePart(part, wledConfigFromState);\n      logger.log('partsSlice', `Successfully triggered WLED location for part ${partId} at segment ${locationParameter.data}.`);\n      // Optionally dispatch an action to clear locatingPartId after a delay\n      setTimeout(() => {\n        dispatch(partsSlice.actions.setLocatingPartId(null));\n      }, 5000); // Clear after 5 seconds\n    } catch (error: any) {\n      logger.error('partsSlice', `Error locating part ${partId} via WLED:`, error);\n      return rejectWithValue(error.message || `Failed to locate part ${partId}.`);\n    }\n  }\n);\n\n// Async thunk for adjusting part stock\nexport const adjustPartStock = createAsyncThunk<\n  { partId: number, newTotalStock: number | undefined }, // Return type matches fulfilled reducer\n  { partId: number, amount: number, locationId?: number, notes?: string, hass?: HomeAssistant }, // Argument type\n  { state: RootState, rejectValue: string } // Thunk config\n>(\n  'parts/adjustPartStock',\n  // Remove getState from args if apiState check is removed\n  async ({ partId, amount, locationId, notes }, { rejectWithValue }) => { \n    logger.info('partsSlice', `Adjusting stock for part ${partId} by ${amount}. Location: ${locationId}, Notes: \\\"${notes}\\\"`);\n    \n    // REMOVED: API state check (service handles config)\n    // const apiState = (getState() as RootState).api;\n    // if (!apiState.url || !apiState.apiKey) { ... }\n\n    try {\n      // REMOVED: setConfig call\n      // inventreeApiService.setConfig(apiState.url, apiState.apiKey);\n      \n      // Call the service method (which now gets config from store)\n      const adjustmentResult = await inventreeApiService.adjustStock(partId, amount, locationId, notes);\n\n      // Check the result format from the service\n      if (!adjustmentResult || typeof adjustmentResult.newTotalStock !== 'number') { // Check type explicitly\n        logger.error('partsSlice', `Stock adjustment for part ${partId} failed or did not return expected result format.`, adjustmentResult);\n        // Provide more specific error based on result\n        const reason = !adjustmentResult ? 'API call failed' : 'API response missing newTotalStock';\n        return rejectWithValue(`Stock adjustment failed: ${reason}.`);\n      }\n\n      logger.log('partsSlice', `Stock for part ${partId} adjusted successfully via API. New total stock: ${adjustmentResult.newTotalStock}.`);\n      \n      // Ensure returned object matches the thunk's fulfilled payload type\n      return { partId: adjustmentResult.pk, newTotalStock: adjustmentResult.newTotalStock }; \n    } catch (error: any) {\n      logger.error('partsSlice', `Error calling inventreeApiService.adjustStock for part ${partId}:`, error);\n      return rejectWithValue(error.message || `Failed to adjust stock for part ${partId}.`);\n    }\n  }\n);\n\nconst partsSlice = createSlice({\n  name: 'parts',\n  initialState,\n  reducers: {\n    setParts(state: PartsState, action: PayloadAction<{ entityId: string, parts: InventreeItem[] }>) {\n      const { entityId, parts } = action.payload;\n      const partIds: number[] = [];\n      parts.forEach(part => {\n        state.partsById[part.pk] = {\n          ...state.partsById[part.pk], // Preserve existing state if any (e.g., client-side flags)\n          ...part, // Overwrite with new data\n        };\n        partIds.push(part.pk);\n      });\n      state.partsByEntity[entityId] = partIds;\n      logger.log('partsSlice', `Set ${parts.length} parts for entity '${entityId}'. Part IDs: [${partIds.join(', ')}]`, { level: 'debug' });\n    },\n    updatePart(state: PartsState, action: PayloadAction<InventreeItem>) {\n      const part = action.payload;\n      if (state.partsById[part.pk]) {\n        state.partsById[part.pk] = {\n          ...state.partsById[part.pk],\n          ...part,\n        };\n        logger.log('partsSlice', `Updated part ${part.pk} in partsById.`, { level: 'debug' });\n      } else {\n        // If part doesn't exist, add it (e.g., from a direct API fetch not tied to an entity)\n        state.partsById[part.pk] = part;\n        logger.log('partsSlice', `Added new part ${part.pk} to partsById.`, { level: 'debug' });\n      }\n    },\n    updatePartStock(state: PartsState, action: PayloadAction<{ partId: number, newStock: number }>) {\n        const { partId, newStock } = action.payload;\n        const partToUpdate = state.partsById[partId];\n        if (partToUpdate) {\n            partToUpdate.in_stock = newStock;\n            logger.log('partsSlice', `Updated stock for part ${partId} to ${newStock} in partsById.`, { level: 'debug' });\n        } else {\n             logger.warn('partsSlice', `Attempted to update stock for non-existent partId: ${partId}`);\n        }\n    },\n    clearParts(state: PartsState, action: PayloadAction<string>) {\n      const entityId = action.payload;\n       logger.log('partsSlice', `Clearing parts mapping for entity '${entityId}'.`, { level: 'debug' });\n      delete state.partsByEntity[entityId];\n    },\n    registerEntity(state: PartsState, action: PayloadAction<string>) {\n      const entityId = action.payload;\n      if (!(entityId in state.partsByEntity)) {\n        state.partsByEntity[entityId] = [];\n         logger.log('partsSlice', `Registered entity '${entityId}' in partsByEntity.`, { level: 'debug' });\n      }\n    },\n    partStockUpdateFromWebSocket(state: PartsState, action: PayloadAction<Partial<EnhancedStockItemEventData> & { partId: number }>) {\n      const { partId, quantity, ...otherStockData } = action.payload;\n      const part = state.partsById[partId];\n      if (part) {\n        logger.log('partsSlice', `Processing WebSocket stock update for part ${partId}. Current stock: ${part.in_stock}, New quantity from WS: ${quantity}`);\n        if (quantity !== undefined) {\n          part.in_stock = parseFloat(quantity as any); // Ensure it's a number\n        }\n        // Optionally update other fields from otherStockData if needed\n        // For example: part.last_updated = otherStockData.last_updated;\n        logger.log('partsSlice', `Part ${partId} stock updated to ${part.in_stock} via WebSocket.`, { level: 'debug', otherStockData });\n      } else {\n        logger.warn('partsSlice', `Received WebSocket stock update for unknown part ${partId}. Triggering fetch.`);\n        // If part isn't in store, the fetchPartDetails thunk (dispatched by middleware) should add it.\n      }\n    },\n    setLocatingPartId(state: PartsState, action: PayloadAction<number | null>) {\n      state.locatingPartId = action.payload;\n    },\n  },\n  extraReducers: (builder: ActionReducerMapBuilder<PartsState>) => {\n    builder\n      .addCase(locatePartById.pending, (state: PartsState, action) => {\n        state.locatingPartId = action.meta.arg; // partId is the argument\n      })\n      .addCase(locatePartById.rejected, (state: PartsState, action) => {\n        if (state.locatingPartId === action.meta.arg) {\n          state.locatingPartId = null;\n        }\n        // Optionally handle error display here if needed\n      })\n      .addCase(locatePartById.fulfilled, (state: PartsState, action) => {\n        // The timeout to clear locatingPartId is handled in the thunk itself.\n        // No state change needed here for fulfilled, unless an error occurred before timeout.\n      })\n      .addCase(adjustPartStock.pending, (state: PartsState, action) => {\n        const { partId, amount } = action.meta.arg;\n        state.adjustingStockPartId = partId;\n        state.adjustmentError = null;\n        // Optimistically update stock\n        const partToUpdate = state.partsById[partId];\n        if (partToUpdate) {\n           const originalStock = partToUpdate.in_stock;\n           partToUpdate.in_stock = (partToUpdate.in_stock ?? 0) + amount;\n            logger.log('partsSlice', `Optimistically updated stock for part ${partId} from ${originalStock} to ${partToUpdate.in_stock}`, { level: 'debug' });\n        } else {\n             logger.warn('partsSlice', `Cannot optimistically update stock for partId ${partId}: Part not found.`);\n        }\n      })\n      .addCase(adjustPartStock.fulfilled, (state: PartsState, action) => {\n        const { partId, newTotalStock } = action.payload;\n        const part = state.partsById[partId];\n        if (part) {\n          part.in_stock = newTotalStock; // Ensure final stock is accurate from API response\n        }\n        if (state.adjustingStockPartId === partId) {\n          state.adjustingStockPartId = null;\n        }\n        state.adjustmentError = null;\n      })\n      .addCase(adjustPartStock.rejected, (state: PartsState, action) => {\n        const rejectedPartId = action.meta.arg.partId;\n        const originalArgs = action.meta.arg;\n\n        state.adjustmentError = action.payload as string || action.error.message || 'Failed to adjust stock';\n        logger.error('partsSlice', `Stock adjustment failed for part ${rejectedPartId}: ${state.adjustmentError}`);\n        \n        const partToRevert = state.partsById[rejectedPartId];\n        if (partToRevert && typeof originalArgs.amount === 'number') {\n             partToRevert.in_stock = (partToRevert.in_stock ?? 0) - originalArgs.amount; \n             logger.warn('partsSlice', `Reverted optimistic stock update for part ${rejectedPartId}. New reverted stock: ${partToRevert.in_stock}`);\n        }\n         if (state.adjustingStockPartId === rejectedPartId) {\n           state.adjustingStockPartId = null;\n         }\n      })\n      .addCase(fetchPartDetails.pending, (state: PartsState, action) => {\n        const partId = action.meta.arg;\n        logger.info('partsSlice', `Fetching details for part ${partId} (pending)...`);\n        state.loading = true; // General loading, or use per-part loading:\n        // if (state.partsById[partId]) state.partsById[partId].isLoadingDetails = true;\n      })\n      .addCase(fetchPartDetails.fulfilled, (state: PartsState, action: PayloadAction<InventreeItem>) => {\n        const fetchedPart = action.payload;\n        logger.info('partsSlice', `Successfully fetched details for part ${fetchedPart.pk}. Updating state.`);\n        state.partsById[fetchedPart.pk] = {\n          ...state.partsById[fetchedPart.pk],\n          ...fetchedPart,\n        };\n        state.loading = false;\n      })\n      .addCase(fetchPartDetails.rejected, (state: PartsState, action) => {\n        const partId = action.meta.arg;\n        logger.error('partsSlice', `Failed to fetch details for part ${partId}: ${action.payload || action.error.message}`);\n        state.loading = false;\n        state.error = action.payload as string || action.error.message || `Failed to fetch details for part ${partId}`;\n      });\n  },\n});\n\nexport const {\n  setParts,\n  updatePart,\n  updatePartStock,\n  clearParts,\n  registerEntity,\n  partStockUpdateFromWebSocket,\n  setLocatingPartId\n} = partsSlice.actions;\n\nexport default partsSlice.reducer;\n\n// --- Selectors ---\n\nexport const selectPartsByEntityMapping = (state: RootState): Record<string, number[]> => state.parts.partsByEntity;\nexport const selectPartsById = (state: RootState): Record<number, InventreeItem> => state.parts.partsById;\n\nexport const selectAllPartIds = createSelector(\n    [selectPartsById],\n    (partsById): number[] => Object.keys(partsById).map(Number)\n);\n\nexport const selectAllParts = createSelector(\n    [selectPartsById],\n    (partsById): InventreeItem[] => Object.values(partsById)\n);\n\nexport const selectPartsForEntities = createSelector(\n  [selectPartsByEntityMapping, selectPartsById, (_: RootState, entityIds: string[]) => entityIds],\n  (partsByEntity, partsById, entityIds): InventreeItem[] => {\n    const relevantPartIds = new Set<number>();\n    entityIds.forEach(entityId => {\n      const partIds = partsByEntity[entityId];\n      if (partIds) {\n        partIds.forEach((id: number) => relevantPartIds.add(id));\n      }\n    });\n\n    const result: InventreeItem[] = [];\n    relevantPartIds.forEach(partId => {\n      const part = partsById[partId];\n      if (part) {\n        result.push(part);\n      }\n    });\n    return result;\n  }\n);\n\nexport const selectPartsByEntityId = createSelector(\n  [selectPartsById, selectPartsByEntityMapping, (_: RootState, entityId: string) => entityId],\n  (partsById, partsByEntity, entityId): InventreeItem[] => {\n    const partIds = partsByEntity[entityId] ?? [];\n    return partIds.map((id: number) => partsById[id]).filter((part?: InventreeItem): part is InventreeItem => !!part);\n  }\n);\n\nexport const selectPartById = createSelector(\n  [(state: RootState) => state.parts.partsById, (_: RootState, partId: number | null | undefined) => partId],\n  (partsById, partId) => (partId !== null && partId !== undefined ? partsById[partId] : undefined)\n);\n\nexport const selectPartsLoading = (state: RootState): boolean => state.parts.loading;\nexport const selectPartsError = (state: RootState): string | null => state.parts.error;\n\nexport const selectLocatingPartId = (state: RootState): number | null => state.parts.locatingPartId;\nexport const selectAdjustingStockPartId = (state: RootState): number | null => state.parts.adjustingStockPartId;\nexport const selectAdjustmentError = (state: RootState): string | null => state.parts.adjustmentError;\n\nexport const selectFilteredParts = createSelector(\n    [selectAllParts],\n    (parts: InventreeItem[]): InventreeItem[] => {\n        return parts;\n    }\n);\n\nexport const selectPartsByEntity = createSelector(\n  [\n    (state: RootState) => state.parts.partsById,\n    (state: RootState) => state.parts.partsByEntity,\n    (_: RootState, entityId: string | null | undefined) => entityId,\n  ],\n  (partsById, partsByEntity, entityId): InventreeItem[] => {\n    if (!entityId) {\n      return [];\n    }\n    const currentPartIds = partsByEntity[entityId];\n    if (!currentPartIds) {\n        return [];\n    }\n    return currentPartIds.map((id: number) => partsById[id]).filter((part?: InventreeItem): part is InventreeItem => part !== undefined);\n  }\n);\n\nexport const selectCombinedParts = createSelector(\n  [\n    (state: RootState) => state.parts.partsById,\n    (state: RootState) => state.parts.partsByEntity,\n    (\n      _: RootState,\n      primaryEntityId: string | null | undefined,\n      additionalEntityIds: string[] = []\n    ) => ({\n      primaryEntityId,\n      additionalEntityIds,\n    }),\n  ],\n  (partsById, partsByEntity, { primaryEntityId, additionalEntityIds }): InventreeItem[] => {\n    const combinedPartIds = new Set<number>();\n\n    if (primaryEntityId) {\n        const primaryPartIds = partsByEntity[primaryEntityId];\n        if (primaryPartIds) {\n            primaryPartIds.forEach((id: number) => combinedPartIds.add(id));\n        }\n    }\n\n    additionalEntityIds.forEach(entityId => {\n      const additionalPartIds = partsByEntity[entityId];\n      if (additionalPartIds) {\n        additionalPartIds.forEach((id: number) => combinedPartIds.add(id));\n      }\n    });\n\n    return Array.from(combinedPartIds).map((id: number) => partsById[id]).filter((part?: InventreeItem): part is InventreeItem => part !== undefined);\n  }\n); ","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../index';\nimport { Logger } from '../../utils/logger';\n\nconst logger = Logger.getInstance();\n\ninterface ApiState {\n  url: string | null;\n  apiKey: string | null;\n  initialized: boolean;\n  error: string | null;\n  throttleDelayMs: number;\n  cacheLifetimeMs: number;\n  failedRequestRetryDelayMs: number;\n}\n\nconst initialState: ApiState = {\n  url: null,\n  apiKey: null,\n  initialized: false,\n  error: null,\n  throttleDelayMs: 200,\n  cacheLifetimeMs: 60000,\n  failedRequestRetryDelayMs: 30000,\n};\n\nconst apiSlice = createSlice({\n  name: 'api',\n  initialState,\n  reducers: {\n    setApiConfig(state: ApiState, action: PayloadAction<{ \n      url: string; \n      apiKey: string; \n      throttleDelayMs?: number; \n      cacheLifetime?: number;\n      failedRequestRetryDelaySeconds?: number;\n    }>) {\n      state.url = action.payload.url;\n      state.apiKey = action.payload.apiKey;\n      if (typeof action.payload.throttleDelayMs === 'number' && action.payload.throttleDelayMs >= 0) {\n        state.throttleDelayMs = action.payload.throttleDelayMs;\n      }\n      if (typeof action.payload.cacheLifetime === 'number' && action.payload.cacheLifetime >= 0) {\n        state.cacheLifetimeMs = action.payload.cacheLifetime * 1000;\n      } else if (action.payload.cacheLifetime === undefined) {\n        // If not provided, keep the existing or default cacheLifetimeMs\n      } else {\n        state.cacheLifetimeMs = initialState.cacheLifetimeMs;\n        logger.warn('apiSlice', 'Invalid cacheLifetime provided, reset to default.');\n      }\n      if (typeof action.payload.failedRequestRetryDelaySeconds === 'number' && action.payload.failedRequestRetryDelaySeconds >= 0) {\n        state.failedRequestRetryDelayMs = action.payload.failedRequestRetryDelaySeconds * 1000;\n      } else if (action.payload.failedRequestRetryDelaySeconds === undefined) {\n        // If not provided, keep existing or default\n      } else {\n        state.failedRequestRetryDelayMs = initialState.failedRequestRetryDelayMs;\n        logger.warn('apiSlice', 'Invalid failedRequestRetryDelaySeconds provided, reset to default.');\n      }\n      state.error = null;\n      logger.log('apiSlice', 'API config set.', { data: { \n        url: state.url, \n        throttle: state.throttleDelayMs, \n        cacheLifetime: state.cacheLifetimeMs,\n        failedRetryDelay: state.failedRequestRetryDelayMs\n      }});\n    },\n    apiInitializationSuccess(state: ApiState) {\n      if (state.url && state.apiKey) {\n        state.initialized = true;\n        state.error = null;\n        logger.log('apiSlice', 'API marked as initialized successfully.');\n      } else {\n         logger.warn('apiSlice', 'Tried to mark API as initialized, but URL or API Key is missing.');\n         state.error = 'Initialization attempted without full config.';\n      }\n    },\n    apiInitializationError(state: ApiState, action: PayloadAction<string>) {\n      state.initialized = false;\n      state.error = action.payload;\n      logger.error('apiSlice', `API initialization failed: ${action.payload}`);\n    },\n    clearApiConfig(state: ApiState) {\n        state.url = null;\n        state.apiKey = null;\n        state.initialized = false;\n        state.error = null;\n        state.throttleDelayMs = initialState.throttleDelayMs;\n        state.cacheLifetimeMs = initialState.cacheLifetimeMs;\n        state.failedRequestRetryDelayMs = initialState.failedRequestRetryDelayMs;\n        logger.log('apiSlice', 'API config cleared.');\n    }\n  },\n});\n\nexport const { setApiConfig, apiInitializationSuccess, apiInitializationError, clearApiConfig } = apiSlice.actions;\n\n// Selectors\nexport const selectApiUrl = (state: RootState): string | null => state.api.url;\nexport const selectApiKey = (state: RootState): string | null => state.api.apiKey;\nexport const selectApiInitialized = (state: RootState): boolean => state.api.initialized;\nexport const selectApiError = (state: RootState): string | null => state.api.error;\nexport const selectApiThrottleDelayMs = (state: RootState): number => state.api.throttleDelayMs;\nexport const selectApiCacheLifetimeMs = (state: RootState): number => state.api.cacheLifetimeMs;\nexport const selectApiFailedRequestRetryDelayMs = (state: RootState): number => state.api.failedRequestRetryDelayMs;\nexport const selectApiConfig = (state: RootState): ApiState => ({\n    url: state.api.url,\n    apiKey: state.api.apiKey,\n    initialized: state.api.initialized,\n    error: state.api.error,\n    throttleDelayMs: state.api.throttleDelayMs,\n    cacheLifetimeMs: state.api.cacheLifetimeMs,\n    failedRequestRetryDelayMs: state.api.failedRequestRetryDelayMs,\n});\n\nexport default apiSlice.reducer; ","// Placeholder for Parameter Thunks\n// This file will contain asynchronous logic related to parameters,\n// such as fetching data from the API or performing complex updates.\n\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { RootState } from '../index';\nimport { ParameterDetail, InventreeCardConfig } from '../../types';\nimport { selectApiUrl, selectApiKey, selectApiInitialized } from '../slices/apiSlice'; // Import API selectors\nimport { Logger } from '../../utils/logger';\nimport { selectParameterLoadingStatus } from '../slices/parametersSlice'; // Import the selector\nimport { inventreeApiService } from '../../services/inventree-api-service'; // Import the refactored service\n\n// Import necessary actions and types from parametersSlice\nimport { \n    setDefinedConditions, \n    setProcessedConditions,\n    ProcessedCondition,\n    setConditionalPartEffectsBatch,\n    clearConditionalPartEffects,\n    ConditionalPartEffect\n} from '../slices/parametersSlice';\nimport { ParameterCondition, ParameterOperator, ParameterActionType, InventreeItem } from '../../types';\n// Remove the placeholder/import for selectPrimaryPartId\n// const selectPrimaryPartId = (state: RootState): number | null => { ... };\n\nconst logger = Logger.getInstance();\n\n// Thunk to initialize conditions and fetch required parameters\nexport const initializeConditionsAndParameters = createAsyncThunk<\n  void, // Return type\n  ParameterCondition[], // Argument type: raw conditions from config\n  { state: RootState; rejectValue: string }\n>(\n  'parameters/initializeConditions',\n  async (rawConditions, { dispatch, getState, rejectWithValue }) => {\n    logger.log('ParameterThunk', 'Initializing conditions and parameters...', { rawConditionsCount: rawConditions.length });\n\n    if (!rawConditions || rawConditions.length === 0) { // Ensure to handle empty array too\n      logger.log('ParameterThunk', 'No raw conditions provided. Clearing processed conditions.');\n      dispatch(setDefinedConditions([]));\n      dispatch(setProcessedConditions([]));\n      return;\n    }\n\n    dispatch(setDefinedConditions(rawConditions));\n\n    const state = getState();\n    // Remove primaryPartId, as it must come from the condition string\n    const processedConditions: ProcessedCondition[] = [];\n    const partIdsToFetch = new Set<number>();\n\n    for (let i = 0; i < rawConditions.length; i++) {\n      const rawCond = rawConditions[i];\n      let partId: number | null = null;\n      let parameterName = '';\n\n      const paramString = rawCond.parameter;\n      // Expect format: \"part:<ID>:<PARAMETER_NAME>\"\n      if (paramString && paramString.startsWith('part:')) { // Add null check for paramString\n        const parts = paramString.split(':');\n        if (parts.length === 3) {\n          const parsedPartId = parseInt(parts[1], 10);\n          if (!isNaN(parsedPartId)) {\n            partId = parsedPartId;\n            parameterName = parts[2];\n          } else {\n            logger.warn('ParameterThunk', `Invalid partId in condition parameter string: ${paramString}` , { rawCond });\n            continue; // Skip this condition\n          }\n        } else {\n          logger.warn('ParameterThunk', `Malformed condition parameter string (expected part:id:name): ${paramString}` , { rawCond });\n          continue; // Skip this condition\n        }\n      } else {\n        logger.warn('ParameterThunk', `Condition parameter string does not follow part:id:name format: ${paramString}` , { rawCond });\n        continue; // Skip this condition if format is not met\n      }\n\n      // partId and parameterName must be resolved at this point from the string\n      if (partId !== null && parameterName) { \n        if (rawCond.operator && rawCond.action && rawCond.action_value !== undefined) {\n            processedConditions.push({\n                id: `cond-${i}-${Date.now()}`,\n                rawConditionString: JSON.stringify(rawCond),\n                sourceParameterString: rawCond.parameter,\n                partId: partId, // partId is now guaranteed to be a number here\n                parameterName: parameterName,\n                operator: rawCond.operator as ParameterOperator,\n                valueToCompare: rawCond.value,\n                action: rawCond.action as ParameterActionType,\n                actionValue: rawCond.action_value,\n                targetPartIds: rawCond.targetPartIds,\n            });\n\n            // Check if parameters for this partId need fetching\n            const currentStatus = selectParameterLoadingStatus(state, partId);\n            // Check if the specific parameter value exists in the store for this part\n            // const parameterValueExists = !!state.parameters.parameterValues[partId]?.[parameterName]; // Commented out as new logic is simpler\n\n            // Only fetch if truly idle. If failed, it requires a manual refresh or different trigger.\n            // If loading, let the current fetch complete.\n            if (currentStatus === 'idle') {\n                partIdsToFetch.add(partId);\n            } else if (currentStatus === 'failed') {\n                logger.warn('ParameterThunk', `Parameters for part ${partId} previously failed to load. Skipping automatic refetch in this cycle. Part: ${partId}, ParamName: ${parameterName}`);\n            } else if (currentStatus === 'loading') {\n                logger.log('ParameterThunk', `Parameters for part ${partId} are already loading. Skipping. Part: ${partId}, ParamName: ${parameterName}`, { level: 'debug' });\n            }\n        } else {\n            logger.warn('ParameterThunk', 'Skipping condition due to missing operator, action, or action_value', { rawCond });\n        }\n      } // No else needed here as we `continue` above if partId/parameterName are not resolved\n    }\n\n    dispatch(setProcessedConditions(processedConditions));\n    logger.log('ParameterThunk', `Processed ${processedConditions.length} conditions.`, { processedConditions });\n\n    if (partIdsToFetch.size > 0) {\n      const idsArray = Array.from(partIdsToFetch);\n      logger.log('ParameterThunk', `Need to fetch parameters for part IDs: ${idsArray.join(', ')}`);\n      // Consider using fetchParametersForReferencedParts if it's more efficient for multiple IDs\n      // For simplicity here, dispatching individually, but batching is better.\n      // Using fetchParametersForReferencedParts directly\n      if (idsArray.length > 0) {\n          try {\n            await dispatch(fetchParametersForReferencedParts(idsArray)).unwrap();\n            logger.log('ParameterThunk', `Successfully initiated fetch for referenced parts: ${idsArray.join(', ')}`);\n          } catch (error) {\n            logger.error('ParameterThunk', `Failed to fetch parameters for referenced parts: ${idsArray.join(', ')}`, { error });\n            // Do not reject the whole thunk if fetches fail, still try to evaluate with what we have or log it.\n            // return rejectWithValue(`Failed to fetch some referenced parameters: ${error}`);\n          }\n      }\n    } else {\n      logger.log('ParameterThunk', 'No new part parameters need to be fetched based on conditions.');\n    }\n\n    // Always evaluate conditions after setup, even if some fetches failed or none were needed\n    // This ensures that effects are cleared or updated based on current state.\n    try {\n      await dispatch(evaluateAndApplyConditions()).unwrap(); // Dispatch and await our new thunk\n    } catch (evalError) {\n      logger.error('ParameterThunk', 'Error during evaluateAndApplyConditions', { evalError });\n      // Optionally, reject the initializeConditionsAndParameters thunk if eval is critical\n      // return rejectWithValue('Failed to evaluate and apply conditions');\n    }\n  }\n);\n\n// Thunk action to fetch parameter data for a specific part\nexport const fetchParametersForPart = createAsyncThunk<\n  { partId: number, parameters: ParameterDetail[] }, // Updated return type on success\n  number, // Argument type (partId)\n  { state: RootState; rejectValue: string } // ThunkAPI config with rejectValue\n>(\n  'parameters/fetchForPart', // Action type prefix\n  async (partId, thunkAPI) => {\n    const state = thunkAPI.getState();\n    // Check if API is initialized via apiSlice\n    const apiInitialized = selectApiInitialized(state);\n\n    logger.log('ParameterThunk', `Fetching parameters for part ID: ${partId}`, { \n      category: 'parameters',\n      subsystem: 'thunk-fetch' \n    });\n\n    // Use apiInitialized from apiSlice\n    if (!apiInitialized) {\n      const errorMsg = 'Direct API is not initialized (checked via apiSlice).';\n      logger.error('ParameterThunk', errorMsg, { \n        category: 'parameters',\n        subsystem: 'thunk-fetch' \n      });\n      return thunkAPI.rejectWithValue(errorMsg);\n    }\n\n    try {\n      // Use the refactored inventreeApiService (which gets config from store)\n      const parameters = await inventreeApiService.getPartParameters(partId);\n      \n      // Check if the result is null (API error) or an array\n      if (parameters === null) {\n        throw new Error('API call to getPartParameters returned null.');\n      }\n\n      const parametersCount = parameters.length; // No need for Array.isArray check if non-null\n      logger.log('ParameterThunk', `Successfully fetched ${parametersCount} parameters for part ID: ${partId}`, { \n        category: 'parameters',\n        subsystem: 'thunk-fetch' \n      });\n      \n      // Return the fetched data (which is guaranteed to be an array here)\n      // Include the original partId in the success payload\n      return { partId, parameters }; \n      \n    } catch (error: any) {\n      const errorMsg = `Failed to fetch parameters for part ${partId}: ${error.message || error}`;\n      logger.error('ParameterThunk', errorMsg, { \n        error,\n        category: 'parameters',\n        subsystem: 'thunk-fetch' \n      });\n      // Return error message (will become the rejected action payload)\n      return thunkAPI.rejectWithValue(errorMsg);\n    }\n  }\n);\n\n// Thunk to fetch parameters for multiple part IDs\nexport const fetchParametersForReferencedParts = createAsyncThunk<\n    Record<number, { data: ParameterDetail[]; error?: string }>, // UPDATED return type\n    number[],                        // Argument type: Array of part IDs\n    { state: RootState; rejectValue: string } // Thunk config\n>(\n    'parameters/fetchForReferencedParts',\n    async (partIds, { getState, rejectWithValue }) => {\n        const state = getState();\n        const apiInitialized = selectApiInitialized(state);\n\n        logger.log('fetchParametersForReferencedParts Thunk', `Thunk started. Original partIds received: ${partIds.join(', ')}`, { level: 'debug' });\n\n        if (!apiInitialized) {\n            const errorMsg = 'API not initialized. Cannot fetch referenced parameters.';\n            logger.error('fetchParametersForReferencedParts Thunk', errorMsg);\n            return rejectWithValue(errorMsg);\n        }\n\n        if (!partIds || partIds.length === 0) {\n            logger.log('fetchParametersForReferencedParts Thunk', 'No part IDs provided, skipping fetch.');\n            return {};\n        }\n\n        // Filter out part IDs that are already loading or have recently failed\n        const validPartIdsToFetch = partIds.filter(id => {\n            const currentStatus = selectParameterLoadingStatus(state, id);\n            if (currentStatus === 'failed') {\n                logger.warn('fetchParametersForReferencedParts Thunk', `Part ${id} previously failed. Skipping fetch in this batch.`);\n                return false; \n            }\n            return true;\n        });\n\n        if (validPartIdsToFetch.length === 0) {\n            logger.log('fetchParametersForReferencedParts Thunk', 'All provided part IDs are already loading, recently failed, or list was empty after filtering. Skipping API calls.');\n            return {};\n        }\n\n        logger.log('fetchParametersForReferencedParts Thunk', `Attempting to fetch parameters for part IDs: ${validPartIdsToFetch.join(', ')} (after filtering). Original IDs: ${partIds.join(', ')}`);\n\n        try {\n            const results: Record<number, { data: ParameterDetail[]; error?: string }> = {}; // UPDATED type for results\n            \n            const promises = validPartIdsToFetch.map(partId => {\n                logger.log('fetchParametersForReferencedParts Thunk', `Preparing API call for partId: ${partId}`, { level: 'silly' });\n                return inventreeApiService.getPartParameters(partId)\n                 .then(parameters => ({ status: 'fulfilled', value: parameters, partId }))\n                 .catch(error => ({ status: 'rejected', reason: error, partId }));\n            });\n            \n            // Using Promise.allSettled isn't strictly necessary here since .then/.catch on individual promises handles settlement.\n            // However, to keep the structure and ensure we process all, we can map the results of Promise.all on the transformed promises.\n            // Or, more simply, await all promises and build the results object directly.\n            \n            const settledIndividualPromises = await Promise.all(promises.map(p => p.catch(e => e))); // Catch individual errors to ensure all complete\n            logger.log('fetchParametersForReferencedParts Thunk', 'Raw settledIndividualPromises:', { data: settledIndividualPromises, level: 'silly' });\n\n            settledIndividualPromises.forEach(result => {\n                // Result structure from .then/.catch is { status: 'fulfilled'/'rejected', value/reason, partId }\n                const partId = result.partId; // partId is attached in both fulfilled and rejected cases\n                logger.log('fetchParametersForReferencedParts Thunk', `Processing settled promise for partId: ${partId}`, { status: result.status, level: 'silly' });\n\n                if (result.status === 'fulfilled') {\n                    const parameters = result.value as ParameterDetail[] | null; // value from .then\n                    if (parameters === null) {\n                        const errorMsg = `API returned null or failed to fetch parameters for part ${partId}.`;\n                        logger.warn('fetchParametersForReferencedParts Thunk', errorMsg, { partIdForContext: partId });\n                        results[partId] = { data: [], error: errorMsg };\n                    } else {\n                        results[partId] = { data: parameters };\n                        logger.log('fetchParametersForReferencedParts Thunk', `Fetched ${parameters.length} parameters for part ${partId}.`, { level: 'debug', partIdForContext: partId });\n                    }\n                } else { // status === 'rejected' or it's the caught error object itself\n                    const errorReason = result.reason || result; // reason from .catch or the error if map(p => p.catch(e => e)) was used\n                    const errorMsg = errorReason?.message || String(errorReason);\n                    logger.error('fetchParametersForReferencedParts Thunk', `Failed to fetch parameters for part ${partId}: ${errorMsg}`, { partIdForContext: partId, errorDetail: errorReason });\n                    results[partId] = { data: [], error: errorMsg };\n                }\n            });\n\n            logger.log('fetchParametersForReferencedParts Thunk', `Finished processing parameter fetches for ${validPartIdsToFetch.length} parts.`);\n            logger.log('fetchParametersForReferencedParts Thunk', 'Final results object being returned:', { data: results, level: 'debug' });\n            return results;\n        } catch (error: any) { \n            const errorMsg = `Overall failure in fetchParametersForReferencedParts thunk: ${error.message || error}`;\n            logger.error('fetchParametersForReferencedParts Thunk', errorMsg);\n            // For a top-level error, we might want to reject the whole thunk\n            // or return a structure indicating failure for all initially requested validPartIds.\n            // For now, let's attempt to return error for all parts it was trying to fetch.\n            const failedResults: Record<number, { data: ParameterDetail[]; error?: string }> = {};\n            validPartIdsToFetch.forEach(id => {\n                failedResults[id] = { data: [], error: errorMsg };\n            });\n            // This rejectWithValue will make the whole thunk action '.rejected'\n            // If we want partial success/failure to be handled by '.fulfilled', the catch block\n            // for individual promises inside the try is more appropriate.\n            // The current structure aims for the latter.\n            // So, if an error reaches here, it's unexpected.\n            return rejectWithValue(errorMsg); // This makes the entire thunk fail.\n        }\n    }\n);\n\n// Thunk to update a single parameter value\nexport const updateParameterValue = createAsyncThunk<\n    { partId: number; parameterName: string; value: string }, // Return type\n    { partId: number; paramName: string; value: string },    // Argument type\n    { state: RootState; rejectValue: string }                 // Thunk config\n>(\n    'parameters/updateValue',\n    async ({ partId, paramName, value }, { getState, rejectWithValue }) => {\n        const state = getState();\n        // Check API initialization\n        const apiInitialized = selectApiInitialized(state);\n\n        if (!apiInitialized) {\n            const errorMsg = 'API not initialized. Cannot update parameter.';\n            logger.error('updateParameterValue Thunk', errorMsg);\n            return rejectWithValue(errorMsg);\n        }\n\n        try {\n            // REMOVED: Old API instance creation\n            // const api = new InvenTreeDirectAPI(apiUrl, apiKey);\n            \n            // We need the Parameter *Instance* PK, not just the name, for the update API.\n            // Find the parameter in the current state to get its PK.\n            const parametersForPart = state.parameters.parametersByPartId[partId] || [];\n            const parameterToUpdate = parametersForPart.find((p: ParameterDetail) => p.template_detail?.name === paramName);\n\n            if (!parameterToUpdate) {\n                 const errorMsg = `Parameter '${paramName}' not found in state for part ${partId}. Cannot get PK for update.`;\n                 logger.error('updateParameterValue Thunk', errorMsg);\n                 return rejectWithValue(errorMsg);\n            }\n\n            const parameterInstancePk = parameterToUpdate.pk;\n\n            // Call the refactored service method with the instance PK\n            const updateResult = await inventreeApiService.updatePartParameter(parameterInstancePk, value);\n\n            if (!updateResult) {\n                // Throw an error if the API call failed (returned null)\n                throw new Error('API call to updatePartParameter returned null.');\n            }\n\n            logger.log('updateParameterValue Thunk', `Successfully updated param PK ${parameterInstancePk} (${paramName}) for part ${partId} to ${value}.`);\n            // Return the original arguments on success, as expected by the reducer\n            return { partId, parameterName: paramName, value };\n        } catch (error: any) {\n            const errorMsg = `Failed to update parameter ${paramName} for part ${partId}: ${error.message || error}`;\n            logger.error('updateParameterValue Thunk', errorMsg);\n            return rejectWithValue(errorMsg);\n        }\n    }\n);\n\n// NEW Thunk: Evaluates conditions and applies their effects\nexport const evaluateAndApplyConditions = createAsyncThunk<\n  void, // Return type\n  void, // Argument type (none for this thunk)\n  { state: RootState; rejectValue: string }\n>(\n  'parameters/evaluateAndApplyConditions',\n  async (_, { dispatch, getState }) => {\n    // logger.log('ParameterThunk', 'Evaluating and applying conditions...'); // Original log\n    const state = getState();\n    const { processedConditions, parameterValues } = state.parameters;\n\n    // NEW CONSOLE LOG HERE\n    console.log('[PT_DEBUG] evaluateAndApplyConditions - START. Processed Conditions:', JSON.parse(JSON.stringify(processedConditions)));\n    console.log('[PT_DEBUG] evaluateAndApplyConditions - Current parameterValues:', JSON.parse(JSON.stringify(parameterValues)));\n\n    const allPartsById = state.parts.partsById; // Used for wildcard target\n\n    if (!processedConditions || processedConditions.length === 0) {\n      logger.log('ParameterThunk', 'No processed conditions to evaluate. Clearing existing effects.');\n      dispatch(clearConditionalPartEffects());\n      return;\n    }\n\n    const newEffects: Record<number, ConditionalPartEffect> = {};\n\n    // Helper to merge effects for a part\n    const mergeEffect = (partId: number, effect: Partial<ConditionalPartEffect>) => {\n      if (!newEffects[partId]) {\n        newEffects[partId] = {};\n      }\n      // Simple merge: last condition setting an effect wins for that specific effect property\n      // More sophisticated merging (e.g., for borders, or multiple badges) could be added if needed\n      newEffects[partId] = { ...newEffects[partId], ...effect };\n    };\n\n    for (const condition of processedConditions) {\n      const paramValue = parameterValues[condition.partId]?.[condition.parameterName]?.data;\n      let conditionMet = false;\n\n      // Specific log for our target condition\n      if (condition.partId === 145 && condition.parameterName === 'microwavables') {\n        console.log('[PT_DEBUG] Evaluating condition for part:145:microwavables', {\n          conditionSourceString: condition.sourceParameterString,\n          operator: condition.operator,\n          valueToCompare: condition.valueToCompare,\n          paramValueReadFromState: paramValue, \n          currentParameterValuesForPart145: parameterValues[145]\n        });\n      }\n\n      // --- Evaluate Condition --- (Simplified, can be expanded)\n      switch (condition.operator) {\n        case 'equals': conditionMet = String(paramValue) === String(condition.valueToCompare); break;\n        case 'not_equals': conditionMet = String(paramValue) !== String(condition.valueToCompare); break;\n        case 'contains': conditionMet = String(paramValue).includes(String(condition.valueToCompare)); break;\n        case 'exists': conditionMet = paramValue !== undefined && paramValue !== null && paramValue !== ''; break;\n        case 'is_empty': conditionMet = paramValue === undefined || paramValue === null || paramValue === ''; break;\n        case 'greater_than': conditionMet = parseFloat(paramValue) > parseFloat(condition.valueToCompare); break;\n        case 'less_than': conditionMet = parseFloat(paramValue) < parseFloat(condition.valueToCompare); break;\n        default: logger.warn('ParameterThunk', `Unknown operator: ${condition.operator}`, { condition });\n      }\n\n      if (conditionMet) {\n        // Using console.log for this specific MET log\n        console.log('[PT_DEBUG] Condition MET', { \n          conditionSource: condition.sourceParameterString, \n          evaluatedParamValue: paramValue, \n          comparedTo: condition.valueToCompare,\n          operator: condition.operator\n        });\n        let targetPartPks: number[] = [];\n\n        if (condition.targetPartIds === '*') {\n          targetPartPks = Object.keys(allPartsById).map(id => parseInt(id, 10)).filter(id => !isNaN(id));\n        } else if (Array.isArray(condition.targetPartIds)) {\n          targetPartPks = condition.targetPartIds;\n        }\n        // ELSE: targetPartPks remains [] if not '*' and not an array\n\n        logger.log('ParameterThunk', '[DEBUG] Target Part ID Resolution', {\n          level: 'info',\n          conditionSource: condition.sourceParameterString,\n          rawTargetPartIds: condition.targetPartIds, // Log the raw value\n          resolvedTargetPartPks: targetPartPks,     // Log the resolved array\n          targetPartPksLength: targetPartPks.length\n        });\n\n        if (targetPartPks.length > 0) {\n          let effectToApply: Partial<ConditionalPartEffect> = {};\n          switch (condition.action) {\n            case 'filter': effectToApply.isVisible = condition.actionValue === 'show'; break;\n            case 'highlight': effectToApply.highlight = condition.actionValue; break;\n            case 'text_color': effectToApply.textColor = condition.actionValue; break;\n            case 'border': effectToApply.border = condition.actionValue; break; // Assuming actionValue is a valid CSS border string\n            case 'icon': effectToApply.icon = condition.actionValue; break;\n            case 'badge': effectToApply.badge = condition.actionValue; break;\n            // 'sort', 'priority', 'show_section' might need different handling or state structures\n            // For now, logging them:\n            case 'sort': \n            case 'priority': \n            case 'show_section': \n              logger.log('ParameterThunk', `Action type '${condition.action}' requires specific handling not yet implemented in basic effects.`, { condition });\n              break;\n            default: logger.warn('ParameterThunk', `Unknown action type: ${condition.action}`, { condition });\n          }\n\n          // Using console.log for this specific effect log\n          console.log('[PT_DEBUG] Effect to Apply for MET condition', {\n            conditionSource: condition.sourceParameterString,\n            action: condition.action,\n            actionValue: condition.actionValue,\n            effectToApply, \n            targetPartPks \n          });\n\n          if (Object.keys(effectToApply).length > 0) {\n            targetPartPks.forEach(pk => mergeEffect(pk, effectToApply));\n          } else {\n            // Using console.log for this specific warning\n            console.warn('[PT_DEBUG] effectToApply is empty, no effect merged.', {\n                conditionSource: condition.sourceParameterString,\n                action: condition.action,\n                actionValue: condition.actionValue,\n                targetPartPks\n            });\n          }\n        } else {\n          // This new log will be crucial if targetPartPks is empty\n          logger.warn('ParameterThunk', '[DEBUG] No target part PKs resolved for MET condition. Effect will not be applied.', {\n              conditionSource: condition.sourceParameterString,\n              rawTargetPartIds: condition.targetPartIds,\n              conditionAction: condition.action, // Adding more context\n              conditionActionValue: condition.actionValue\n          });\n        }\n      } else { // Log when condition is NOT met\n        logger.log('ParameterThunk', 'Condition NOT MET', {\n          level: 'info', // Elevate for clarity\n          conditionSource: condition.sourceParameterString,\n          evaluatedParamValue: paramValue,\n          comparedTo: condition.valueToCompare,\n          operator: condition.operator\n        });\n      }\n    }\n    \n    // Using console.log for the final effects object\n    console.log('[PT_DEBUG] Final newEffects before dispatching setConditionalPartEffectsBatch', {\n      newEffects \n    });\n    dispatch(setConditionalPartEffectsBatch(newEffects));\n    logger.log('ParameterThunk', 'Finished evaluating conditions and dispatched effects batch.', { newEffectsCount: Object.keys(newEffects).length });\n  }\n);","import { createSlice, PayloadAction, ActionReducerMapBuilder } from '@reduxjs/toolkit';\nimport { ParameterAction, ParameterCondition, InventreeCardConfig, InventreeItem, ParameterDetail, ParameterConfig, ParameterOperator, ParameterActionType } from '../../types';\nimport { RootState } from '../index';\nimport { fetchParametersForPart, updateParameterValue, fetchParametersForReferencedParts } from '../thunks/parameterThunks';\nimport { Logger } from '../../utils/logger';\n\nconst logger = Logger.getInstance();\n\n// Interface for a single processed condition\nexport interface ProcessedCondition {\n  id: string; // A unique ID for this condition (e.g., derived from the raw string or a simple index)\n  rawConditionString: string; // The original condition string from config\n  sourceParameterString: string; // The 'parameter' field from the original ParameterCondition object\n  partId: number; // e.g., 145. Now guaranteed to be a number due to previous thunk changes.\n  parameterName: string; // e.g., \"microwavables\"\n  operator: ParameterOperator;\n  valueToCompare: any;  // e.g., true (boolean), \"active\" (string), 10 (number)\n  action: ParameterActionType;\n  actionValue: string;\n  targetPartIds?: number[] | string; // UPDATED: Mirrored from ParameterCondition, can be array or wildcard string\n}\n\n// NEW: Interface for the effects applied by conditions\nexport interface ConditionalPartEffect {\n  isVisible?: boolean;\n  highlight?: string; // e.g., color code\n  textColor?: string; // e.g., color code\n  border?: string; // e.g., CSS border string like \"2px solid red\"\n  // Add other effect types as needed based on ParameterActionType\n  icon?: string; // mdi icon name\n  badge?: string; // text for a badge\n  // sort, priority, show_section might be handled differently or also influence this object\n}\n\ninterface ParametersState {\n  conditions: Record<string, ParameterCondition[]>; // Raw conditions from config, keyed by entityId (legacy)\n  definedConditions: ParameterCondition[]; // Stores active ParameterCondition objects from the config\n  processedConditions: ProcessedCondition[]; // Stores parsed and structured conditions\n  conditionalPartEffects: Record<number, ConditionalPartEffect>; // NEW: Stores effects for each partId\n  actions: Record<string, ParameterAction[]>;\n  parameterValues: Record<number, Record<string, ParameterDetail>>;\n  parameterLoadingStatus: Record<number, 'idle' | 'loading' | 'succeeded' | 'failed'>;\n  parameterError: Record<number, string | null>;\n  config: InventreeCardConfig | null;\n  strictWebSocketMode: boolean;\n  recentlyChanged: string[];\n  cache: {\n    conditionResults: Record<string, boolean>;\n    lastCleared: number;\n  };\n  parametersByPartId: Record<number, ParameterDetail[]>;\n}\n\nconst initialState: ParametersState = {\n  conditions: {},\n  definedConditions: [],\n  processedConditions: [],\n  conditionalPartEffects: {}, // NEW: Initialize as empty object\n  actions: {},\n  parameterValues: {},\n  parameterLoadingStatus: {},\n  parameterError: {},\n  config: null,\n  strictWebSocketMode: false,\n  recentlyChanged: [],\n  cache: {\n    conditionResults: {},\n    lastCleared: Date.now()\n  },\n  parametersByPartId: {}\n};\n\nconst parametersSlice = createSlice({\n  name: 'parameters',\n  initialState,\n  reducers: {\n    setConditions(state: ParametersState, action: PayloadAction<{ entityId: string, conditions: ParameterCondition[] }>) {\n      const { entityId, conditions } = action.payload;\n      state.conditions[entityId] = conditions;\n    },\n    setDefinedConditions(state: ParametersState, action: PayloadAction<ParameterCondition[]>) {\n      state.definedConditions = action.payload;\n      logger.log('parametersSlice', 'Defined conditions have been set.', { count: action.payload.length, level: 'debug' });\n    },\n    setProcessedConditions(state: ParametersState, action: PayloadAction<ProcessedCondition[]>) {\n      state.processedConditions = action.payload;\n      logger.log('parametersSlice', 'Processed conditions have been set.', { count: action.payload.length, level: 'debug' });\n    },\n    setConditionalPartEffectsBatch(state: ParametersState, action: PayloadAction<Record<number, ConditionalPartEffect>>) {\n      // Replace the entire effects object. The thunk will calculate the complete new state.\n      state.conditionalPartEffects = action.payload;\n      logger.log('parametersSlice', 'Conditional part effects batch updated.', { count: Object.keys(action.payload).length, level: 'debug' });\n    },\n    clearConditionalPartEffects(state: ParametersState) {\n      state.conditionalPartEffects = {};\n      logger.log('parametersSlice', 'Conditional part effects cleared.', { level: 'debug' });\n    },\n    setActions(state: ParametersState, action: PayloadAction<{ entityId: string, actions: ParameterAction[] }>) {\n      const { entityId, actions } = action.payload;\n      state.actions[entityId] = actions;\n    },\n    setConfig(state: ParametersState, action: PayloadAction<InventreeCardConfig>) {\n      state.config = action.payload;\n    },\n    setStrictWebSocketMode(state: ParametersState, action: PayloadAction<boolean>) {\n      state.strictWebSocketMode = action.payload;\n    },\n    clearConditionCache(state: ParametersState) {\n      state.cache.conditionResults = {};\n      state.cache.lastCleared = Date.now();\n      logger.log('parametersSlice', 'Condition cache cleared.', { level: 'debug' });\n    },\n    clearCache(state: ParametersState) {\n      state.cache.conditionResults = {};\n      state.cache.lastCleared = Date.now();\n      state.parameterValues = {};\n      state.parameterLoadingStatus = {};\n      state.parameterError = {};\n      state.recentlyChanged = [];\n      logger.info('parametersSlice', 'Full parameter cache cleared (values, status, errors, conditions, recent).');\n    },\n    checkCondition(state: ParametersState, action: PayloadAction<{ part: InventreeItem, condition: ParameterCondition }>) {\n      // This action doesn't actually modify state, it's used for tracking only\n    },\n    updateValue(state: ParametersState, action: PayloadAction<{ partId: number, paramName: string, value: string, source?: string }>) {\n      const { partId, paramName, value, source } = action.payload;\n      \n      if (!state.parameterValues[partId]) {\n        state.parameterValues[partId] = {};\n        logger.log('parametersSlice', `Created parameter entry for part ${partId} during updateValue.`, { level: 'debug' });\n      }\n      \n      if (!state.parameterValues[partId][paramName]) {\n        state.parameterValues[partId][paramName] = {\n           pk: 0,\n           part: partId,\n           template: 0,\n           template_detail: { \n              pk: 0,\n              name: paramName, \n              units: '',\n              description: '',\n              checkbox: false,\n              choices: '',\n              selectionlist: null\n           },\n           data: value,\n           data_numeric: null,\n        };\n        logger.log('parametersSlice', `Created parameter entry for ${paramName} on part ${partId} during updateValue.`, { level: 'debug' });\n      } else {\n         state.parameterValues[partId][paramName].data = value;\n      }\n\n      // Ensure loading status is updated if this is the first time we get a value\n      // However, for WebSocket updates, it's usually better to assume it's 'succeeded' if data arrives\n      if (state.parameterLoadingStatus[partId] !== 'succeeded') {\n        state.parameterLoadingStatus[partId] = 'succeeded';\n        state.parameterError[partId] = null;\n      }\n\n      const key = `${partId}:${paramName}`;\n      if (!state.recentlyChanged.includes(key)) {\n        state.recentlyChanged.push(key);\n        if (state.recentlyChanged.length > 100) {\n          state.recentlyChanged = state.recentlyChanged.slice(-100);\n        }\n      }\n       logger.log('parametersSlice', `Updated value for ${key} to '${value}' (Source: ${source || 'Unknown'}). Status set to succeeded.`, { level: 'debug' });\n    },\n    webSocketUpdateReceived(state: ParametersState, action: PayloadAction<{ partId: number; parameterName: string; value: any; source?: string }>) {\n      const { partId, parameterName, value, source } = action.payload;\n      logger.log('parametersSlice', `[Reducer START] webSocketUpdateReceived`, {\n        level: 'info',\n        partId,\n        parameterName,\n        receivedValue: value,\n        valueType: typeof value,\n        source\n      });\n\n      if (!state.parameterValues[partId]) {\n        state.parameterValues[partId] = {};\n        logger.log('parametersSlice', `Created parameter structure for part ${partId} during WebSocket update.`, { level: 'debug' });\n      }\n\n      const beforeValue = state.parameterValues[partId]?.[parameterName]?.data;\n      logger.log('parametersSlice', `Value before update for ${partId}:${parameterName}: ${beforeValue}`, { level: 'debug' });\n\n      if (!state.parameterValues[partId][parameterName]) {\n        state.parameterValues[partId][parameterName] = {\n          pk: 0, \n          part: partId,\n          template: 0, \n          template_detail: {\n            pk: 0, \n            name: parameterName,\n            units: '',\n            description: '',\n            checkbox: typeof value === 'boolean',\n            choices: '',\n            selectionlist: null\n          },\n          data: String(value), \n          data_numeric: typeof value === 'number' ? value : null,\n        };\n        logger.log('parametersSlice', `Created new parameter entry for ${parameterName} on part ${partId} via WebSocket. New data: ${String(value)}`, { level: 'debug' });\n      } else {\n        state.parameterValues[partId][parameterName].data = String(value);\n        logger.log('parametersSlice', `Updated existing parameter ${parameterName} for part ${partId} via WebSocket. New data: ${String(value)}`, { level: 'debug' });\n      }\n\n      const afterValue = state.parameterValues[partId]?.[parameterName]?.data;\n      logger.log('parametersSlice', `Value AFTER update for ${partId}:${parameterName}: ${afterValue}`, { level: 'debug' });\n\n      state.parameterLoadingStatus[partId] = 'succeeded';\n      state.parameterError[partId] = null;\n\n      const key = `${partId}:${parameterName}`;\n      if (!state.recentlyChanged.includes(key)) {\n        state.recentlyChanged.push(key);\n        if (state.recentlyChanged.length > 100) {\n          state.recentlyChanged = state.recentlyChanged.slice(-100);\n        }\n      }\n      logger.log('parametersSlice', `[Reducer END] Value for ${key} processed via WebSocket. Status set to succeeded. Final data in store: ${afterValue}`, { level: 'info' });\n    },\n    markChanged(state: ParametersState, action: PayloadAction<{ parameterId: string }>) {\n      const { parameterId } = action.payload;\n      if (!state.recentlyChanged.includes(parameterId)) {\n        state.recentlyChanged.push(parameterId);\n        if (state.recentlyChanged.length > 100) {\n          state.recentlyChanged = state.recentlyChanged.slice(-100);\n        }\n      }\n    },\n    addParametersForPart(state: ParametersState, action: PayloadAction<{ partId: number; parameters: ParameterDetail[] }>) {\n      const { partId, parameters } = action.payload;\n      if (!state.parametersByPartId[partId]) {\n        state.parametersByPartId[partId] = [];\n      }\n      state.parametersByPartId[partId] = [...state.parametersByPartId[partId], ...parameters];\n    },\n    updateParameterForPart(state: ParametersState, action: PayloadAction<{ partId: number; parameterName: string; value: any }>) {\n      const { partId, parameterName, value } = action.payload;\n      const partParams = state.parametersByPartId[partId];\n      if (partParams) {\n        const paramIndex = partParams.findIndex(p => p.template_detail?.name === parameterName);\n        if (paramIndex !== -1) {\n          partParams[paramIndex] = { ...partParams[paramIndex], data: value }; \n          logger.log('ParameterSlice', `Updated parameter '${parameterName}' for part ${partId} to value: ${value}`, {level: 'debug'});\n        } else {\n          logger.warn('ParameterSlice', `Parameter '${parameterName}' not found for part ${partId} during update.`);\n        }\n      } else {\n        logger.warn('ParameterSlice', `Part ${partId} not found in parametersByPartId during update.`);\n      }\n    },\n  },\n  extraReducers: (builder: ActionReducerMapBuilder<ParametersState>) => {\n    builder\n      .addCase(fetchParametersForPart.pending, (state: ParametersState, action) => {\n        const partId = action.meta.arg;\n        state.parameterLoadingStatus[partId] = 'loading';\n        state.parameterError[partId] = null;\n        logger.log('parametersSlice', `Fetching parameters for part ${partId}...`, { level: 'debug' });\n      })\n      .addCase(fetchParametersForPart.fulfilled, (state: ParametersState, action: PayloadAction<{ partId: number, parameters: ParameterDetail[] }>) => {\n        const { partId, parameters } = action.payload;\n        \n        state.parameterLoadingStatus[partId] = 'succeeded';\n        state.parameterError[partId] = null;\n        \n        if (!state.parameterValues[partId]) {\n          state.parameterValues[partId] = {};\n        }\n\n        if (parameters.length > 0) {\n          parameters.forEach(param => {\n            const paramName = param.template_detail?.name;\n            if (paramName) {\n                state.parameterValues[partId][paramName] = param;\n            } else {\n                 logger.warn('parametersSlice', `Fetched parameter for part ${partId} is missing template_detail.name`, param);\n            }\n          });\n           logger.log('parametersSlice', `Successfully fetched ${parameters.length} parameters for part ${partId}.`, { level: 'debug' });\n        } else {\n           logger.log('parametersSlice', `Fetched parameters for part ${partId}, but received an empty array. Marking as succeeded.`, { level: 'debug' });\n        }\n      })\n      .addCase(fetchParametersForPart.rejected, (state: ParametersState, action) => {\n        const partId = action.meta.arg;\n        state.parameterLoadingStatus[partId] = 'failed';\n        state.parameterError[partId] = action.payload as string ?? 'Failed to fetch parameters';\n        logger.error('parametersSlice', `Failed to fetch parameters for part ${partId}: ${state.parameterError[partId]}`);\n      })\n      .addCase(fetchParametersForReferencedParts.pending, (state: ParametersState, action) => {\n        logger.log('parametersSlice', 'Handling fetchParametersForReferencedParts.pending', { level: 'debug', subsystem: 'thunkStatus'});\n        const partIdsFromThunkArg = action.meta.arg as number[]; // Explicitly type here\n        logger.log('parametersSlice', `- Pending for partIds from thunk argument: ${partIdsFromThunkArg.join(', ')}`, { level: 'debug', subsystem: 'thunkStatus', data: partIdsFromThunkArg });\n        \n        partIdsFromThunkArg.forEach((partId: number) => { \n          // Only set to 'loading' if currently 'idle' or 'failed'\n          // This prevents this pending action from immediately blocking its own thunk\n          // if the thunk's internal filter also checks for 'loading'.\n          const currentStatusInState = state.parameterLoadingStatus[partId] ?? 'idle';\n          if (currentStatusInState === 'idle' || currentStatusInState === 'failed') {\n            state.parameterLoadingStatus[partId] = 'loading';\n            state.parameterError[partId] = null;\n            logger.log('parametersSlice', `Set part ${partId} to loading (was ${currentStatusInState})`, {level: 'silly'});\n          } else {\n            logger.log('parametersSlice', `Part ${partId} already ${currentStatusInState}, not changing to loading in pending reducer.`, {level: 'silly'});\n          }\n        });\n      })\n      .addCase(fetchParametersForReferencedParts.fulfilled, (state: ParametersState, action: PayloadAction<Record<number, { data: ParameterDetail[]; error?: string }>>) => {\n        const parametersByPartId = action.payload;\n        logger.log('parametersSlice', 'Handling fetchParametersForReferencedParts.fulfilled', { level: 'debug', subsystem: 'thunkStatus', data: parametersByPartId });\n        \n        Object.entries(parametersByPartId).forEach(([partIdStr, result]) => {\n          const partId = parseInt(partIdStr, 10);\n          if (result.error) {\n            state.parameterLoadingStatus[partId] = 'failed';\n            state.parameterError[partId] = result.error;\n            if (!state.parameterValues[partId]) {\n              state.parameterValues[partId] = {}; \n            }\n            logger.warn('parametersSlice', `fetchParametersForReferencedParts fulfilled but part ${partId} failed: ${result.error}`);\n          } else {\n            state.parameterLoadingStatus[partId] = 'succeeded';\n            state.parameterError[partId] = null;\n            \n            if (!state.parameterValues[partId]) {\n              state.parameterValues[partId] = {};\n            }\n\n            const paramsForPartMap: Record<string, ParameterDetail> = {};\n            if (result.data.length > 0) {\n              result.data.forEach(param => {\n                const paramName = param.template_detail?.name;\n                if (paramName) {\n                    paramsForPartMap[paramName] = param;\n                } else {\n                     logger.warn('parametersSlice', `Fetched parameter for part ${partId} is missing template_detail.name`, { paramData: param });\n                }\n              });\n            }\n            state.parameterValues[partId] = paramsForPartMap;\n            logger.log('parametersSlice', `Updated parameters for part ${partId}. Count: ${result.data.length}.`, { level: 'debug' });\n          }\n        });\n      })\n      .addCase(fetchParametersForReferencedParts.rejected, (state: ParametersState, action) => {\n        logger.error('parametersSlice', `Handling fetchParametersForReferencedParts.rejected: ${action.payload || action.error.message}`, { subsystem: 'thunkStatus', error: action.payload || action.error });\n        const partIdsAttempted = action.meta.arg;\n        if (partIdsAttempted && Array.isArray(partIdsAttempted)) {\n          partIdsAttempted.forEach(partId => {\n            if (state.parameterLoadingStatus[partId] === 'loading') {\n              state.parameterLoadingStatus[partId] = 'failed';\n              state.parameterError[partId] = action.payload as string || action.error.message || 'Thunk rejected';\n            }\n          });\n        }\n      })\n      .addCase(updateParameterValue.pending, (state: ParametersState, action) => {\n        const { partId, paramName } = action.meta.arg;\n         logger.log('parametersSlice', `Updating parameter ${paramName} for part ${partId}...`, { level: 'debug' });\n      })\n      .addCase(updateParameterValue.fulfilled, (state: ParametersState, action: PayloadAction<{ partId: number; paramName: string; value: string }>) => {\n        const { partId, paramName, value } = action.payload;\n        const key = `${partId}:${paramName}`;\n        \n        if (state.parameterValues[partId] && state.parameterValues[partId][paramName]) {\n          state.parameterValues[partId][paramName].data = value;\n           logger.log('parametersSlice', `Successfully updated parameter ${key} to '${value}' via API.`, { level: 'debug' });\n        } else {\n           logger.warn('parametersSlice', `Parameter ${key} not found in state during updateParameterValue.fulfilled. Value set by API might not be reflected unless fetched.`);\n        }\n        \n        state.parameterLoadingStatus[partId] = 'succeeded';\n        state.parameterError[partId] = null;\n\n        if (!state.recentlyChanged.includes(key)) {\n          state.recentlyChanged.push(key);\n           if (state.recentlyChanged.length > 100) {\n            state.recentlyChanged = state.recentlyChanged.slice(-100);\n          }\n        }\n      })\n      .addCase(updateParameterValue.rejected, (state: ParametersState, action) => {\n        const { partId, paramName } = action.meta.arg;\n        const key = `${partId}:${paramName}`;\n        logger.error('parametersSlice', `Failed to update parameter ${key} via API: ${action.payload}`);\n      });\n  }\n});\n\nexport const { \n  setConditions, \n  setDefinedConditions,\n  setProcessedConditions,\n  setConditionalPartEffectsBatch,\n  clearConditionalPartEffects,\n  setActions, \n  setConfig,\n  setStrictWebSocketMode,\n  clearConditionCache,\n  clearCache,\n  checkCondition,\n  updateValue,\n  webSocketUpdateReceived,\n  markChanged,\n  addParametersForPart,\n  updateParameterForPart\n} = parametersSlice.actions;\n\nexport const selectConditions = (state: RootState, entityId: string) => state.parameters.conditions[entityId] || [];\nexport const selectActions = (state: RootState, entityId: string) => state.parameters.actions[entityId] || [];\n\nexport const selectParameterLoadingStatus = (state: RootState, partId: number): 'idle' | 'loading' | 'succeeded' | 'failed' => {\n  return state.parameters.parameterLoadingStatus[partId] ?? 'idle';\n};\n\nexport const selectPartParameterError = (state: RootState, partId: number): string | null => {\n  return state.parameters.parameterError[partId] ?? null;\n};\n\nexport const selectParametersLoadingStatus = (state: RootState, partIds: number[]): Record<number, 'idle' | 'loading' | 'succeeded' | 'failed'> => {\n  const statuses: Record<number, 'idle' | 'loading' | 'succeeded' | 'failed'> = {};\n  partIds.forEach(id => {\n    statuses[id] = state.parameters.parameterLoadingStatus[id] ?? 'idle';\n  });\n  return statuses;\n};\n\nexport const selectStrictWebSocketMode = (state: RootState) => state.parameters.strictWebSocketMode;\nexport const selectParameterConfig = (state: RootState) => state.parameters.config;\nexport const selectRecentlyChangedParameters = (state: RootState) => state.parameters.recentlyChanged;\nexport const selectParametersForPart = (state: RootState, partId: number): ParameterDetail[] | undefined => state.parameters.parametersByPartId[partId];\nexport const selectParameterValue = (state: RootState, partId: number, paramName: string): string | null => {\n    const partParams = state.parameters.parameterValues[partId];\n    return partParams?.[paramName]?.data ?? null;\n};\n\nexport const selectDefinedConditions = (state: RootState): ParameterCondition[] => state.parameters.definedConditions;\nexport const selectProcessedConditions = (state: RootState): ProcessedCondition[] => state.parameters.processedConditions;\nexport const selectConditionalPartEffects = (state: RootState): Record<number, ConditionalPartEffect> => state.parameters.conditionalPartEffects;\nexport const selectConditionalEffectForPart = (state: RootState, partId: number): ConditionalPartEffect | undefined => state.parameters.conditionalPartEffects[partId];\n\nexport default parametersSlice.reducer; ","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface UiState {\n  activeView: string;\n  selectedPartId: number | null;\n  debug: {\n    showDebugPanel: boolean;\n    activeTab: string;\n  };\n  loading: boolean;\n}\n\nconst initialState: UiState = {\n  activeView: 'detail',\n  selectedPartId: null,\n  debug: {\n    showDebugPanel: false,\n    activeTab: 'data'\n  },\n  loading: false\n};\n\nconst uiSlice = createSlice({\n  name: 'ui',\n  initialState,\n  reducers: {\n    setActiveView(state: UiState, action: PayloadAction<string>) {\n      state.activeView = action.payload;\n    },\n    setSelectedPart(state: UiState, action: PayloadAction<number | null>) {\n      state.selectedPartId = action.payload;\n    },\n    toggleDebugPanel(state: UiState) {\n      state.debug.showDebugPanel = !state.debug.showDebugPanel;\n    },\n    setDebugTab(state: UiState, action: PayloadAction<string>) {\n      state.debug.activeTab = action.payload;\n    },\n    setLoading(state: UiState, action: PayloadAction<boolean>) {\n      state.loading = action.payload;\n    }\n  }\n});\n\nexport const { \n  setActiveView, \n  setSelectedPart, \n  toggleDebugPanel, \n  setDebugTab, \n  setLoading \n} = uiSlice.actions;\n\nexport default uiSlice.reducer;\n\n\n","/**\n * SafeTimer - A lightweight, safer alternative to TimerManager\n * \n * This utility provides basic timer management functionality without the complexity\n * and potential issues of the original TimerManager.\n */\n\n// Track timers for cleanup\nconst timeouts = new Map<number, string>();\nconst intervals = new Map<number, string>();\n\n/**\n * Set a timeout and track it for cleanup\n * @param callback Function to call when timeout expires\n * @param delay Delay in milliseconds\n * @param debugLabel Optional label for debugging\n * @returns Timeout ID\n */\nexport function safeSetTimeout(\n  callback: (...args: any[]) => void,\n  delay: number,\n  debugLabel?: string\n): number {\n  const id = window.setTimeout(callback, delay);\n  timeouts.set(id, debugLabel || 'anonymous');\n  return id;\n}\n\n/**\n * Clear a timeout and remove it from tracking\n * @param id Timeout ID to clear\n */\nexport function safeClearTimeout(id: number): void {\n  window.clearTimeout(id);\n  timeouts.delete(id);\n}\n\n/**\n * Set an interval and track it for cleanup\n * @param callback Function to call on each interval\n * @param delay Delay in milliseconds\n * @param debugLabel Optional label for debugging\n * @returns Interval ID\n */\nexport function safeSetInterval(\n  callback: (...args: any[]) => void,\n  delay: number,\n  debugLabel?: string\n): number {\n  const id = window.setInterval(callback, delay);\n  intervals.set(id, debugLabel || 'anonymous');\n  return id;\n}\n\n/**\n * Clear an interval and remove it from tracking\n * @param id Interval ID to clear\n */\nexport function safeClearInterval(id: number): void {\n  window.clearInterval(id);\n  intervals.delete(id);\n}\n\n/**\n * Clean up all tracked timeouts and intervals\n */\nexport function cleanupAllTimers(): void {\n  // Clear all timeouts\n  timeouts.forEach((_, id) => {\n    window.clearTimeout(id);\n  });\n  timeouts.clear();\n  \n  // Clear all intervals\n  intervals.forEach((_, id) => {\n    window.clearInterval(id);\n  });\n  intervals.clear();\n}\n\n/**\n * Get statistics about current timers\n */\nexport function getTimerStats(): { timeouts: number, intervals: number } {\n  return {\n    timeouts: timeouts.size,\n    intervals: intervals.size\n  };\n} ","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { cleanupAllTimers, safeSetTimeout, safeClearTimeout, safeSetInterval, safeClearInterval } from '../../utils/safe-timer';\nimport { RootState } from '../index';\n\ninterface Timer {\n  id: number;\n  componentId: string;\n  label?: string;\n  startTime: number;\n  delay: number;\n  type: 'timeout' | 'interval';\n}\n\ninterface TimerState {\n  timers: Record<number, Timer>;\n  componentTimers: Record<string, Set<number>>;\n  lastId: number;\n}\n\nconst initialState: TimerState = {\n  timers: {},\n  componentTimers: {},\n  lastId: 0\n};\n\nexport const timerSlice = createSlice({\n  name: 'timers',\n  initialState,\n  reducers: {\n    addTimer: (state: TimerState, action: PayloadAction<Omit<Timer, 'id'>>) => {\n      const { componentId, label, startTime, delay, type } = action.payload;\n      const id = ++state.lastId;\n      \n      // Add timer to the timers map\n      state.timers[id] = {\n        id,\n        componentId,\n        label,\n        startTime,\n        delay,\n        type\n      };\n      \n      // Ensure the component exists in the componentTimers map\n      if (!state.componentTimers[componentId]) {\n        state.componentTimers[componentId] = new Set<number>();\n      }\n      \n      // Add the timer ID to the component's set of timers\n      state.componentTimers[componentId].add(id);\n    },\n    \n    removeTimer: (state: TimerState, action: PayloadAction<number>) => {\n      const id = action.payload;\n      const timer = state.timers[id];\n      \n      if (timer) {\n        // Remove from componentTimers\n        if (state.componentTimers[timer.componentId]) {\n          state.componentTimers[timer.componentId].delete(id);\n          \n          // Clean up empty component entries\n          if (state.componentTimers[timer.componentId].size === 0) {\n            delete state.componentTimers[timer.componentId];\n          }\n        }\n        \n        // Remove from timers map\n        delete state.timers[id];\n      }\n    },\n    \n    clearComponentTimers: (state: TimerState, action: PayloadAction<string>) => {\n      const componentId = action.payload;\n      const timers = state.componentTimers[componentId];\n      \n      if (timers) {\n        // Clean up each timer\n        timers.forEach((id: number) => {\n          delete state.timers[id];\n        });\n        \n        // Remove the component entry\n        delete state.componentTimers[componentId];\n      }\n    },\n    \n    clearAllTimers: (state: TimerState) => {\n      state.timers = {};\n      state.componentTimers = {};\n      // Do not reset lastId to prevent ID collisions\n    }\n  }\n});\n\n// Action creators\nexport const { addTimer, removeTimer, clearComponentTimers, clearAllTimers } = timerSlice.actions;\n\n// Selectors\nexport const selectAllTimers = (state: RootState) => state.timers.timers;\nexport const selectComponentTimers = (state: RootState, componentId: string) => \n  Object.values(state.timers.timers).filter((timer): timer is Timer => \n    timer !== null && \n    typeof timer === 'object' && \n    'componentId' in timer && \n    timer.componentId === componentId\n  );\nexport const selectTimerStats = (state: RootState) => {\n  const timers = Object.values(state.timers.timers) as Timer[];\n  return {\n    total: timers.length,\n    timeouts: timers.filter((t): t is Timer => t.type === 'timeout').length,\n    intervals: timers.filter((t): t is Timer => t.type === 'interval').length,\n    byComponent: Object.fromEntries(\n      Object.entries(state.timers.componentTimers).map(([componentId, timerIds]) => [\n        componentId,\n        {\n          total: (timerIds as Set<number>).size,\n          timeouts: Array.from(timerIds as Set<number>)\n            .filter(id => state.timers.timers[id]?.type === 'timeout').length,\n          intervals: Array.from(timerIds as Set<number>)\n            .filter(id => state.timers.timers[id]?.type === 'interval').length\n        }\n      ])\n    )\n  };\n};\n\n// Middleware functions\n/**\n * Create a timeout and track it in Redux\n * @param componentId Component ID for tracking\n * @param callback Function to call when timeout expires\n * @param delay Delay in milliseconds\n * @param label Optional label for debugging\n * @returns Timeout ID\n */\nexport function createTimeout(\n  componentId: string,\n  callback: (...args: any[]) => void,\n  delay: number,\n  label?: string\n) {\n  return (dispatch: any) => {\n    const id = safeSetTimeout(callback, delay, label);\n    \n    dispatch(addTimer({\n      componentId,\n      label,\n      startTime: Date.now(),\n      delay,\n      type: 'timeout'\n    }));\n    \n    return id;\n  };\n}\n\n/**\n * Create an interval and track it in Redux\n * @param componentId Component ID for tracking\n * @param callback Function to call on each interval\n * @param delay Delay in milliseconds\n * @param label Optional label for debugging\n * @returns Interval ID\n */\nexport function createInterval(\n  componentId: string,\n  callback: (...args: any[]) => void,\n  delay: number,\n  label?: string\n) {\n  return (dispatch: any) => {\n    const id = safeSetInterval(callback, delay, label);\n    \n    dispatch(addTimer({\n      componentId,\n      label,\n      startTime: Date.now(),\n      delay,\n      type: 'interval'\n    }));\n    \n    return id;\n  };\n}\n\n/**\n * Clear a timeout and remove it from Redux\n * @param id Timeout ID to clear\n */\nexport function clearTimeout(id: number) {\n  return (dispatch: any) => {\n    safeClearTimeout(id);\n    dispatch(removeTimer(id));\n  };\n}\n\n/**\n * Clear an interval and remove it from Redux\n * @param id Interval ID to clear\n */\nexport function clearInterval(id: number) {\n  return (dispatch: any) => {\n    safeClearInterval(id);\n    dispatch(removeTimer(id));\n  };\n}\n\n/**\n * Clear all timers for a component\n * @param componentId Component ID\n */\nexport function clearTimersForComponent(componentId: string) {\n  return (dispatch: any, getState: () => RootState) => {\n    const timers = selectComponentTimers(getState(), componentId);\n    \n    timers.forEach((timer: Timer) => {\n      if (timer.type === 'timeout') {\n        safeClearTimeout(timer.id);\n      } else {\n        safeClearInterval(timer.id);\n      }\n    });\n    \n    dispatch(clearComponentTimers(componentId));\n  };\n}\n\n/**\n * Clear all timers across all components\n */\nexport function clearAllTimersAction() {\n  return (dispatch: any) => {\n    cleanupAllTimers();\n    dispatch(clearAllTimers());\n  };\n}\n\nexport default timerSlice.reducer; ","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../index';\nimport { Logger } from '../../utils/logger';\n\nconst logger = Logger.getInstance();\n\ntype WebSocketStatus = 'idle' | 'connecting' | 'connected' | 'disconnected' | 'error' | 'disabled';\n\ninterface WebSocketState {\n    status: WebSocketStatus;\n    lastMessage: any | null; // Store the last received message for debugging?\n    lastError: string | null;\n    messageCount: number;\n}\n\nconst initialState: WebSocketState = {\n    status: 'idle',\n    lastMessage: null,\n    lastError: null,\n    messageCount: 0,\n};\n\nexport const websocketSlice = createSlice({\n    name: 'websocket',\n    initialState,\n    reducers: {\n        setWebSocketStatus: (state: WebSocketState, action: PayloadAction<WebSocketStatus>) => {\n            logger.log('WebSocketSlice', `Status changing from ${state.status} to ${action.payload}`);\n            state.status = action.payload;\n            if (action.payload === 'error') {\n                // Potentially capture error details if provided in action payload later\n                state.lastError = 'An error occurred'; // Placeholder\n            } else {\n                state.lastError = null;\n            }\n        },\n        webSocketMessageReceived: (state: WebSocketState, action: PayloadAction<any>) => {\n            state.lastMessage = action.payload;\n            state.messageCount += 1;\n            logger.log('WebSocketSlice', `Message received (Count: ${state.messageCount})`, action.payload);\n            // Further processing or dispatching other actions can happen in middleware\n            // or components subscribing to state.lastMessage changes.\n        },\n        resetWebSocketState: (state: WebSocketState) => {\n            logger.log('WebSocketSlice', 'Resetting WebSocket state');\n            Object.assign(state, initialState);\n        },\n    },\n});\n\n// Export actions\nexport const {\n    setWebSocketStatus,\n    webSocketMessageReceived,\n    resetWebSocketState,\n} = websocketSlice.actions;\n\n// Export selectors\nexport const selectWebSocketStatus = (state: RootState) => state.websocket.status;\nexport const selectLastWebSocketMessage = (state: RootState) => state.websocket.lastMessage;\nexport const selectWebSocketError = (state: RootState) => state.websocket.lastError;\nexport const selectWebSocketMessageCount = (state: RootState) => state.websocket.messageCount;\n\n// Export reducer\nexport default websocketSlice.reducer; ","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../index';\n\nexport interface ComponentRecord {\n  isActive: boolean;\n  registeredAt: number;\n  lastActive: number;\n}\n\ninterface ComponentState {\n  registeredComponents: Record<string, ComponentRecord>;\n}\n\nconst initialState: ComponentState = {\n  registeredComponents: {}\n};\n\nexport const componentSlice = createSlice({\n  name: 'components',\n  initialState,\n  reducers: {\n    registerComponent: (state: ComponentState, action: PayloadAction<string>) => {\n      const componentId = action.payload;\n      const now = Date.now();\n      \n      state.registeredComponents[componentId] = {\n        isActive: true,\n        registeredAt: now,\n        lastActive: now\n      };\n    },\n    \n    disconnectComponent: (state: ComponentState, action: PayloadAction<string>) => {\n      const componentId = action.payload;\n      \n      if (state.registeredComponents[componentId]) {\n        state.registeredComponents[componentId].isActive = false;\n      }\n    },\n    \n    reconnectComponent: (state: ComponentState, action: PayloadAction<string>) => {\n      const componentId = action.payload;\n      const now = Date.now();\n      \n      if (state.registeredComponents[componentId]) {\n        state.registeredComponents[componentId].isActive = true;\n        state.registeredComponents[componentId].lastActive = now;\n      } else {\n        // Register if not found\n        state.registeredComponents[componentId] = {\n          isActive: true,\n          registeredAt: now,\n          lastActive: now\n        };\n      }\n    },\n    \n    updateComponentActivity: (state: ComponentState, action: PayloadAction<string>) => {\n      const componentId = action.payload;\n      \n      if (state.registeredComponents[componentId]) {\n        state.registeredComponents[componentId].lastActive = Date.now();\n      }\n    },\n    \n    removeComponent: (state: ComponentState, action: PayloadAction<string>) => {\n      const componentId = action.payload;\n      \n      if (state.registeredComponents[componentId]) {\n        delete state.registeredComponents[componentId];\n      }\n    }\n  }\n});\n\n// Action creators\nexport const {\n  registerComponent,\n  disconnectComponent,\n  reconnectComponent,\n  updateComponentActivity,\n  removeComponent\n} = componentSlice.actions;\n\n// Selectors\nexport const selectIsComponentActive = (state: RootState, componentId: string) => \n  state.components.registeredComponents[componentId]?.isActive || false;\n\nexport const selectAllComponents = (state: RootState) => \n  state.components.registeredComponents;\n\nexport const selectActiveComponentCount = (state: RootState) => \n  Object.values(state.components.registeredComponents)\n    .filter((comp): comp is ComponentRecord => (comp as ComponentRecord).isActive !== undefined)\n    .filter(comp => comp.isActive).length;\n\nexport default componentSlice.reducer; ","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { RootState } from '../index';\nimport { InventreeItem } from '../../types';\nimport { Logger } from '../../utils/logger';\nimport { inventreeApiService } from '../../services/inventree-api-service';\n\nconst logger = Logger.getInstance();\n\n// Define the shape of the search result item returned by the thunk\n// Matching the one in searchSlice.ts\ntype SearchResultItem = Pick<InventreeItem, 'pk' | 'name' | 'thumbnail'>;\n\n// Thunk action to perform a part search via the API\nexport const performSearch = createAsyncThunk<\n  SearchResultItem[], // Return type on success\n  string, // Argument type (search query)\n  { state: RootState; rejectValue: string } // ThunkAPI config\n>(\n  'search/perform', // Action type prefix\n  async (query, thunkAPI) => {\n    // API config is handled internally by inventreeApiService\n\n    try {\n      logger.log('performSearch', `Searching for: \"${query}\"`, { level: 'debug' });\n\n      // Use the new service to get parts based on the search query\n      const results: InventreeItem[] = await inventreeApiService.getParts({ search: query });\n\n      // Map full results to the simplified SearchResultItem shape\n      const simplifiedResults: SearchResultItem[] = results.map(part => ({\n        pk: part.pk,\n        name: part.name,\n        thumbnail: part.thumbnail || undefined, // Ensure consistency with type\n      }));\n\n      logger.log('performSearch', `Search successful, found ${simplifiedResults.length} results.`);\n      return simplifiedResults;\n\n    } catch (error: any) {\n      const errorMessage = error.message || 'Failed to perform search';\n      logger.error('performSearch', `Search failed: ${errorMessage}`, error);\n      // Ensure error is serializable\n      return thunkAPI.rejectWithValue(typeof error === 'string' ? error : errorMessage);\n    }\n  }\n);\n\nexport const searchInventree = createAsyncThunk<\n    InventreeItem[], // Return type\n    string,          // Argument type (search query)\n    { state: RootState } // Thunk config\n>(\n    'search/searchInventree',\n    async (query, { getState, rejectWithValue }) => {\n        const state = getState();\n        // Config is no longer in Redux state.\n        // API details need to be accessed differently.\n        // Option 1: Assume API is already initialized elsewhere (e.g., inventree-card.ts)\n        // Option 2: Pass API config as part of the thunk argument (less ideal)\n        // Option 3: Create a separate slice to hold API instance/config (better)\n\n        // For now, we attempt to create a new API instance here, but this is NOT ideal.\n        // Ideally, the initialized API instance should be retrieved from somewhere.\n        // This requires refactoring how the API instance is managed.\n        logger.warn('searchInventree Thunk', 'Attempting to create API instance inside thunk - this should be refactored.');\n\n        // Placeholder: How do we get URL/API key here now?\n        // We might need to reject if the info isn't available.\n        // const { url, apiKey } = /* Get from somewhere? */;\n        // if (!url || !apiKey) {\n        //    logger.error('searchInventree Thunk', 'API URL/Key not available.');\n        //    return rejectWithValue('API configuration not available');\n        // }\n\n        try {\n            // This instantiation will fail without url/apiKey\n            // const api = new InvenTreeDirectAPI(url, apiKey);\n            // const results = await api.searchPart(query);\n\n            // --- TEMPORARY MOCK --- \n            // Remove this when API access is fixed\n            logger.warn('searchInventree Thunk', 'Using MOCKED API response');\n            await new Promise(resolve => setTimeout(resolve, 500)); // Simulate network delay\n            const mockResults: InventreeItem[] = query.toLowerCase().includes('resistor') ? \n                [ { pk: 101, name: 'Resistor 1k', in_stock: 100, thumbnail: '' }, { pk: 102, name: 'Resistor 10k', in_stock: 50, thumbnail: '' } ] :\n                [];\n            // --- END MOCK --- \n\n            logger.log('searchInventree Thunk', `Search for \"${query}\" returned ${mockResults.length} results.`);\n            return mockResults; // Use mockResults for now\n        } catch (error: any) {\n            logger.error('searchInventree Thunk', `Search failed: ${error.message || error}`);\n            return rejectWithValue(error.message || 'Search failed');\n        }\n    }\n); \n\n// REMOVE THIS BLOCK related to old API\n/*\nexport const searchParts = createAsyncThunk<\n    InventreeItem[],\n    { query: string, category?: string },\n    { state: RootState, rejectWithValue: string }\n>(\n    'search/searchParts',\n    async ({ query, category }, { getState, rejectWithValue }) => {\n        // Temporary config - replace with actual config access\n        const tempApiConfig = { url: 'TEMP_URL', apiKey: 'TEMP_KEY' }; \n        const api = new InvenTreeDirectAPI(tempApiConfig.url, tempApiConfig.apiKey);\n\n        try {\n            const results = await api.searchParts(query, category);\n            return results;\n        } catch (error: any) {\n            return rejectWithValue(error.message);\n        }\n    }\n);\n*/","import { createSlice, PayloadAction, ActionReducerMapBuilder } from '@reduxjs/toolkit';\nimport { InventreeItem } from '../../types'; // Assuming search results might be simplified items\nimport { RootState } from '../index';\nimport { Logger } from '../../utils/logger';\nimport { performSearch } from '../thunks/searchThunks'; // Import the thunk\n\nconst logger = Logger.getInstance();\n\n// Define the shape of the search result item if needed (could be just part ID)\ntype SearchResultItem = Pick<InventreeItem, 'pk' | 'name' | 'thumbnail'>; // Example: pk, name, thumbnail\n\ninterface SearchState {\n  query: string;\n  results: SearchResultItem[];\n  loading: 'idle' | 'pending' | 'succeeded' | 'failed';\n  error: string | null;\n}\n\nconst initialState: SearchState = {\n  query: '',\n  results: [],\n  loading: 'idle',\n  error: null,\n};\n\nconst searchSlice = createSlice({\n  name: 'search',\n  initialState,\n  reducers: {\n    setSearchQuery: (state: SearchState, action: PayloadAction<string>) => {\n      state.query = action.payload;\n      // Optionally reset results/status when query changes\n      // state.results = [];\n      // state.loading = 'idle';\n      // state.error = null;\n      logger.log('searchSlice', `Search query set to: \"${action.payload}\"`, { level: 'debug' });\n    },\n    clearSearch: (state: SearchState) => {\n      state.query = '';\n      state.results = [];\n      state.loading = 'idle';\n      state.error = null;\n      logger.log('searchSlice', 'Search state cleared.', { level: 'debug' });\n    },\n  },\n  // Add extraReducers for handling the search thunk actions\n  extraReducers: (builder: ActionReducerMapBuilder<SearchState>) => {\n    builder\n      .addCase(performSearch.pending, (state: SearchState) => {\n        state.loading = 'pending';\n        state.error = null;\n         logger.log('searchSlice', 'Search pending...', { level: 'debug' });\n      })\n      .addCase(performSearch.fulfilled, (state: SearchState, action: PayloadAction<SearchResultItem[]>) => {\n        state.loading = 'succeeded';\n        state.results = action.payload;\n        state.error = null;\n         logger.log('searchSlice', `Search succeeded with ${action.payload.length} results.`, { level: 'debug' });\n      })\n      .addCase(performSearch.rejected, (state: SearchState, action: PayloadAction<any>) => {\n        state.loading = 'failed';\n        state.error = action.payload as string ?? 'Search failed';\n        state.results = [];\n         logger.error('searchSlice', `Search failed: ${state.error}`);\n      });\n  }\n});\n\nexport const {\n  setSearchQuery,\n  clearSearch,\n} = searchSlice.actions;\n\n// Selectors\nexport const selectSearchQuery = (state: RootState): string => state.search.query;\nexport const selectSearchResults = (state: RootState): SearchResultItem[] => state.search.results;\nexport const selectSearchLoading = (state: RootState): 'idle' | 'pending' | 'succeeded' | 'failed' => state.search.loading;\nexport const selectSearchError = (state: RootState): string | null => state.search.error;\nexport const selectHasSearchResults = (state: RootState): boolean => state.search.results.length > 0;\n\nexport default searchSlice.reducer; ","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../index';\nimport { Logger } from '../../utils/logger';\n\nconst logger = Logger.getInstance();\n\n// Interface for a single visual effect applicable to a part\nexport interface VisualEffect {\n  isVisible?: boolean;\n  highlight?: string; // e.g., color code like '#RRGGBB' or 'red'\n  textColor?: string; // e.g., color code\n  border?: string; // e.g., CSS border string like \"2px solid red\"\n  opacity?: number; // 0.0 to 1.0\n  // Add other style-related effect types as needed\n  icon?: string; // mdi icon name to display\n  badge?: string; // text for a badge overlay\n  // Effects that might influence layout or other non-CSS properties\n  isExpanded?: boolean; // For expandable sections within a part display\n  customClasses?: string[]; // Array of CSS class names to apply\n}\n\n// Interface for the state of this slice\nexport interface VisualEffectsState {\n  effectsByPartId: Record<number, VisualEffect>; // Stores active VisualEffect objects keyed by partId\n  // We could add more state here if needed, e.g., global default effects\n}\n\nconst initialState: VisualEffectsState = {\n  effectsByPartId: {},\n};\n\nconst visualEffectsSlice = createSlice({\n  name: 'visualEffects',\n  initialState,\n  reducers: {\n    // Sets or merges an effect for a specific part\n    setVisualEffect(state: VisualEffectsState, action: PayloadAction<{ partId: number; effect: Partial<VisualEffect> }>) {\n      const { partId, effect } = action.payload;\n      if (!state.effectsByPartId[partId]) {\n        state.effectsByPartId[partId] = {};\n      }\n      // Merge the new partial effect with any existing effects for that part\n      state.effectsByPartId[partId] = { ...state.effectsByPartId[partId], ...effect };\n      logger.log('visualEffectsSlice', `Visual effect set/merged for part ${partId}.`, { partId, newEffect: effect, level: 'debug' });\n    },\n\n    // Replaces the entire batch of effects. Useful for re-evaluation results.\n    setVisualEffectsBatch(state: VisualEffectsState, action: PayloadAction<Record<number, VisualEffect>>) {\n      state.effectsByPartId = action.payload;\n      logger.log('visualEffectsSlice', 'Visual effects batch updated.', { count: Object.keys(action.payload).length, level: 'debug' });\n    },\n\n    // Clears any visual effect for a specific part, reverting it to default appearance\n    clearVisualEffect(state: VisualEffectsState, action: PayloadAction<number>) {\n      const partId = action.payload;\n      delete state.effectsByPartId[partId];\n      logger.log('visualEffectsSlice', `Visual effects cleared for part ${partId}.`, { partId, level: 'debug' });\n    },\n\n    // Clears all visual effects for all parts\n    clearAllVisualEffects(state: VisualEffectsState) {\n      state.effectsByPartId = {};\n      logger.log('visualEffectsSlice', 'All visual effects cleared.', { level: 'debug' });\n    },\n  },\n});\n\nexport const {\n  setVisualEffect,\n  setVisualEffectsBatch,\n  clearVisualEffect,\n  clearAllVisualEffects,\n} = visualEffectsSlice.actions;\n\n// Selectors\nexport const selectAllVisualEffects = (state: RootState): Record<number, VisualEffect> => state.visualEffects.effectsByPartId;\n\nexport const selectVisualEffectForPart = (state: RootState, partId: number): VisualEffect | undefined => state.visualEffects.effectsByPartId[partId];\n\n// Example of a more specific selector if needed:\n// export const selectPartVisibility = (state: RootState, partId: number): boolean => {\n//   const effect = state.visualEffects.effectsByPartId[partId];\n//   return effect?.isVisible !== undefined ? effect.isVisible : true; // Default to visible\n// };\n\nexport default visualEffectsSlice.reducer; ","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../index';\nimport { Logger } from '../../utils/logger';\nimport { ViewType, ParameterCondition, ParameterAction, PerformanceConfig, HierarchicalDebugConfig } from '../../types'; // Assuming these types exist or will be consolidated\n\nconst logger = Logger.getInstance();\n\n// Sub-state interfaces based on the roadmap\n\n// 3.1 Data Sources\ninterface DataSourceApiConfig {\n  enabled: boolean;\n  url: string | null;\n  apiKey: string | null;\n  websocketUrl: string | null;\n}\n\ninterface DataSourceBindingTarget {\n  contextName: string;\n}\n\ninterface DataSourceBinding {\n  entityId: string;\n  type: 'state' | 'attribute';\n  attributeName?: string;\n  target: DataSourceBindingTarget;\n}\n\ninterface DataSourceRefreshConfig {\n  pollingInterval: number; // seconds\n  websocketEnabled: boolean;\n  cacheLifetime: number; // seconds for API-sourced data\n}\n\ninterface InventreeParameterFetchConfig {\n  targetPartIds: number[] | 'all_loaded';\n  parameterNames: string[] | '*';\n  fetchOnlyIfUsed?: boolean;\n}\n\ninterface DataSourcesState {\n  primary: {\n    entityId: string | null;\n  };\n  additional: {\n    entities: string[];\n    directPartIds: number[];\n    categories: number[];\n  };\n  inventreeParametersToFetch: InventreeParameterFetchConfig[];\n  api: DataSourceApiConfig;\n  bindings: Record<string, DataSourceBinding>; // Keyed by a unique binding ID\n  refresh: DataSourceRefreshConfig;\n}\n\n// 3.2 Object Transformations\ninterface ObjectFilterRule {\n  name: string;\n  expressionId: string;\n  enabled?: boolean;\n}\n\ninterface DerivedPropertyRule {\n  propertyName: string;\n  expressionId: string;\n  enabled?: boolean;\n}\n\ninterface SortingRule {\n  propertyName: string;\n  direction: 'asc' | 'desc';\n  enabled?: boolean;\n}\n\ninterface GroupingRule {\n  groupByProperty: string | null; // Changed to allow null for no grouping\n  enabled?: boolean;\n  // ... more options for grouping in future\n}\n\ninterface ObjectTransformationsState {\n  filters: ObjectFilterRule[];\n  derivedProperties: DerivedPropertyRule[];\n  sorting: SortingRule[];\n  grouping: GroupingRule;\n  resolveVariants?: boolean; // TBD or implicit\n}\n\n// 3.3 Expression Engine\ninterface ExpressionSource {\n  type: 'parameter' | 'part_attribute' | 'entity_binding';\n  id: string; // Parameter name, attribute name, or binding contextName\n  property?: string; // Optional sub-property accessor\n}\n\ninterface ExpressionDefinition {\n  id: string; // The unique expressionId (key of the record)\n  name: string; // User-friendly name\n  type: 'comparison' | 'logical_and' | 'logical_or' | 'logical_not';\n  source?: ExpressionSource; // For comparison type\n  operator?: string; // For comparison type (e.g., '==', '>', 'contains')\n  value?: any; // For comparison type\n  operands?: string[]; // Array of other expressionIds for AND/OR\n  operand?: string; // Single expressionId for NOT\n}\n\ntype ExpressionsState = Record<string, ExpressionDefinition>; // Key is expressionId\n\n// 3.4 Presentation\n// Assuming VisualEffect is defined in types.d.ts (as it's used by visualEffectsSlice)\n// If not, it would need to be defined here or imported.\n// For now, let's assume it's:\ninterface VisualEffect {\n  isVisible?: boolean;\n  highlight?: string;\n  textColor?: string;\n  border?: string;\n  opacity?: number;\n  icon?: string;\n  badge?: string;\n  customClasses?: string[];\n  // isExpanded?: boolean; // From visualEffectsSlice, might be relevant\n}\n\n\ninterface ConditionalRule {\n  id: string; // Unique ruleId (key of the record)\n  name: string;\n  expressionId: string;\n  priority?: number;\n  effects: Partial<VisualEffect>;\n  targetElements?: string[]; // Advanced: for targeting sub-elements\n}\n\ninterface PresentationState {\n  viewType: ViewType | string; // Allow string for custom view types\n  layout: Record<string, any>; // ViewType-specific nested settings, e.g., layout.grid: { columns: 3 }\n  display: Record<string, boolean>; // e.g., display.showImage: true\n  styling: Record<string, string>; // e.g., styling.backgroundColor: \"var(--ha-card-background)\"\n  conditionalRules: Record<string, ConditionalRule>; // Key is ruleId\n}\n\n// 3.5 Interactions\ninterface InteractionButtonVisibilityConditions {\n  expressionIds: string[];\n  logic: 'AND' | 'OR';\n}\n\ninterface InteractionButton {\n  id: string; // Unique buttonId (key of the record)\n  label: string;\n  icon?: string;\n  actionType: 'call-service'; // Initially just HA service calls\n  service?: string; // For 'call-service'\n  serviceData?: Record<string, any>; // For 'call-service'\n  confirmationRequired?: boolean;\n  confirmationText?: string;\n  visibilityConditions?: InteractionButtonVisibilityConditions;\n}\n\ninterface InteractionsState {\n  buttons: Record<string, InteractionButton>; // Key is buttonId\n  // Future: onClick, onLongPress actions\n}\n\n// 3.6 System Settings\ninterface SystemDebugConfig {\n    enabled: boolean;\n    verbose: boolean;\n    // Assuming HierarchicalDebugConfig is defined in types.d.ts\n    // If not, it would look like:\n    // hierarchical: Record<string, { enabled?: boolean; subsystems?: Record<string, boolean> }>;\n    hierarchical?: HierarchicalDebugConfig;\n}\n\ninterface SystemState {\n  // Assuming PerformanceConfig is defined in types.d.ts\n  performance: PerformanceConfig;\n  debug: SystemDebugConfig;\n  // Operational settings like cache clear, WS reconnect might be handled by UI triggering thunks/actions\n  // rather than being stored in configSlice directly, unless there are persistent states for them.\n}\n\n\n// Main ConfigState\nexport interface ConfigState {\n  dataSources: DataSourcesState;\n  objectTransformations: ObjectTransformationsState;\n  expressions: ExpressionsState;\n  presentation: PresentationState;\n  interactions: InteractionsState;\n  system: SystemState;\n  // Meta-data for the config itself\n  configVersion?: string;\n  lastSaved?: string; // ISO string\n}\n\n// Initial State\nexport const initialDataSourcesState: DataSourcesState = {\n  primary: { entityId: null },\n  additional: {\n    entities: [],\n    directPartIds: [],\n    categories: [],\n  },\n  inventreeParametersToFetch: [],\n  api: {\n    enabled: false,\n    url: null,\n    apiKey: null,\n    websocketUrl: null,\n  },\n  bindings: {},\n  refresh: {\n    pollingInterval: 300, // Default 5 minutes\n    websocketEnabled: true,\n    cacheLifetime: 60,    // Default 1 minute\n  },\n};\n\nexport const initialObjectTransformationsState: ObjectTransformationsState = {\n  filters: [],\n  derivedProperties: [],\n  sorting: [],\n  grouping: { groupByProperty: null, enabled: false },\n  resolveVariants: false,\n};\n\nexport const initialExpressionsState: ExpressionsState = {};\n\nexport const initialPresentationState: PresentationState = {\n  viewType: 'detail', // Default view type\n  layout: {}, // e.g. { grid: { columns: 3 } } based on viewType\n  display: { // Default visibility for common elements\n    showImage: true,\n    showName: true,\n    showStock: true,\n    showDescription: false,\n    showCategory: false,\n    showIPN: false,\n    showLocation: false,\n    showButtonsArea: true, // General toggle for buttons region\n    showParametersSection: true, // For the collapsible parameters section in detail views\n  },\n  styling: {\n    // Default card-wide styles can go here if needed\n    // e.g., backgroundColor: 'var(--ha-card-background)'\n  },\n  conditionalRules: {},\n};\n\nexport const initialInteractionsState: InteractionsState = {\n  buttons: {},\n};\n\nexport const initialSystemState: SystemState = {\n  performance: { // Default performance settings\n    rendering: {\n        debounceTime: 50,\n        idleRenderInterval: 5000,\n        maxRenderFrequency: 10,\n    },\n    websocket: {\n        reconnectInterval: 5000,\n        messageDebounce: 50,\n    },\n    api: {\n        throttle: 0.2, // seconds\n        cacheLifetime: 60, // seconds\n        batchSize: 20,\n        failedRequestRetryDelaySeconds: 30,\n    },\n    parameters: {\n        updateFrequency: 1000,\n        conditionEvalFrequency: 1000,\n    },\n  },\n  debug: {\n    enabled: false,\n    verbose: false,\n    hierarchical: {},\n  },\n};\n\nexport const initialState: ConfigState = {\n  dataSources: initialDataSourcesState,\n  objectTransformations: initialObjectTransformationsState,\n  expressions: initialExpressionsState,\n  presentation: initialPresentationState,\n  interactions: initialInteractionsState,\n  system: initialSystemState,\n  configVersion: '1.0.0', // Initial version\n  lastSaved: undefined,\n};\n\n// Slice definition\nconst configSlice = createSlice({\n  name: 'config',\n  initialState,\n  reducers: {\n    // Action to set the entire configuration, e.g., when loading from HA storage\n    setFullConfig(state: ConfigState, action: PayloadAction<ConfigState>) {\n      // Deep merge could be considered, but for full overwrite:\n      // return action.payload; // This replaces the state.\n      // For a safer merge that preserves sections if not in payload:\n      Object.assign(state, action.payload);\n      state.lastSaved = new Date().toISOString();\n      logger.log('configSlice', 'Full configuration set and updated lastSaved.', { newConfig: action.payload });\n    },\n    // Example of a reducer to update a specific section\n    setDataSourcesConfig(state: ConfigState, action: PayloadAction<Partial<DataSourcesState>>) {\n      state.dataSources = { ...state.dataSources, ...action.payload };\n      state.lastSaved = new Date().toISOString();\n      logger.log('configSlice', 'DataSources configuration updated.', { updates: action.payload });\n    },\n    setObjectTransformationsConfig(state: ConfigState, action: PayloadAction<Partial<ObjectTransformationsState>>) {\n      state.objectTransformations = { ...state.objectTransformations, ...action.payload };\n      state.lastSaved = new Date().toISOString();\n    },\n    setExpressionsConfig(state: ConfigState, action: PayloadAction<ExpressionsState>) { // Expressions usually replaced entirely\n      state.expressions = action.payload;\n      state.lastSaved = new Date().toISOString();\n    },\n    setPresentationConfig(state: ConfigState, action: PayloadAction<Partial<PresentationState>>) {\n      state.presentation = { ...state.presentation, ...action.payload };\n      state.lastSaved = new Date().toISOString();\n    },\n    setInteractionsConfig(state: ConfigState, action: PayloadAction<Partial<InteractionsState>>) {\n      state.interactions = { ...state.interactions, ...action.payload };\n      state.lastSaved = new Date().toISOString();\n    },\n    setSystemConfig(state: ConfigState, action: PayloadAction<Partial<SystemState>>) {\n      // Deep merge for performance and debug settings might be needed\n      if (action.payload.performance) {\n        state.system.performance = { ...state.system.performance, ...action.payload.performance };\n      }\n      if (action.payload.debug) {\n        state.system.debug = { ...state.system.debug, ...action.payload.debug };\n      }\n      state.lastSaved = new Date().toISOString();\n    },\n    // Reducer to update only the API config part of DataSources\n    setApiConfig(state: ConfigState, action: PayloadAction<Partial<DataSourceApiConfig>>) {\n        state.dataSources.api = { ...state.dataSources.api, ...action.payload };\n        state.lastSaved = new Date().toISOString();\n        logger.log('configSlice', 'API configuration within DataSources updated.', { updates: action.payload });\n    },\n    // Add more specific reducers as needed for fine-grained updates\n    // e.g., addBinding, removeBinding, updateExpression, addConditionalRule etc.\n  },\n});\n\nexport const {\n  setFullConfig,\n  setDataSourcesConfig,\n  setObjectTransformationsConfig,\n  setExpressionsConfig,\n  setPresentationConfig,\n  setInteractionsConfig,\n  setSystemConfig,\n  setApiConfig,\n} = configSlice.actions;\n\n// Selectors\nexport const selectFullConfig = (state: RootState): ConfigState => state.config;\nexport const selectDataSourcesConfig = (state: RootState): DataSourcesState => state.config.dataSources;\nexport const selectApiFromDataSources = (state: RootState): DataSourceApiConfig => state.config.dataSources.api;\nexport const selectObjectTransformationsConfig = (state: RootState): ObjectTransformationsState => state.config.objectTransformations;\nexport const selectExpressions = (state: RootState): ExpressionsState => state.config.expressions;\nexport const selectPresentationConfig = (state: RootState): PresentationState => state.config.presentation;\nexport const selectInteractionsConfig = (state: RootState): InteractionsState => state.config.interactions;\nexport const selectSystemConfig = (state: RootState): SystemState => state.config.system;\nexport const selectPerformanceConfig = (state: RootState): PerformanceConfig => state.config.system.performance;\nexport const selectDebugConfig = (state: RootState): SystemDebugConfig => state.config.system.debug;\n\nexport default configSlice.reducer; ","import { Middleware } from '@reduxjs/toolkit';\nimport { RootState } from '../index';\nimport { Logger } from '../../utils/logger';\nimport { store } from '../index';\n\n/**\n * Redux middleware for comprehensive logging\n * \n * This middleware logs:\n * 1. All Redux actions with their payload\n * 2. State changes after actions (when in verbose mode)\n * 3. Performance metrics for actions\n * \n * Logging is controlled by the 'logReduxEvents' feature flag and the Logger configuration\n */\nconst logger = Logger.getInstance();\n\nexport const loggingMiddleware: Middleware = \n  (api) => \n  (next) => \n  (action) => {\n    // Start timing the action\n    const startTime = performance.now();\n    \n    // Log the action being dispatched\n    logger.log('Redux Middleware', `🚀 Action Dispatched: ${action.type}`, {\n        category: 'redux',\n        subsystem: 'action',\n        data: action.payload\n    });\n    \n    // Call the next middleware in the chain\n    const result = next(action);\n    \n    // Log the time taken for the action\n    const endTime = performance.now();\n    const duration = endTime - startTime;\n    logger.log('Redux Middleware', `⏱️ Action Completed: ${action.type} (${duration.toFixed(2)}ms)`, {\n        category: 'redux',\n        subsystem: 'performance'\n    });\n    \n    // Log state changes if the 'redux' system and 'state' subsystem are enabled\n    if (logger.isEnabled('redux', 'state')) {\n        const nextState = api.getState();\n        logger.log('Redux Middleware', `🔄 State After Action: ${action.type}`, {\n            category: 'redux',\n            subsystem: 'state',\n            data: nextState // Be cautious logging full state in production\n        });\n    }\n    \n    return result;\n  }; ","import { Middleware } from '@reduxjs/toolkit';\nimport { RootState } from '../index';\nimport { CacheService } from '../../services/cache';\nimport { Logger } from '../../utils/logger';\nimport { store } from '../index';\nimport { updateParameterValue } from '../thunks/parameterThunks';\n\n/**\n * Middleware to bridge Redux with existing InvenTree services\n * \n * This middleware allows us to:\n * 1. Gradually migrate from service singletons to Redux\n * 2. Keep existing functionality working during transition\n * 3. Sync data between old and new state systems\n */\nconst logger = Logger.getInstance();\n\nexport const servicesMiddleware: Middleware = \n  (api) => \n  (next) => \n  (action) => {\n  logger.log('Redux', `Action dispatched: ${action.type}`, { \n    category: 'redux', \n    subsystem: 'middleware' \n  });\n\n  // Process actions that need to interact with existing services\n  if (action.type === 'parts/fetchParts/fulfilled') {\n    const { entityId, data } = action.payload;\n    \n    // Keep Cache update logic (maybe refine later)\n    const cache = CacheService.getInstance();\n    const cacheKey = `entity-data:${entityId}`;\n    cache.set(cacheKey, data);\n    \n    logger.log('Redux', `Updated service data for entity ${entityId}`, { \n      category: 'redux', \n      subsystem: 'sync' \n    });\n  }\n  \n  // For parameter updates\n  if (action.type === 'parameters/updateValue') {\n    const { partId: updatePartId, parameterName: updateParamName, value: updateValue } = action.payload;\n    store.dispatch(updateParameterValue({ partId: updatePartId, parameterName: updateParamName, value: updateValue }));\n    logger.log('Redux', `Dispatched updateParameterValue thunk for ${updateParamName}`, { /* ... */ });\n  }\n  \n  // For parameter condition checks\n  if (action.type === 'parameters/checkCondition') {\n    const { part, condition } = action.payload;\n    \n    logger.log('Redux', `Checking condition for part ${part?.pk}`, { \n      category: 'redux', \n      subsystem: 'parameters',\n      condition\n    });\n    \n    // We don't need to do anything, this is just for tracking\n  }\n  \n  // For condition cache clearing\n  if (action.type === 'parameters/clearConditionCache' || action.type === 'parameters/clearCache') {\n    logger.log('Redux', `Clearing parameter cache`, { \n      category: 'redux', \n      subsystem: 'parameters' \n    });\n    \n    // If we have a parameter service, clear its cache\n    // if (ParameterService.hasInstance()) {\n    //   const paramService = ParameterService.getInstance();\n    //   paramService.clearConditionCache();\n    //   \n    //   // Also dispatch a cache cleared event to notify components\n    //   window.dispatchEvent(new CustomEvent('inventree-cache-cleared'));\n    // }\n  }\n  \n  // Continue the action through the middleware chain\n  return next(action);\n}; ","import { Middleware } from '@reduxjs/toolkit';\nimport { clearTimersForComponent } from '../slices/timerSlice';\n\n/**\n * Middleware to handle timer-related side effects\n * \n * This middleware:\n * 1. Listens for component disconnect actions\n * 2. Cleans up all timers for disconnected components\n */\nexport const timerMiddleware: Middleware = store => next => action => {\n  // Handle component disconnection\n  if (action.type === 'components/disconnectComponent') {\n    const componentId = action.payload;\n    \n    // Clean up all timers for this component\n    store.dispatch(clearTimersForComponent(componentId));\n  }\n  \n  return next(action);\n}; ","/**\n * Redux Middleware for managing the WebSocketPlugin connection \n * based on the card configuration state.\n */\nimport { Middleware } from '@reduxjs/toolkit';\nimport { MiddlewareAPI, Dispatch, UnknownAction } from 'redux';\nimport { RootState } from '../index';\nimport { setWebSocketStatus, webSocketMessageReceived } from '../slices/websocketSlice'; // Corrected path\nimport { updateValue as updateParameterValueInStore } from '../slices/parametersSlice';\nimport { WebSocketPlugin } from '../../services/websocket-plugin';\nimport { Logger } from '../../utils/logger';\nimport { setParts, partStockUpdateFromWebSocket, fetchPartDetails } from '../slices/partsSlice'; // Added partStockUpdateFromWebSocket and fetchPartDetails\nimport { WebSocketEventMessage, EnhancedStockItemEventData, EnhancedParameterEventData } from '../../types'; // Import new types\nimport { evaluateAndApplyConditions } from '../thunks/parameterThunks';\n\nconst logger = Logger.getInstance();\n// let isWebSocketInitialized = false; // This flag is not currently used in the provided snippet, commented out to avoid lint error\n\n// Module-scoped variables for throttling condition evaluation\nlet lastEvalDispatchTime = 0;\nlet evalScheduledTimeoutId: ReturnType<typeof setTimeout> | null = null;\n\nexport const websocketMiddleware: Middleware = (storeAPI: MiddlewareAPI<Dispatch<UnknownAction>, RootState>) => (next: Dispatch<UnknownAction>) => (action: UnknownAction) => {\n    const result = next(action);\n\n    if (webSocketMessageReceived.match(action)) {\n        // Cast the payload to our specific WebSocketEventMessage type\n        const message = action.payload as WebSocketEventMessage;\n\n        // Basic validation of the overall message structure\n        if (typeof message === 'object' && message !== null && \n            message.type === 'event' && \n            typeof message.event === 'string' && \n            typeof message.data === 'object' && message.data !== null) {\n            \n            const eventName = message.event;\n            const eventData = message.data; // This is now typed as a union or Record<string,any>\n\n            logger.log('WebSocketMiddleware', `Processing event: ${eventName}`, { eventData, level: 'info' });\n\n            // Handle Parameter Updates\n            if (eventName.includes('part_partparameter.saved') || eventName.includes('part_partparameter.created')) {\n                // Type cast eventData for parameter events\n                const paramData = eventData as EnhancedParameterEventData;\n                logger.log('WebSocketMiddleware', 'Parameter event data:', { data: paramData, level: 'debug' });\n                \n                const partId = paramData.part_pk ?? paramData.parent_id; \n                const paramName = paramData.parameter_name;\n                const paramValue = paramData.parameter_value;\n                \n                if (partId !== undefined && paramName !== undefined && paramValue !== undefined) {\n                    logger.log('WebSocketMiddleware', `Dispatching parameters/updateValue (direct action) for Part ${partId}, Param ${paramName} to value ${paramValue}`, { level: 'info' });\n                    // Dispatch the synchronous action from parametersSlice directly\n                    storeAPI.dispatch(updateParameterValueInStore({ \n                        partId: Number(partId),\n                        paramName: String(paramName),\n                        value: String(paramValue),\n                        source: 'websocket' // Add source for clarity in logs\n                    }));\n\n                    // TEMPORARY TEST: Introduce a small delay to ensure store update has settled\n                    setTimeout(() => {\n                        // After updating the parameter value, re-evaluate conditions, but throttled.\n                        const state = storeAPI.getState();\n                        // Assuming InventreeCardConfig is stored in state.parameters.config based on parametersSlice.setConfig\n                        // If your main card config is stored elsewhere (e.g., a root config slice), adjust this path.\n                        const cardConfig = state.parameters.config; \n                        const conditionEvalFrequency = cardConfig?.performance?.parameters?.conditionEvalFrequency ?? 1000;\n                        const now = Date.now();\n\n                        if (evalScheduledTimeoutId) {\n                            clearTimeout(evalScheduledTimeoutId);\n                            evalScheduledTimeoutId = null;\n                            logger.log('WebSocketMiddleware', 'Cleared pending (trailing) evaluateAndApplyConditions call due to new trigger.', { level: 'silly' });\n                        }\n\n                        if (now - lastEvalDispatchTime > conditionEvalFrequency) {\n                            logger.log('WebSocketMiddleware', `Dispatching evaluateAndApplyConditions (direct). Interval: ${conditionEvalFrequency}ms. lastEval: ${lastEvalDispatchTime}, now: ${now}`, { level: 'info' });\n                            storeAPI.dispatch(evaluateAndApplyConditions() as any); // Cast to any if thunk type causes issues with dispatch\n                            lastEvalDispatchTime = now;\n                        } else {\n                            const delay = Math.max(0, conditionEvalFrequency - (now - lastEvalDispatchTime));\n                            logger.log('WebSocketMiddleware', `Throttling evaluateAndApplyConditions. Scheduling trailing call. Delay: ${delay}ms. lastEval: ${lastEvalDispatchTime}, now: ${now}`, { level: 'info' });\n                            evalScheduledTimeoutId = setTimeout(() => {\n                                logger.log('WebSocketMiddleware', `Dispatching evaluateAndApplyConditions (trailing call). Interval: ${conditionEvalFrequency}ms.`, { level: 'info' });\n                                storeAPI.dispatch(evaluateAndApplyConditions() as any); // Cast to any\n                                lastEvalDispatchTime = Date.now();\n                                evalScheduledTimeoutId = null;\n                            }, delay);\n                        }\n                    }, 0); // 0ms delay, effectively pushing to next tick\n                } else {\n                    logger.warn('WebSocketMiddleware', 'Received parameter update, but missing key data fields.', { paramData });\n                }\n            } \n            // Handle Stock Updates\n            else if (eventName.includes('stock_stockitem.saved') || eventName.includes('stock_stockitem.created')) {\n                // Type cast eventData for stock events\n                const stockData = eventData as EnhancedStockItemEventData;\n                const partId = stockData.part_id;\n                \n                if (partId !== undefined) {\n                    logger.log('WebSocketMiddleware', `Dispatching partStockUpdateFromWebSocket for Part ${partId}`);\n                    storeAPI.dispatch(partStockUpdateFromWebSocket({\n                        partId: Number(partId),\n                        quantity: stockData.quantity,\n                        batch: stockData.batch,\n                        serial: stockData.serial,\n                        status_label: stockData.status_label,\n                        status_value: stockData.status_value,\n                        last_updated: stockData.last_updated,\n                        part_name: stockData.part_name,\n                        part_ipn: stockData.part_ipn,\n                        part_thumbnail: stockData.part_thumbnail,\n                        location_id: stockData.location_id,\n                        location_name: stockData.location_name,\n                        location_pathstring: stockData.location_pathstring,\n                        stockItemId: stockData.id \n                    }));\n                    \n                    logger.log('WebSocketMiddleware', `Dispatching fetchPartDetails for Part ${partId} due to stock event.`);\n                    storeAPI.dispatch(fetchPartDetails(Number(partId)));\n\n                } else {\n                    logger.warn('WebSocketMiddleware', 'Received stock update, but missing part_id.', { stockData });\n                }\n            }\n            else {\n                 logger.log('WebSocketMiddleware', `Received unhandled event type: ${eventName}`, { eventData });\n            }\n        } else {\n            logger.warn('WebSocketMiddleware', 'Received webSocketMessageReceived action, but payload was not a valid WebSocketEventMessage structure', { payload: action.payload });\n        }\n    }\n\n    // Handle explicit connect/disconnect actions if needed later\n    // For now, assuming connection is managed by WebSocketManager/Plugin directly\n    // or via actions dispatched from the UI layer that this middleware could listen to.\n    if (action.type === 'websocket/connect') {\n        logger.log('WebSocket Middleware', 'Explicit connect action received (currently informational)');\n        // const wsPlugin = WebSocketPlugin.getInstance();\n        // wsPlugin.connect(); // Ensure plugin is configured before connecting\n    } else if (action.type === 'websocket/disconnect') {\n        logger.log('WebSocket Middleware', 'Explicit disconnect action received (currently informational)');\n        // const wsPlugin = WebSocketPlugin.getInstance();\n        // wsPlugin.disconnect();\n    }\n\n    return result;\n}; ","import { Middleware } from '@reduxjs/toolkit';\nimport { RootState } from '../index';\nimport { Logger } from '../../utils/logger';\n\nconst logger = Logger.getInstance();\n// Use NodeJS.Timeout for standard setTimeout return type\nconst debounceTimers = new Map<string, NodeJS.Timeout>();\n\n// Configuration for debouncing specific actions\nconst debounceConfig: { [actionType: string]: number } = {\n    'parameters/webSocketUpdateReceived': 250, // Debounce parameter updates from WebSocket by 250ms\n    // Add other actions to debounce here\n};\n\n// Let TypeScript infer the parameter types (api, next, action)\nexport const debounceMiddleware: Middleware =\n  (api) => \n  (next) => \n  (action) => {\n    const actionType = action.type;\n\n    // Check if this action type needs debouncing\n    if (debounceConfig[actionType]) {\n      const debounceTime = debounceConfig[actionType];\n      \n      // Create a unique key for this action instance (e.g., based on payload)\n      // Simple approach: use action type + stringified payload (might be too broad)\n      const debounceKey = `${actionType}:${JSON.stringify(action.payload || {})}`;\n      \n      logger.log('DebounceMiddleware', `Debouncing action: ${actionType}, Key: ${debounceKey}, Time: ${debounceTime}ms`);\n      \n      // Clear existing timer for this key, if any\n      if (debounceTimers.has(debounceKey)) {\n        clearTimeout(debounceTimers.get(debounceKey)!);\n      }\n      \n      // Set a new timer\n      const timerId = setTimeout(() => {\n        logger.log('DebounceMiddleware', `Executing debounced action: ${actionType}, Key: ${debounceKey}`);\n        debounceTimers.delete(debounceKey);\n        next(action); // Dispatch the action after the debounce period\n      }, debounceTime);\n      \n      // Store the timer ID\n      debounceTimers.set(debounceKey, timerId);\n      \n      // Don't pass the action to the next middleware immediately\n      return; \n    }\n\n    // If the action doesn't need debouncing, pass it through immediately\n    return next(action);\n  }; ","import { Middleware } from '@reduxjs/toolkit';\nimport { RootState } from '../index';\nimport { trackUsage } from '../../utils/metrics-tracker';\nimport { Logger } from '../../utils/logger';\n// import { MetricsService } from '../../services/metrics'; // Import if a real service exists\n\nconst logger = Logger.getInstance();\n// const metricsService = MetricsService.getInstance(); // Get instance if service exists\n\nconst metricsMiddleware: Middleware = \n    (api) => \n    (next) => \n    (action) => {\n    // Let the action pass through first\n    const result = next(action);\n\n    // Check if this is a metrics tracking action\n    if (action.type === 'metrics/trackEvent') {\n        const { category, action: eventAction, label, value } = action.payload;\n        try {\n            trackUsage(category, eventAction, { label, value, source: 'redux' });\n            logger.log('MetricsMiddleware', `Tracked event: ${category}/${eventAction}`, { category: 'metrics', data: action.payload });\n        } catch (error) {\n            logger.error('MetricsMiddleware', `Error tracking usage: ${error}`, { category: 'metrics', error });\n        }\n    }\n    \n    // Return the result of the next middleware\n    return result;\n    };\n\nexport default metricsMiddleware; ","import { configureStore } from '@reduxjs/toolkit';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport partsReducer from './slices/partsSlice';\nimport parametersReducer from './slices/parametersSlice';\nimport uiReducer from './slices/uiSlice';\nimport timerReducer from './slices/timerSlice';\nimport websocketReducer from './slices/websocketSlice';\nimport componentReducer from './slices/componentSlice';\nimport searchReducer from './slices/searchSlice';\nimport apiReducer from './slices/apiSlice';\nimport visualEffectsReducer from './slices/visualEffectsSlice';\nimport configReducer from './slices/configSlice';\nimport { loggingMiddleware } from './middleware/logging-middleware';\nimport { servicesMiddleware } from './middleware/services-middleware';\nimport { timerMiddleware } from './middleware/timer-middleware';\nimport { websocketMiddleware } from './middleware/websocketMiddleware';\nimport { debounceMiddleware } from './middleware/debounceMiddleware';\nimport metricsMiddleware from './middleware/metricsMiddleware';\n\n// Define types for middleware\ntype GetDefaultMiddlewareType = ReturnType<typeof configureStore>['dispatch'];\n\nexport const store = configureStore({\n  reducer: {\n    parts: partsReducer,\n    parameters: parametersReducer,\n    ui: uiReducer,\n    timers: timerReducer,\n    websocket: websocketReducer,\n    components: componentReducer,\n    search: searchReducer,\n    api: apiReducer,\n    visualEffects: visualEffectsReducer,\n    config: configReducer,\n  },\n  // @ts-ignore - Ignore the TypeScript error for getDefaultMiddleware\n  middleware: (getDefaultMiddleware) => {\n    // Use object notation style for TypeScript compatibility\n    return getDefaultMiddleware({\n      serializableCheck: false,\n    }).concat(loggingMiddleware, servicesMiddleware, timerMiddleware, websocketMiddleware, debounceMiddleware, metricsMiddleware);\n  }\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\n// Use throughout the app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n\n","import { InventreeItem } from '../types';\nimport { Logger } from '../utils/logger';\nimport { trackUsage } from '../utils/metrics-tracker';\nimport { store } from '../store'; // Import Redux store\nimport { selectApiCacheLifetimeMs } from '../store/slices/apiSlice'; // Import selector\n\n/**\n * Default TTL values for different types of cache entries\n */\nexport const DEFAULT_TTL = {\n    ENTITY_DATA: 30000,     // 30 seconds for entity data\n    PARAMETER: 60000,       // 1 minute for parameters\n    RENDER_DEDUP: 300,      // 300ms for render deduplication\n    WS_DEDUP: 500,          // 500ms for websocket deduplication\n    CONDITION: 2000,        // 2 seconds for condition evaluations\n    FALLBACK: 60000         // 1 minute default\n};\n\n/**\n * Cache entry categories for better management\n */\nexport enum CacheCategory {\n    ENTITY = 'entity',\n    PARAMETER = 'parameter',\n    RENDER = 'render',\n    WEBSOCKET = 'websocket',\n    CONDITION = 'condition',\n    GENERAL = 'general'\n}\n\n/**\n * Enhanced cache service with TTL support, category management,\n * and better cache coordination between services\n */\nexport class CacheService {\n    private static instance: CacheService;\n    private cache = new Map<string, { value: any; timestamp: number; ttl: number; category: CacheCategory }>();\n    private logger: Logger;\n    private _fallbackValues: Map<string, any> = new Map();\n    private _missCallbacks: Map<string, () => Promise<any>> = new Map();\n    private _pruneIntervalId: NodeJS.Timeout | null = null;\n    private _isDestroyed: boolean = false;\n    private _useRedux: boolean = true;\n    \n    // Private constructor for singleton\n    private constructor() {\n        this.logger = Logger.getInstance();\n        \n        try {\n            // Assume Redux timer management is always enabled now\n            this._useRedux = true;\n            \n            this.logger.log('CacheService', 'CacheService instance created');\n            \n            // Track initialization in metrics\n            trackUsage('cache', 'initialize', { \n                source: this._useRedux ? 'redux' : 'legacy'\n            });\n        } catch (error) {\n            // Fallback initialization if feature flags are not available\n            this._useRedux = false;\n            \n            this.logger.error('Cache', 'Error during feature flag check, using fallback timer implementation', {\n                category: 'cache',\n                subsystem: 'errors',\n                error\n            });\n        }\n        \n        // Schedule regular pruning using standard setInterval\n        this._startPruneInterval();\n    }\n    \n    /**\n     * Start the prune interval timer\n     * This is separated to allow better control over timer creation\n     */\n    private _startPruneInterval(): void {\n        if (this._isDestroyed) {\n            return;\n        }\n        \n        // Don't create a new timer if one already exists\n        if (this._pruneIntervalId !== null) {\n            return;\n        }\n        \n        try {\n            // Track usage of timer in metrics\n            trackUsage('cache', 'startPruneInterval', { \n                source: this._useRedux ? 'redux' : 'legacy'\n            });\n            \n            this._pruneIntervalId = setInterval(() => {\n                if (!this._isDestroyed) {\n                    this.prune();\n                }\n            }, 60000); // Check every minute\n            \n            this.logger.log('Cache', 'Prune interval started', { \n                category: 'cache',\n                subsystem: this._useRedux ? 'redux' : 'legacy'\n            });\n        } catch (error) {\n            this.logger.error('Cache', `Failed to start prune interval: ${error}`, { \n                category: 'cache',\n                subsystem: 'errors'\n            });\n            \n            // Attempt to use native setTimeout as fallback\n            if (!this._pruneIntervalId) {\n                try {\n                    this._pruneIntervalId = setTimeout(() => {\n                        if (!this._isDestroyed) {\n                            this.prune();\n                        }\n                    }, 60000) as unknown as NodeJS.Timeout;\n                    \n                    this.logger.log('Cache', 'Prune interval started with fallback timer', { \n                        category: 'cache'\n                    });\n                } catch (fallbackError) {\n                    this.logger.error('Cache', `Failed to start fallback prune interval: ${fallbackError}`, { \n                        category: 'cache',\n                        subsystem: 'errors'\n                    });\n                }\n            }\n        }\n    }\n    \n    static getInstance(): CacheService {\n        if (!CacheService.instance) {\n            CacheService.instance = new CacheService();\n        }\n        return CacheService.instance;\n    }\n    \n    /**\n     * Set a value in the cache with TTL\n     * @param key Cache key\n     * @param value Value to cache\n     * @param ttlMs Time to live in milliseconds\n     * @param category Optional category for better organization\n     */\n    set(key: string, value: any, ttlMs?: number, category: CacheCategory = CacheCategory.GENERAL): void {\n        if (this._isDestroyed) return;\n        \n        trackUsage('cache', 'set', { \n            category,\n            source: this._useRedux ? 'redux' : 'legacy'\n        });\n\n        let effectiveTtlMs = ttlMs;\n\n        if (effectiveTtlMs === undefined) { // If no specific TTL is provided by the caller\n            if (category === CacheCategory.ENTITY || category === CacheCategory.PARAMETER) {\n                const configuredCacheLifetimeMs = selectApiCacheLifetimeMs(store.getState());\n                if (configuredCacheLifetimeMs > 0) {\n                    effectiveTtlMs = configuredCacheLifetimeMs;\n                    this.logger.log('Cache', `Using configured API cache lifetime for ${key}: ${effectiveTtlMs}ms`, { category: 'cache', subsystem: category });\n                } else {\n                    // Fallback to category-specific defaults if store value is 0 or not sensible\n                    effectiveTtlMs = (category === CacheCategory.ENTITY) ? DEFAULT_TTL.ENTITY_DATA : DEFAULT_TTL.PARAMETER;\n                    this.logger.log('Cache', `Using default API cache lifetime for ${key}: ${effectiveTtlMs}ms (configured was ${configuredCacheLifetimeMs}ms)`, { category: 'cache', subsystem: category });\n                }\n            } else {\n                // For non-API categories, use existing key-prefix based guessing or general fallback\n                if (key.startsWith('render:')) {\n                    effectiveTtlMs = DEFAULT_TTL.RENDER_DEDUP;\n                } else if (key.startsWith('ws-') || key.startsWith('websocket:')) { // Added websocket: prefix\n                    effectiveTtlMs = DEFAULT_TTL.WS_DEDUP;\n                } else if (key.startsWith('condition:')) {\n                    effectiveTtlMs = DEFAULT_TTL.CONDITION;\n                } else {\n                    effectiveTtlMs = DEFAULT_TTL.FALLBACK;\n                }\n            }\n        } else if (ttlMs === DEFAULT_TTL.FALLBACK && (category === CacheCategory.ENTITY || category === CacheCategory.PARAMETER)){\n            // If TTL was explicitly passed as DEFAULT_TTL.FALLBACK for an API category, also try to use configured value\n            // This handles cases where old code might pass DEFAULT_TTL.FALLBACK explicitly for API items\n            const configuredCacheLifetimeMs = selectApiCacheLifetimeMs(store.getState());\n            if (configuredCacheLifetimeMs > 0) {\n                effectiveTtlMs = configuredCacheLifetimeMs;\n            } \n            // else it remains DEFAULT_TTL.FALLBACK as passed\n        }\n        \n        // Ensure a valid TTL is always used\n        if (typeof effectiveTtlMs !== 'number' || effectiveTtlMs <= 0) {\n            this.logger.warn('Cache', `Invalid or zero TTL determined for key ${key}. Using fallback TTL: ${DEFAULT_TTL.FALLBACK}ms`, { category: 'cache', subsystem: category, determinedTtl: effectiveTtlMs });\n            effectiveTtlMs = DEFAULT_TTL.FALLBACK;\n        }\n\n        this.cache.set(key, { value, timestamp: Date.now(), ttl: effectiveTtlMs, category });\n        this.logger.log('Cache', `Set ${key}, expires in ${effectiveTtlMs}ms`, { category: 'cache', subsystem: category });\n    }\n    \n    /**\n     * Get a value from the cache with fallback support\n     * @param key Cache key\n     * @param useFallback Whether to use fallback value if available\n     * @returns Cached value or undefined if not found or expired\n     */\n    get<T>(key: string, useFallback: boolean = true): T | undefined {\n        const entry = this.cache.get(key);\n        \n        if (!entry) {\n            this.logger.log('Cache', `Miss: ${key} (not found)`, { category: 'cache' });\n            \n            // Try to reload from cache miss callback\n            this._handleCacheMiss(key);\n            \n            // Return fallback if available and requested\n            if (useFallback && this._fallbackValues.has(key)) {\n                const fallbackValue = this._fallbackValues.get(key);\n                this.logger.log('Cache', `Using fallback for ${key}`, { category: 'cache' });\n                return fallbackValue as T;\n            }\n            \n            return undefined;\n        }\n        \n        // Check if expired\n        if (entry.timestamp + entry.ttl < Date.now()) {\n            this.cache.delete(key);\n            this.logger.log('Cache', `Miss: ${key} (expired)`, { category: 'cache', subsystem: entry.category });\n            \n            // Try to reload from cache miss callback\n            this._handleCacheMiss(key);\n            \n            // Return fallback if available and requested\n            if (useFallback && this._fallbackValues.has(key)) {\n                const fallbackValue = this._fallbackValues.get(key);\n                this.logger.log('Cache', `Using fallback for ${key} (expired)`, { category: 'cache' });\n                return fallbackValue as T;\n            }\n            \n            return undefined;\n        }\n        \n        // Update fallback value with fresh data\n        if (useFallback) {\n            this._fallbackValues.set(key, entry.value);\n        }\n        \n        this.logger.log('Cache', `Hit: ${key}`, { category: 'cache', subsystem: entry.category });\n        return entry.value as T;\n    }\n    \n    /**\n     * Handle cache miss by calling registered callback if exists\n     */\n    private _handleCacheMiss(key: string): void {\n        if (this._missCallbacks.has(key)) {\n            const callback = this._missCallbacks.get(key);\n            if (callback) {\n                this.logger.log('Cache', `Executing miss callback for ${key}`, { category: 'cache' });\n                \n                // Execute callback and update cache\n                callback().then(value => {\n                    if (value !== undefined) {\n                        // Determine appropriate TTL based on key pattern\n                        let ttl = DEFAULT_TTL.FALLBACK;\n                        if (key.startsWith('entity-data:')) ttl = DEFAULT_TTL.ENTITY_DATA;\n                        \n                        this.set(key, value, ttl);\n                        this.logger.log('Cache', `Miss callback successfully updated ${key}`, { category: 'cache' });\n                    }\n                }).catch(error => {\n                    this.logger.error('Cache', `Error in miss callback for ${key}: ${error}`, { category: 'cache' });\n                });\n            }\n        }\n    }\n    \n    /**\n     * Register a callback for cache miss handling\n     * @param keyPattern Key pattern to match (exact key or prefix with *)\n     * @param callback Function to execute on cache miss\n     */\n    registerMissCallback(keyPattern: string, callback: () => Promise<any>): void {\n        this._missCallbacks.set(keyPattern, callback);\n        this.logger.log('Cache', `Registered miss callback for ${keyPattern}`, { category: 'cache' });\n    }\n    \n    /**\n     * Set a fallback value that will be used when cache misses\n     * @param key Cache key\n     * @param value Fallback value\n     */\n    setFallback(key: string, value: any): void {\n        this._fallbackValues.set(key, value);\n        this.logger.log('Cache', `Set fallback value for ${key}`, { category: 'cache' });\n    }\n    \n    /**\n     * Check if a key exists in the cache and is not expired\n     * @param key Cache key\n     * @returns True if valid cache entry exists\n     */\n    has(key: string): boolean {\n        const entry = this.cache.get(key);\n        \n        if (!entry) {\n            return false;\n        }\n        \n        // Check if expired\n        if (entry.timestamp + entry.ttl < Date.now()) {\n            this.cache.delete(key);\n            return false;\n        }\n        \n        return true;\n    }\n    \n    /**\n     * Update TTL for an existing cache entry without changing the value\n     * @param key Cache key\n     * @param ttlMs New TTL in milliseconds\n     * @returns True if entry was found and updated\n     */\n    updateTTL(key: string, ttlMs: number): boolean {\n        if (this._isDestroyed) return false;\n        \n        const entry = this.cache.get(key);\n        if (!entry) {\n            return false;\n        }\n        \n        const expires = Date.now() + ttlMs;\n        this.cache.set(key, { ...entry, ttl: ttlMs });\n        this.logger.log('Cache', `Updated TTL for ${key}, new expiry in ${ttlMs}ms`, { category: 'cache' });\n        return true;\n    }\n    \n    /**\n     * Refresh an entity cache entry with new TTL\n     * @param entityId Entity ID to refresh\n     * @returns True if entry was found and refreshed\n     */\n    refreshEntityCache(entityId: string): boolean {\n        const key = `entity-data:${entityId}`;\n        return this.updateTTL(key, DEFAULT_TTL.ENTITY_DATA);\n    }\n    \n    /**\n     * Delete a key from the cache\n     * @param key Cache key\n     */\n    delete(key: string): void {\n        const entry = this.cache.get(key);\n        this.cache.delete(key);\n        \n        if (entry) {\n            this.logger.log('Cache', `Deleted ${key}`, { category: 'cache', subsystem: entry.category });\n        } else {\n            this.logger.log('Cache', `Attempted to delete non-existent key: ${key}`, { category: 'cache' });\n        }\n    }\n    \n    /**\n     * Clear all expired entries from the cache\n     */\n    prune(): void {\n        const now = Date.now();\n        let pruned = 0;\n        const categoryCount: Record<string, number> = {};\n        \n        for (const [key, entry] of this.cache.entries()) {\n            if (entry.timestamp + entry.ttl < now) {\n                this.cache.delete(key);\n                pruned++;\n                \n                // Track count by category\n                const category = entry.category || CacheCategory.GENERAL;\n                categoryCount[category] = (categoryCount[category] || 0) + 1;\n            }\n        }\n        \n        if (pruned > 0) {\n            const categoryDetails = Object.entries(categoryCount)\n                .map(([cat, count]) => `${cat}: ${count}`)\n                .join(', ');\n                \n            this.logger.log('Cache', `Pruned ${pruned} expired entries (${categoryDetails})`, { category: 'cache' });\n        }\n    }\n    \n    /**\n     * Clear the entire cache\n     */\n    clear(): void {\n        const size = this.cache.size;\n        this.cache.clear();\n        this._fallbackValues.clear();\n        this.logger.log('Cache', `Cleared ${size} entries`, { category: 'cache' });\n    }\n    \n    /**\n     * Get statistics about the cache\n     */\n    getStats(): { \n        size: number, \n        expired: number,\n        byCategory: Record<string, number>,\n        fallbackCount: number\n    } {\n        const now = Date.now();\n        let expired = 0;\n        const byCategory: Record<string, number> = {};\n        \n        for (const [key, entry] of this.cache.entries()) {\n            // Count by category\n            const category = entry.category || CacheCategory.GENERAL;\n            byCategory[category] = (byCategory[category] || 0) + 1;\n            \n            // Count expired\n            if (entry.timestamp + entry.ttl < now) {\n                expired++;\n            }\n        }\n        \n        return {\n            size: this.cache.size,\n            expired,\n            byCategory,\n            fallbackCount: this._fallbackValues.size\n        };\n    }\n    \n    /**\n     * Get all keys in the cache\n     */\n    getKeys(): string[] {\n        return Array.from(this.cache.keys());\n    }\n    \n    /**\n     * Clear cache entries by pattern\n     * @param pattern String pattern to match against keys\n     * @returns Number of entries cleared\n     */\n    clearPattern(pattern: string): number {\n        let count = 0;\n        const keysToDelete = [];\n        \n        // First build a list of keys to delete\n        for (const key of this.cache.keys()) {\n            if (key.includes(pattern)) {\n                keysToDelete.push(key);\n                count++;\n            }\n        }\n        \n        // Then delete them\n        for (const key of keysToDelete) {\n            const entry = this.cache.get(key);\n            this.cache.delete(key);\n            \n            if (entry) {\n                this.logger.log('Cache', `Deleted ${key} by pattern match`, { \n                    category: 'cache', \n                    subsystem: entry.category \n                });\n            }\n        }\n        \n        this.logger.log('Cache', `Cleared ${count} entries matching pattern: ${pattern}`, { category: 'cache' });\n        return count;\n    }\n    \n    /**\n     * Clear all entity data cache entries\n     */\n    clearEntityCache(): number {\n        return this.clearPattern('entity-data:');\n    }\n    \n    /**\n     * Clear all condition cache entries\n     */\n    clearConditionCache(): number {\n        return this.clearPattern('condition:');\n    }\n    \n    /**\n     * Clear all render deduplication entries\n     */\n    clearRenderCache(): number {\n        return this.clearPattern('render:');\n    }\n    \n    /**\n     * Clear all websocket deduplication entries\n     */\n    clearWebSocketCache(): number {\n        const count1 = this.clearPattern('ws-');\n        const count2 = this.clearPattern('websocket:');\n        return count1 + count2;\n    }\n    \n    /**\n     * Clean up resources used by the cache service\n     */\n    public destroy(): void {\n        this._isDestroyed = true;\n        \n        // Track cache service destruction\n        trackUsage('cache', 'destroy', { \n            source: this._useRedux ? 'redux' : 'legacy' \n        });\n        \n        // Clean up all timers\n        if (this._pruneIntervalId !== null) {\n            try {\n                clearInterval(this._pruneIntervalId);\n            } catch (error) {\n                this.logger.error('Cache', `Error clearing prune interval: ${error}`, {\n                    category: 'cache',\n                    subsystem: 'errors'\n                });\n            }\n            this._pruneIntervalId = null;\n        }\n\n        // Clear cache data\n        this.clear();\n        \n        this.logger.log('Cache', 'Cache service destroyed and resources released', { \n            category: 'cache',\n            subsystem: this._useRedux ? 'redux' : 'legacy'\n        });\n    }\n}\n\n// Add TypeScript type for TimerId to avoid type errors\ntype TimerId = string | number;\n\nexport {}; // Add this to fix isolatedModules error"],"names":["logger","Logger","getInstance","trackUsage","category","action","data","source","log","Object","assign","subsystem","error","formatProdErrorMessage","code","symbol_observable_default","Symbol","observable","randomString","Math","random","toString","substring","split","join","actionTypes_default","INIT","REPLACE","PROBE_UNKNOWN_ACTION","isPlainObject","obj","proto","getPrototypeOf","createStore","reducer","preloadedState","enhancer","Error","arguments","currentReducer","currentState","currentListeners","Map","nextListeners","listenerIdCounter","isDispatching","ensureCanMutateNextListeners","forEach","listener","key","set","getState","subscribe","isSubscribed","listenerId","delete","dispatch","type","replaceReducer","nextReducer","outerSubscribe","observer","observeState","observerAsObserver","next","unsubscribe","this","combineReducers","reducers","reducerKeys","keys","finalReducers","i","length","finalReducerKeys","shapeAssertionError","assertReducerShape","e","state","hasChanged","nextState","previousStateForKey","nextStateForKey","compose","funcs","arg","reduce","a","b","args","NOTHING","for","DRAFTABLE","DRAFT_STATE","die","isDraft","value","isDraftable","Array","isArray","constructor","isMap","isSet","objectCtorString","prototype","Ctor","hasOwnProperty","call","Function","each","iter","getArchtype","Reflect","ownKeys","entry","index","thing","type_","has","prop","propOrOldValue","t","add","target","Set","latest","copy_","base_","shallowCopy","base","strict","slice","isPlain","descriptors","getOwnPropertyDescriptors","desc","writable","configurable","get","enumerable","create","freeze","deep","isFrozen","clear","dontMutateFrozenCollections","entries","currentScope","plugins","getPlugin","pluginKey","plugin","getCurrentScope","usePatchesInScope","scope","patchListener","patches_","inversePatches_","patchListener_","revokeScope","leaveScope","drafts_","revokeDraft","parent_","enterScope","immer2","immer_","canAutoFreeze_","unfinalizedDrafts_","draft","revoke_","revoked_","processResult","result","baseDraft","modified_","finalize","maybeFreeze","generateReplacementPatches_","rootScope","path","childValue","finalizeProperty","scope_","finalized_","resultEach","isSet2","generatePatches_","parentState","targetObject","rootPath","targetIsSet","res","assigned_","concat","autoFreeze_","propertyIsEnumerable","objectTraps","getDescriptorFromProto","draft_","readPropFromProto","peek","prepareCopy","createProxy","current2","x","y","markChanged","Number","isNaN","deleteProperty","getOwnPropertyDescriptor","owner","defineProperty","setPrototypeOf","arrayTraps","useStrictShallowCopy_","fn","apply","parent","proxyMap_","proxySet_","isManual_","traps","revoke","proxy","Proxy","revocable","createProxyProxy","push","currentImpl","copy","immer","config","produce","recipe","defaultBase","self","base2","hasError","p","ip","produceWithPatches","patches","inversePatches","autoFreeze","setAutoFreeze","useStrictShallowCopy","setUseStrictShallowCopy","createDraft","current","finishDraft","applyPatches","patch","op","applyPatchesImpl","applyPatches_","bind","ensureIsArray","item","getDependencies","createSelectorArgs","dependencies","array","errorMessage","every","itemTypes","map","name","TypeError","assertIsArrayOfFunctions","Ref","WeakRef","deref","weakMapMemoize","func","options","fnNode","s","v","o","resultEqualityCheck","lastResult","resultsCount","memoized","cacheNode","l","objectCache","WeakMap","objectNode","primitiveCache","primitiveNode","terminatedNode","lastResultValue","clearCache","resetResultsCount","createSelectorCreator","memoizeOrOptions","memoizeOptionsFromArgs","createSelectorCreatorOptions","memoize","memoizeOptions","createSelector2","recomputations","dependencyRecomputations","directlyPassedOptions","resultFunc","pop","assertIsFunction","combinedOptions","argsMemoize","argsMemoizeOptions","devModeChecks","finalMemoizeOptions","finalArgsMemoizeOptions","memoizedResultFunc","selector","inputSelectorResults","inputSelectorArgs","collectInputSelectorResults","resetDependencyRecomputations","resetRecomputations","withTypes","createSelector","createStructuredSelector","inputSelectorsObject","selectorCreator","object","assertIsObject","inputSelectorKeys","composition","createThunkMiddleware","extraArgument","thunk","withExtraArgument","composeWithDevTools","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","createAction","prepareAction","actionCreator","prepared","payload","meta","match","isAction","Tuple","_Tuple","items","super","species","arr","prepend","freezeDraftable","val","createNextState","getOrInsertComputed","compute","createQueueWithTimer","timeout","notify","setTimeout","buildGetDefaultEnhancers","middlewareEnhancer","autoBatch","enhancerArray","store","notifying","shouldNotifyAtEndOfTick","notificationQueued","listeners","queueCallback","queueMicrotask","requestAnimationFrame","queueNotification","notifyListeners","listener2","autoBatchEnhancer","executeReducerBuilderCallback","builderCallback","actionsMap","actionMatchers","defaultCaseReducer","builder","addCase","typeOrActionCreator","addMatcher","matcher","addDefaultCase","isAnyOf","matchers","some","matches","commonProperties","RejectWithValue","_type","FulfillWithMeta","miniSerializeError","simpleError","property","message","String","externalAbortMessage","createAsyncThunk","createAsyncThunk2","typePrefix","payloadCreator","fulfilled","requestId","requestStatus","pending","rejected","serializeError","rejectedWithValue","aborted","condition","signal","extra","idGenerator","size","id","nanoid","abortController","AbortController","abortHandler","abortReason","abort","reason","addEventListener","once","promise","async","finalAction","conditionResult","then","abortedPromise","Promise","_","reject","getPendingMeta","race","resolve","rejectWithValue","fulfillWithValue","err","removeEventListener","dispatchConditionRejection","unwrap","unwrapResult","settled","asyncThunkSymbol","getType","actionKey","buildCreateSlice","creators","cAT","asyncThunk","reducerPath","_reducerDefinitionType","caseReducer","preparedReducer","prepare","buildReducerCreators","reducerNames","context","sliceCaseReducersByName","sliceCaseReducersByType","actionCreators","sliceMatchers","contextMethods","reducer2","exposeAction","name2","exposeCaseReducer","buildReducer","extraReducers","finalCaseReducers","initialState","mapOrBuilderCallback","getInitialState","finalActionMatchers","finalDefaultCaseReducer","frozenInitialState","caseReducers","filter","cr","previousState","isDraft2","isDraftable2","createNextState2","createReducer","sM","m","reducerName","reducerDefinition","reducerDetails","createNotation","isAsyncThunkSliceReducerDefinition","maybeReducerWithPrepare","prepareCallback","isCaseReducerWithPrepareDefinition","handleNormalReducerDefinition","noop","handleThunkCaseReducerDefinition","selectSelf","injectedSelectorCache","injectedStateCache","_reducer","makeSelectorProps","reducerPath2","injected","selectSlice","sliceState","getSelectors","selectState","selectorCache","selectors","wrapSelector","actions","injectInto","injectable","pathOpt","newReducerPath","inject","wrapper","rootState","unwrapped","createSlice","WLEDService","hass","console","debug","toggleLED","entityId","forwardHaptic","states","callService","entity_id","locatePart","part","positionParam","_b","_a","parameters","find","template_detail","parameter_name","position","parseInt","wledEntity","wledIp","_c","ip_address","replace","isOn","url","JSON","stringify","on","bri","intensity","seg","start","stop","col","fx","inventreeApiService","lastApiCallTimestamp","lastApiFailureTimestamp","request","endpoint","apiSliceConfig","api","baseUrl","apiKey","throttleDelayMs","failedRequestRetryDelayMs","errorMsg","Date","now","endsWith","startsWith","headers","Headers","Authorization","method","level","timeSinceLastFailure","failureDelayNeeded","warn","toISOString","timeSinceLastAttempt","generalDelayNeeded","response","fetch","ok","errorData","json","text","status","statusText","responseData","getPart","partId","getParts","params","queryParams","URLSearchParams","adjustStock","relativeAmount","locationId","notes","addResult","addStockItem","pk","amountToRemove","abs","consolidateStockForPart","currentStockItems","getStockItemsForPart","currentTotalStock","sum","parseFloat","quantity","itemToRemoveFrom","removeStockItems","updatedPart","in_stock","newTotalStock","finalPartCheck","finalFetchError","getPartParameters","updatePartParameter","parameterInstancePk","newValue","body","undefined","location","stockItems","si","success","deleteStockItem","stockItemPk","targetLocationId","existingStockItems","totalQuantity","itemQuantity","consolidatedNotes","itemPksToDelete","determinedLocationId","newLocationId","firstLocatedItem","newStockItem","indexOfNew","indexOf","splice","deleteErrors","fetchPartDetails","info","directApiConfig","partData","locatePartById","parts","partsById","wledConfigFromState","resolvedConfig","services","wled","enabled","wledService","locationParameter","partsSlice","setLocatingPartId","adjustPartStock","amount","adjustmentResult","partsByEntity","loading","locatingPartId","adjustingStockPartId","adjustmentError","setParts","partIds","updatePart","updatePartStock","newStock","partToUpdate","clearParts","registerEntity","partStockUpdateFromWebSocket","otherStockData","__rest","originalStock","rejectedPartId","originalArgs","partToRevert","fetchedPart","partsReducer","selectPartsByEntityMapping","selectPartsById","selectAllParts","values","entityIds","relevantPartIds","currentPartIds","primaryEntityId","additionalEntityIds","combinedPartIds","primaryPartIds","additionalPartIds","from","initialized","cacheLifetimeMs","apiSlice","setApiConfig","cacheLifetime","failedRequestRetryDelaySeconds","throttle","failedRetryDelay","apiInitializationSuccess","apiInitializationError","clearApiConfig","selectApiInitialized","selectApiCacheLifetimeMs","apiReducer","rawConditions","rawConditionsCount","setDefinedConditions","setProcessedConditions","processedConditions","partIdsToFetch","rawCond","parameterName","paramString","parameter","parsedPartId","operator","action_value","rawConditionString","sourceParameterString","valueToCompare","actionValue","targetPartIds","currentStatus","selectParameterLoadingStatus","idsArray","fetchParametersForReferencedParts","evaluateAndApplyConditions","evalError","fetchParametersForPart","thunkAPI","apiInitialized","parametersCount","validPartIdsToFetch","results","promises","catch","settledIndividualPromises","all","partIdForContext","errorReason","errorDetail","updateParameterValue","paramName","parameterToUpdate","parametersByPartId","parameterValues","parse","allPartsById","clearConditionalPartEffects","newEffects","paramValue","conditionMet","conditionSourceString","paramValueReadFromState","currentParameterValuesForPart145","includes","conditionSource","evaluatedParamValue","comparedTo","targetPartPks","rawTargetPartIds","resolvedTargetPartPks","targetPartPksLength","effectToApply","isVisible","highlight","textColor","border","icon","badge","mergeEffect","effect","conditionAction","conditionActionValue","setConditionalPartEffectsBatch","newEffectsCount","parametersSlice","conditions","definedConditions","conditionalPartEffects","parameterLoadingStatus","parameterError","strictWebSocketMode","recentlyChanged","cache","conditionResults","lastCleared","setConditions","count","setActions","setConfig","setStrictWebSocketMode","clearConditionCache","checkCondition","updateValue","template","units","description","checkbox","choices","selectionlist","data_numeric","webSocketUpdateReceived","receivedValue","valueType","beforeValue","afterValue","_d","parameterId","addParametersForPart","updateParameterForPart","partParams","paramIndex","findIndex","param","partIdsFromThunkArg","currentStatusInState","partIdStr","paramsForPartMap","paramData","partIdsAttempted","parametersReducer","uiSlice","activeView","selectedPartId","showDebugPanel","activeTab","setActiveView","setSelectedPart","toggleDebugPanel","setDebugTab","setLoading","uiReducer","timeouts","intervals","timerSlice","timers","componentTimers","lastId","addTimer","componentId","label","startTime","delay","removeTimer","timer","clearComponentTimers","clearAllTimers","clearTimersForComponent","selectComponentTimers","clearTimeout","clearInterval","safeClearInterval","timerReducer","lastMessage","lastError","messageCount","websocketSlice","setWebSocketStatus","webSocketMessageReceived","resetWebSocketState","websocketReducer","componentSlice","registeredComponents","registerComponent","isActive","registeredAt","lastActive","disconnectComponent","reconnectComponent","updateComponentActivity","removeComponent","componentReducer","performSearch","query","simplifiedResults","search","thumbnail","mockResults","toLowerCase","searchSlice","setSearchQuery","clearSearch","searchReducer","visualEffectsSlice","effectsByPartId","setVisualEffect","newEffect","setVisualEffectsBatch","clearVisualEffect","clearAllVisualEffects","visualEffectsReducer","configSlice","dataSources","primary","additional","entities","directPartIds","categories","inventreeParametersToFetch","websocketUrl","bindings","refresh","pollingInterval","websocketEnabled","objectTransformations","filters","derivedProperties","sorting","grouping","groupByProperty","resolveVariants","expressions","presentation","viewType","layout","display","showImage","showName","showStock","showDescription","showCategory","showIPN","showLocation","showButtonsArea","showParametersSection","styling","conditionalRules","interactions","buttons","system","performance","rendering","debounceTime","idleRenderInterval","maxRenderFrequency","websocket","reconnectInterval","messageDebounce","batchSize","updateFrequency","conditionEvalFrequency","verbose","hierarchical","configVersion","lastSaved","setFullConfig","newConfig","setDataSourcesConfig","updates","setObjectTransformationsConfig","setExpressionsConfig","setPresentationConfig","setInteractionsConfig","setSystemConfig","configReducer","loggingMiddleware","duration","toFixed","isEnabled","servicesMiddleware","cacheKey","CacheService","updatePartId","updateParamName","timerMiddleware","lastEvalDispatchTime","evalScheduledTimeoutId","websocketMiddleware","storeAPI","event","eventName","eventData","part_pk","parent_id","parameter_value","updateParameterValueInStore","cardConfig","max","stockData","part_id","batch","serial","status_label","status_value","last_updated","part_name","part_ipn","part_thumbnail","location_id","location_name","location_pathstring","stockItemId","debounceTimers","debounceConfig","debounceMiddleware","actionType","debounceKey","timerId","metricsMiddleware","eventAction","getDefaultMiddleware","immutableCheck","serializableCheck","actionCreatorCheck","middlewareArray","thunkMiddleware","middleware","devTools","duplicateMiddlewareCheck","enhancers","rootReducer","finalMiddleware","isPlainObject2","finalCompose","compose2","trace","middlewares","createStore2","middlewareAPI","chain","applyMiddleware","getDefaultEnhancers","configureStore","ui","components","visualEffects","DEFAULT_TTL","ENTITY_DATA","PARAMETER","RENDER_DEDUP","WS_DEDUP","CONDITION","FALLBACK","CacheCategory","_fallbackValues","_missCallbacks","_pruneIntervalId","_isDestroyed","_useRedux","_startPruneInterval","setInterval","prune","fallbackError","instance","ttlMs","GENERAL","effectiveTtlMs","ENTITY","configuredCacheLifetimeMs","determinedTtl","timestamp","ttl","useFallback","_handleCacheMiss","fallbackValue","callback","registerMissCallback","keyPattern","setFallback","updateTTL","refreshEntityCache","pruned","categoryCount","categoryDetails","cat","getStats","expired","byCategory","fallbackCount","getKeys","clearPattern","pattern","keysToDelete","clearEntityCache","clearRenderCache","clearWebSocketCache","destroy"],"mappings":"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"}