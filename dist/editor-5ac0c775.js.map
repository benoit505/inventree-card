{"version":3,"file":"editor-5ac0c775.js","sources":["../node_modules/tslib/tslib.es6.js","../src/styles/editor.ts","../src/utils/logger.ts","../src/editors/editor.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\r\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\r\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nvar ownKeys = function(o) {\r\n    ownKeys = Object.getOwnPropertyNames || function (o) {\r\n        var ar = [];\r\n        for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\r\n        return ar;\r\n    };\r\n    return ownKeys(o);\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose, inner;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n            if (async) inner = dispose;\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    var r, s = 0;\r\n    function next() {\r\n        while (r = env.stack.pop()) {\r\n            try {\r\n                if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\r\n                if (r.dispose) {\r\n                    var result = r.dispose.call(r.value);\r\n                    if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n                }\r\n                else s |= 1;\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\r\n    if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\r\n        return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\r\n            return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\r\n        });\r\n    }\r\n    return path;\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __esDecorate: __esDecorate,\r\n    __runInitializers: __runInitializers,\r\n    __propKey: __propKey,\r\n    __setFunctionName: __setFunctionName,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n    __rewriteRelativeImportExtension: __rewriteRelativeImportExtension,\r\n};\r\n","import { css } from 'lit';\n\nexport const editorStyles = css`\n  ha-form {\n    display: block;\n    padding: 16px;\n  }\n\n  .parts-settings {\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n  }\n\n  .part-entry {\n    display: grid;\n    grid-template-columns: 1fr 1fr auto;\n    gap: 8px;\n    align-items: center;\n  }\n\n  .add-part,\n  .remove-part {\n    display: flex;\n    align-items: center;\n    gap: 4px;\n    padding: 8px;\n    border: none;\n    border-radius: 4px;\n    background: var(--primary-color);\n    color: var(--text-primary-color);\n    cursor: pointer;\n  }\n\n  .remove-part {\n    background: var(--error-color);\n  }\n\n  .add-part:hover,\n  .remove-part:hover {\n    opacity: 0.9;\n  }\n`;\n","export class Logger {\n  private static instance: Logger;\n  private debugMode: boolean = false;\n  private verboseMode: boolean = false; // New flag to control verbose output\n  private logLevel: 'none' | 'error' | 'warn' | 'info' | 'debug' = 'error';\n  \n  // Define hierarchical debug categories structure\n  private debugCategories: {\n    [system: string]: {\n      enabled: boolean;\n      subsystems: { [subsystem: string]: boolean };\n    };\n  } = {\n    api: { \n      enabled: false, \n      subsystems: { \n        calls: false,       // UI: Calls (was 'requests')\n        responses: false,   // UI: Responses\n        errors: false,      // UI: Errors\n        fallbacks: false,   // Keeping for backward compatibility\n        throttling: false   // Keeping for backward compatibility\n      }\n    },\n    parameters: { \n      enabled: false, \n      subsystems: { \n        updates: false,     // UI: Updates\n        conditions: false,  // UI: Conditions\n        filtering: false,   // UI: Filtering\n        actions: false      // UI: Actions\n      }\n    },\n    websocket: { \n      enabled: false, \n      subsystems: { \n        connection: false,  // UI: Connection\n        messages: false,    // UI: Messages\n        events: false,      // UI: Events\n        plugin: false,      // UI: Plugin\n        subscriptions: false, // Keeping for backward compatibility\n        authentication: false  // Keeping for backward compatibility\n      }\n    },\n    redux: {\n      enabled: false,\n      subsystems: {\n        actions: false,     // UI: Actions\n        state: false,       // UI: State\n        components: false,  // UI: Components\n        middleware: false,  // UI: Middleware\n        dispatch: false,    // UI: Dispatch\n        sync: false,        // UI: Sync\n        parameters: false,  // UI: Parameters\n        migration: false    // UI: Migration\n      }\n    },\n    layouts: { \n      enabled: false, \n      subsystems: { \n        rendering: false,\n        filtering: false,\n        updates: false \n      }\n    },\n    rendering: { \n      enabled: false, \n      subsystems: { \n        updates: false,     // UI: Updates\n        performance: false, // UI: Performance\n        cycle: false,       // Keeping for backward compatibility\n        debounce: false     // Keeping for backward compatibility\n      }\n    },\n    cache: { \n      enabled: false, \n      subsystems: { \n        hits: false, \n        misses: false, \n        pruning: false,\n        performance: false \n      }\n    },\n    card: { \n      enabled: false, \n      subsystems: { \n        initialization: false,\n        lifecycle: false,\n        rendering: false,\n        updates: false \n      }\n    },\n    diagnostics: { \n      enabled: false, \n      subsystems: { \n        performance: false,\n        memory: false,\n        errors: false \n      }\n    }\n  };\n  \n  // Add sequence counter for chronological tracking\n  private _logSequence: number = 0;\n  \n  // Add deduplication tracking\n  private _recentLogs: Map<string, number> = new Map();\n  private _dedupeTimeWindow: number = 2000; // 2 seconds\n  private _maxDuplicatesPerWindow: number = 1; // Only show a duplicate message once per time window\n  private _cache: any; // Will be initialized lazily\n\n  private constructor() {\n    // Lazy load the cache service to avoid circular dependencies\n    setTimeout(() => {\n      try {\n        // Now it's safe to dynamically import the CacheService\n        import(\"../services/cache\").then(module => {\n          this._cache = module.CacheService.getInstance();\n          console.info('Logger: Successfully initialized CacheService after delay');\n        });\n      } catch (e) {\n        console.warn('Logger: Could not initialize CacheService, using built-in deduplication');\n      }\n    }, 100);\n  }\n\n  public static getInstance(): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  }\n\n  /**\n   * Check if debug is enabled for a specific system and optional subsystem\n   */\n  public isEnabled(system: string, subsystem?: string): boolean {\n    // If verbose mode is disabled and no specific category is enabled, nothing should log\n    if (!this.verboseMode && !this.anyCategoryEnabled()) {\n      return false;\n    }\n    \n    // If system doesn't exist, it's not enabled\n    if (!this.debugCategories[system]) {\n      return false;\n    }\n    \n    // In verbose mode, everything is enabled regardless of individual settings\n    if (this.verboseMode) {\n      return true;\n    }\n    \n    // If system exists but is not enabled, return false\n    if (!this.debugCategories[system].enabled) {\n      return false;\n    }\n    \n    // If no subsystem specified, just check the system\n    if (!subsystem) {\n      return true;\n    }\n    \n    // If subsystem specified, check if it exists and is explicitly enabled\n    // Only return true for subsystems that are explicitly set to true\n    return this.debugCategories[system].subsystems?.[subsystem] === true;\n  }\n\n  /**\n   * Check if any category is enabled\n   */\n  private anyCategoryEnabled(): boolean {\n    return Object.keys(this.debugCategories).some(system => \n      this.debugCategories[system].enabled\n    );\n  }\n\n  /**\n   * Get the next sequence number for logs\n   */\n  private getNextSequence(): number {\n    return ++this._logSequence;\n  }\n\n  /**\n   * Set main debug mode - this enables the debug UI without enabling all logs\n   */\n  public setDebug(debug: boolean): void {\n    this.debugMode = debug;\n    \n    // Only set logLevel to debug if debug is true\n    if (debug) {\n      this.logLevel = 'debug';\n    } else {\n      this.logLevel = 'error';\n      this.verboseMode = false; // Turn off verbose mode when debug is disabled\n    }\n    console.info(`Logger debug mode ${debug ? 'ENABLED' : 'DISABLED'}`);\n  }\n  \n  /**\n   * Set verbose mode - this enables ALL logs regardless of category settings\n   */\n  public setVerboseMode(verbose: boolean): void {\n    // Verbose mode requires debug mode to be on\n    if (verbose && !this.debugMode) {\n      this.setDebug(true);\n    }\n    this.verboseMode = verbose;\n    \n    console.info(`Logger verbose mode ${verbose ? 'ENABLED - ALL categories will log' : 'DISABLED - only selected categories will log'}`);\n  }\n  \n  /**\n   * Configure debug settings from the card config\n   */\n  public setDebugConfig(config: any): void {\n    if (!config) return;\n    \n    this.setDebug(config.debug || false);\n    this.setVerboseMode(config.debug_verbose || false);\n    \n    // Process hierarchical config if available\n    if (config.debug_hierarchical) {\n      this.processHierarchicalConfig(config.debug_hierarchical);\n    } else {\n      // Fallback to individual flags if hierarchical is not present\n      this.setCategoryDebug('api', config.debug_api ?? false);\n      this.setCategoryDebug('parameters', config.debug_parameters ?? false);\n      this.setCategoryDebug('websocket', config.debug_websocket ?? false);\n      this.setCategoryDebug('layouts', config.debug_layouts ?? false);\n      this.setCategoryDebug('rendering', config.debug_rendering ?? false);\n      this.setCategoryDebug('cache', config.debug_cache ?? false);\n      this.setCategoryDebug('card', config.debug_card ?? false);\n      this.setCategoryDebug('diagnostics', config.debug_diagnostics ?? false);\n    }\n    \n    this.logConfigStatus();\n  }\n\n  /**\n   * Process hierarchical debug configuration\n   */\n  private processHierarchicalConfig(hierarchicalConfig: any): void {\n    for (const system in this.debugCategories) {\n      const systemConfig = hierarchicalConfig[system];\n      if (systemConfig) {\n        this.setCategoryDebug(system, systemConfig.enabled ?? false);\n        if (systemConfig.subsystems) {\n          for (const subsystem in systemConfig.subsystems) {\n            this.setSubsystemDebug(system, subsystem, systemConfig.subsystems[subsystem] ?? false);\n          }\n        }\n      } else {\n        // If system not in hierarchical config, default to false\n        this.setCategoryDebug(system, false);\n      }\n    }\n  }\n\n  /**\n   * Format system status for display\n   */\n  private formatSystemStatus(system: string): string {\n    if (!this.debugCategories[system]) {\n      return 'Not configured';\n    }\n    \n    const enabled = this.debugCategories[system].enabled;\n    if (!enabled) {\n      return 'Disabled';\n    }\n    \n    // Count enabled subsystems\n    const subsystems = this.debugCategories[system].subsystems;\n    const enabledSubsystems = Object.keys(subsystems).filter(s => subsystems[s]).join(', ');\n    \n    if (enabledSubsystems) {\n      return `Enabled with subsystems: ${enabledSubsystems}`;\n    } else {\n      return 'Enabled (no subsystems)';\n    }\n  }\n\n  /**\n   * Set the log level\n   */\n  public setLogLevel(level: 'none' | 'error' | 'warn' | 'info' | 'debug'): void {\n    this.logLevel = level;\n  }\n\n  /**\n   * Set debug for a category\n   */\n  public setCategoryDebug(category: string, enabled: boolean): void {\n    if (this.debugCategories[category]) {\n      this.debugCategories[category].enabled = enabled;\n    } else {\n      console.warn(`Logger: Unknown debug category '${category}'`);\n    }\n  }\n\n  /**\n   * Set debug for a specific subsystem\n   */\n  public setSubsystemDebug(system: string, subsystem: string, enabled: boolean): void {\n    if (this.debugCategories[system] && this.debugCategories[system].subsystems.hasOwnProperty(subsystem)) {\n      this.debugCategories[system].subsystems[subsystem] = enabled;\n    } else {\n      console.warn(`Logger: Unknown debug subsystem '${subsystem}' for system '${system}'`);\n    }\n  }\n\n  /**\n   * Check if a log message is a duplicate\n   */\n  private isDuplicate(key: string): boolean {\n    const now = Date.now();\n    \n    // Check if we've seen this message recently\n    const lastSeen = this._recentLogs.get(key);\n    if (lastSeen) {\n      // If it's within our time window, it's a duplicate\n      if (now - lastSeen < this._dedupeTimeWindow) {\n        return true;\n      }\n    }\n    \n    // Update the last seen time\n    this._recentLogs.set(key, now);\n    \n    // Periodically clean up old entries (every 10 logs)\n    if (this._logSequence % 10 === 0) {\n      this.pruneRecentLogs();\n    }\n    \n    return false;\n  }\n\n  /**\n   * Remove expired entries from the recent logs map\n   */\n  private pruneRecentLogs(): void {\n    const now = Date.now();\n    for (const [key, timestamp] of this._recentLogs.entries()) {\n      if (now - timestamp > this._dedupeTimeWindow) {\n        this._recentLogs.delete(key);\n      }\n    }\n  }\n\n  /**\n   * Enhanced log method with support for hierarchical categories\n   * Also maintains backward compatibility with previous API\n   */\n  public log(component: string, message: string, options?: any, ...restArgs: any[]): void {\n    // BACKWARD COMPATIBILITY HANDLING\n    // If options is an error object or any non-object, treat it as a regular argument\n    if (options && (options instanceof Error || typeof options !== 'object' || Array.isArray(options))) {\n      restArgs = [options, ...restArgs];\n      options = {}; // Convert to empty options object\n    }\n    \n    const category = options && typeof options === 'object' ? options.category : undefined;\n    const subsystem = options && typeof options === 'object' ? options.subsystem : undefined;\n    const level = options && typeof options === 'object' ? options.level || 'debug' : 'debug';\n    const performanceData = options && typeof options === 'object' ? options.performance : undefined;\n    \n    // Check if enabled based on hierarchy\n    if (category && !this.isEnabled(category, subsystem)) {\n      return;\n    }\n    \n    // For backward compatibility: if no category provided, use main debug mode\n    if (!category && !this.debugMode) {\n      return;\n    }\n    \n    // Check log level - using different logic to avoid type comparison errors\n    if (this.logLevel === 'none') return;\n    if (this.logLevel === 'error' && level !== 'error') return;\n    if (this.logLevel === 'warn' && level !== 'error' && level !== 'warn') return;\n    \n    // Create a key for deduplication\n    const logKey = `${component}:${category || 'main'}:${subsystem || ''}:${message}`;\n    \n    // Skip if duplicate\n    if (this.isDuplicate(logKey)) {\n      return;\n    }\n    \n    // Add timestamp and sequence for chronological tracking\n    const sequence = this.getNextSequence();\n    const timestamp = Date.now();\n    const timestampStr = timestamp.toString();\n    \n    // Format the component name with category if provided\n    const formattedComponent = category \n      ? (subsystem ? `${component}:${category}:${subsystem}` : `${component}:${category}`) \n      : component;\n    \n    // Format for better visual grouping\n    if (level === 'trace') {\n      console.groupCollapsed(`[${timestampStr}][${sequence}][${formattedComponent}] ${message}`);\n      \n      // Log additional args\n      if (restArgs.length > 0) {\n        console.log(...restArgs);\n      }\n      \n      // Add performance data if available\n      if (performanceData) {\n        const { startTime, duration } = performanceData;\n        if (duration) {\n          console.log(`⏱️ Duration: ${duration.toFixed(2)}ms`);\n        } else if (startTime) {\n          console.log(`⏱️ Elapsed: ${(Date.now() - startTime).toFixed(2)}ms`);\n        }\n      }\n      \n      console.groupEnd();\n    } else {\n      console.log(`🔍 [${timestampStr}][${sequence}][${formattedComponent}] ${message}`, ...restArgs);\n      \n      // Add performance data if available\n      if (performanceData) {\n        const { startTime, duration } = performanceData;\n        if (duration) {\n          console.log(`⏱️ [${timestampStr}][${sequence}][${formattedComponent}] Duration: ${duration.toFixed(2)}ms`);\n        } else if (startTime) {\n          console.log(`⏱️ [${timestampStr}][${sequence}][${formattedComponent}] Elapsed: ${(Date.now() - startTime).toFixed(2)}ms`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Log info messages\n   * Maintains backward compatibility with previous API\n   */\n  public info(component: string, message: string, ...args: any[]): void {\n    // Backward compatibility check\n    const options = args.length > 0 && typeof args[0] === 'object' && !Array.isArray(args[0]) ? args.shift() : {};\n    \n    if (this.logLevel === 'none' || this.logLevel === 'error' || this.logLevel === 'warn') return;\n    \n    const category = options?.category;\n    const subsystem = options?.subsystem;\n    \n    // Check if enabled based on hierarchy\n    if (category && !this.isEnabled(category, subsystem)) {\n      return;\n    }\n    \n    const timestamp = performance?.now().toFixed(2) || Date.now();\n    const sequence = this.getNextSequence();\n    \n    const formattedComponent = category \n      ? (subsystem ? `${component}:${category}:${subsystem}` : `${component}:${category}`) \n      : component;\n    \n    console.info(`ℹ️ [${timestamp}][${sequence}][${formattedComponent}] ${message}`, ...args);\n    \n    // Add performance data if available\n    if (options?.performance) {\n      const { startTime, duration } = options.performance;\n      if (duration) {\n        console.info(`⏱️ [${timestamp}][${sequence}][${formattedComponent}] Duration: ${duration.toFixed(2)}ms`);\n      } else if (startTime) {\n        console.info(`⏱️ [${timestamp}][${sequence}][${formattedComponent}] Elapsed: ${(Date.now() - startTime).toFixed(2)}ms`);\n      }\n    }\n  }\n\n  /**\n   * Log warning messages\n   * Maintains backward compatibility with previous API\n   */\n  public warn(component: string, message: string, ...args: any[]): void {\n    // Backward compatibility check\n    const options = args.length > 0 && typeof args[0] === 'object' && !Array.isArray(args[0]) ? args.shift() : {};\n    \n    if (this.logLevel === 'none' || this.logLevel === 'error') return;\n    \n    const category = options?.category;\n    const subsystem = options?.subsystem;\n    \n    // Always log warnings regardless of category settings\n    const timestamp = performance?.now().toFixed(2) || Date.now();\n    const sequence = this.getNextSequence();\n    \n    const formattedComponent = category \n      ? (subsystem ? `${component}:${category}:${subsystem}` : `${component}:${category}`) \n      : component;\n    \n    console.warn(`⚠️ [${timestamp}][${sequence}][${formattedComponent}] ${message}`, ...args);\n  }\n\n  /**\n   * Log error messages\n   * Maintains backward compatibility with previous API\n   */\n  public error(component: string, message: string, ...args: any[]): void {\n    // Backward compatibility: if the first arg looks like an error object, use old style\n    // Otherwise, treat first arg as options if it's an object\n    const firstArg = args.length > 0 ? args[0] : undefined;\n    const isFirstArgError = firstArg instanceof Error || \n                           (firstArg && typeof firstArg === 'object' && 'stack' in firstArg) ||\n                           typeof firstArg === 'string';\n    \n    // Extract options if present and not an error\n    const options = (!isFirstArgError && firstArg && typeof firstArg === 'object' && !Array.isArray(firstArg)) \n                   ? args.shift() \n                   : {};\n    \n    if (this.logLevel === 'none') return;\n    \n    const category = options?.category;\n    const subsystem = options?.subsystem;\n    \n    // Always log errors regardless of category settings\n    const timestamp = performance?.now().toFixed(2) || Date.now();\n    const sequence = this.getNextSequence();\n    \n    const formattedComponent = category \n      ? (subsystem ? `${component}:${category}:${subsystem}` : `${component}:${category}`) \n      : component;\n    \n    console.error(`❌ [${timestamp}][${sequence}][${formattedComponent}] ${message}`, ...args);\n  }\n\n  /**\n   * Start performance measurement\n   */\n  public startPerformance(label: string): number {\n    return Date.now();\n  }\n\n  /**\n   * End performance measurement and log it\n   */\n  public endPerformance(component: string, message: string, startTime: number, options?: { \n    category?: string, \n    subsystem?: string \n  }): void {\n    const duration = Date.now() - startTime;\n    this.log(component, message, {\n      ...options,\n      performance: { duration }\n    });\n  }\n\n  /**\n   * Reset debug configuration\n   */\n  public resetDebugConfig(): void {\n    console.log('Resetting logger config to defaults');\n    this.debugMode = false;\n    this.verboseMode = false;\n    this.logLevel = 'error';\n    \n    // Reset all categories and subsystems to false\n    for (const system in this.debugCategories) {\n      this.debugCategories[system].enabled = false;\n      \n      // Reset all subsystems\n      for (const subsystem in this.debugCategories[system].subsystems) {\n        this.debugCategories[system].subsystems[subsystem] = false;\n      }\n    }\n    \n    // Clear deduplication tracking\n    this._recentLogs.clear();\n    \n    console.info(`Logger debug settings reset - all logging disabled`);\n  }\n\n  /**\n   * Set the enabled state for a specific logging category (legacy method)\n   */\n  public setEnabled(category: string, enabled: boolean): void {\n    this.setCategoryDebug(category, enabled);\n  }\n\n  /**\n   * Get all systems with their status\n   */\n  public getSystemsStatus(): Record<string, any> {\n    const result: Record<string, any> = {};\n    \n    for (const system in this.debugCategories) {\n      const systemConfig = this.debugCategories[system];\n      \n      result[system] = {\n        enabled: systemConfig.enabled,\n        subsystems: { ...systemConfig.subsystems }\n      };\n    }\n    \n    return result;\n  }\n\n  /**\n   * Get all subsystems for a system\n   */\n  public getSubsystems(system: string): string[] {\n    if (!this.debugCategories[system]) {\n      return [];\n    }\n    \n    return Object.keys(this.debugCategories[system].subsystems);\n  }\n\n  /**\n   * For backward compatibility\n   */\n  public isCategoryEnabled(category: string): boolean {\n    return this.isEnabled(category);\n  }\n\n  // Add this method to log the final config status\n  private logConfigStatus(): void {\n    console.log('Logger configuration:');\n    console.log(`      Debug mode: ${this.debugMode} (controls debug UI view)`);\n    console.log(`      Verbose mode: ${this.verboseMode} (logs everything when true)`);\n    for (const system in this.debugCategories) {\n      const systemEnabled = this.debugCategories[system].enabled;\n      console.log(`      ${system.charAt(0).toUpperCase() + system.slice(1)}: ${systemEnabled ? 'Enabled' : 'Disabled'}`);\n      if (systemEnabled && !this.verboseMode) { // Only show subsystems if system is enabled and not in verbose\n        for (const subsystem in this.debugCategories[system].subsystems) {\n          const subEnabled = this.debugCategories[system].subsystems[subsystem];\n          console.log(`        - ${subsystem}: ${subEnabled ? 'Enabled' : 'Disabled'}`);\n        }\n      }\n    }\n  }\n}","// src/editor.ts\nimport { LitElement, html, css, nothing, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators.js\";\nimport { HomeAssistant, LovelaceCardEditor, fireEvent } from \"custom-card-helpers\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport { \n    InventreeCardConfig, \n    ViewType, \n    VariantViewType, \n    FilterConfig, \n    ParameterOperator, \n    ParameterActionType,\n    ParameterCondition,\n    ParameterAction,\n    HaEntityPickerEntity,\n    DebugConfig\n} from '../types'; // Changed import path\nimport { CARD_NAME } from \"../core/constants\";\nimport { editorStyles } from \"../styles/editor\";\nimport { mdiDelete } from '@mdi/js';\nimport { Logger } from '../utils/logger';\n\n@customElement('inventree-card-editor')\nexport class InventreeCardEditor extends LitElement implements LovelaceCardEditor {\n    static styles = [\n        editorStyles,\n        css`\n            :host {\n                --primary-color: var(--primary-text-color);\n                --secondary-color: var(--secondary-text-color);\n                --primary-background-color: var(--card-background-color);\n                --secondary-background-color: var(--secondary-background-color);\n                --border-color: var(--divider-color, rgba(0, 0, 0, 0.12));\n                --mdc-dialog-heading-ink-color: var(--primary-text-color);\n                --mdc-dialog-content-ink-color: var(--primary-text-color);\n                --dialog-background-color: var(--card-background-color);\n                --dialog-text-color: var(--primary-text-color);\n                --dialog-border-color: var(--divider-color);\n                --button-primary-color: var(--primary-color);\n                --button-primary-text-color: var(--text-primary-color);\n                --button-secondary-color: var(--secondary-background-color);\n                --button-secondary-text-color: var(--primary-text-color);\n            }\n            \n            /* Feature flag styles */\n            .feature-flag-row {\n                display: flex;\n                align-items: center;\n                margin-bottom: 8px;\n            }\n            \n            .feature-flag-row input[type=\"checkbox\"] {\n                margin-right: 8px;\n                width: auto;\n                margin-bottom: 0;\n            }\n            \n            .feature-flag-row label {\n                margin-bottom: 0;\n                cursor: pointer;\n            }\n            \n            /* Redux migration section styles */\n            .card-config-panel {\n                margin-top: 16px;\n                padding: 16px;\n                border-radius: 8px;\n                background-color: var(--secondary-background-color, rgba(0,0,0,0.05));\n            }\n            \n            .category {\n                font-size: 18px;\n                font-weight: 500;\n                margin-bottom: 16px;\n                color: var(--primary-text-color);\n                border-bottom: 1px solid var(--divider-color);\n                padding-bottom: 8px;\n            }\n            \n            .sub-category {\n                margin-bottom: 16px;\n            }\n            \n            .sub-category-title {\n                font-size: 14px;\n                font-weight: 500;\n                margin-bottom: 8px;\n                color: var(--secondary-text-color);\n            }\n            \n            .sub-category-content {\n                display: flex;\n                flex-wrap: wrap;\n                gap: 8px;\n                padding: 8px;\n                background-color: var(--card-background-color);\n                border-radius: 4px;\n            }\n            \n            .sub-category-content button {\n                padding: 6px 12px;\n                border-radius: 4px;\n                background-color: var(--secondary-background-color);\n                color: var(--primary-text-color);\n                border: 1px solid var(--divider-color);\n                cursor: pointer;\n                font-size: 12px;\n                margin-right: 8px;\n                margin-bottom: 8px;\n                transition: all 0.2s ease-in-out;\n            }\n            \n            .sub-category-content button:hover {\n                background-color: var(--primary-color);\n                color: var(--text-primary-color);\n            }\n            \n            .phase-buttons {\n                display: flex;\n                flex-direction: column;\n                align-items: flex-start;\n            }\n            \n            .phase-buttons button {\n                width: 100%;\n                text-align: left;\n                position: relative;\n                padding-left: 16px;\n            }\n            \n            .phase-buttons button.active {\n                background-color: var(--primary-color);\n                color: var(--text-primary-color);\n                font-weight: bold;\n            }\n            \n            .phase-buttons button.active::before {\n                content: '✓';\n                position: absolute;\n                left: 5px;\n                top: 50%;\n                transform: translateY(-50%);\n            }\n            /* End Redux migration section styles */\n            \n            .grid-2 {\n                display: grid;\n                grid-template-columns: repeat(2, 1fr);\n                gap: 8px;\n            }\n            \n            .section {\n                padding: 16px;\n                border-bottom: 1px solid var(--divider-color);\n            }\n            \n            .section-header {\n                font-size: 16px;\n                font-weight: 500;\n                margin-bottom: 16px;\n                color: var(--primary-text-color);\n            }\n\n            .basic-settings {\n                display: grid;\n                grid-template-columns: 2fr 1fr;\n                gap: 8px;\n                align-items: center;\n            }\n\n            .select-container {\n                display: flex;\n                flex-direction: column;\n                gap: 4px;\n            }\n            \n            select {\n                padding: 8px;\n                border-radius: 4px;\n                border: 1px solid var(--divider-color);\n                background: var(--card-background-color);\n                color: var(--primary-text-color);\n                margin-bottom: 8px;\n            }\n            \n            label {\n                color: var(--primary-text-color);\n                font-size: 0.9rem;\n            }\n\n            .grid-settings {\n                display: grid;\n                grid-template-columns: 1fr 1fr;\n                gap: 8px;\n                margin-top: 8px;\n            }\n\n            .subsection {\n                margin-top: 16px;\n                padding: 12px;\n                border: 1px solid var(--divider-color);\n                border-radius: 4px;\n                background: var(--card-background-color);\n            }\n            \n            .subsection-header {\n                font-size: 14px;\n                font-weight: 500;\n                margin-bottom: 8px;\n                color: var(--secondary-text-color);\n            }\n\n            .input-container {\n                display: flex;\n                flex-direction: column;\n                gap: 4px;\n            }\n            \n            input {\n                padding: 8px;\n                border-radius: 4px;\n                border: 1px solid var(--divider-color);\n                background: var(--card-background-color);\n                color: var(--primary-text-color);\n            }\n\n            paper-dropdown-menu {\n                width: 100%;\n            }\n            \n            paper-listbox {\n                padding: 0;\n                background: var(--paper-card-background-color);\n            }\n            \n            paper-item {\n                cursor: pointer;\n                min-height: 35px;\n            }\n            \n            paper-item:hover::before,\n            .iron-selected:before {\n                position: var(--layout-fit_-_position);\n                top: var(--layout-fit_-_top);\n                right: var(--layout-fit_-_right);\n                bottom: var(--layout-fit_-_bottom);\n                left: var(--layout-fit_-_left);\n                background: currentColor;\n                content: '';\n                opacity: var(--dark-divider-opacity);\n                pointer-events: none;\n            }\n\n            .entity-row {\n                display: flex;\n                align-items: center;\n                justify-content: space-between;\n                padding: 8px;\n                border: 1px solid var(--divider-color);\n                border-radius: 4px;\n                margin: 4px 0;\n            }\n            \n            .entity-name {\n                flex-grow: 1;\n                margin-right: 8px;\n            }\n\n            .delete-button {\n                padding: 4px 8px;\n                border-radius: 4px;\n                background-color: var(--error-color);\n                color: white;\n                border: none;\n                cursor: pointer;\n            }\n\n            .add-button {\n                padding: 6px 12px;\n                border-radius: 4px;\n                background-color: var(--primary-color);\n                color: white;\n                border: none;\n                cursor: pointer;\n                margin-bottom: 12px;\n            }\n\n            .edit-button {\n                padding: 4px 8px;\n                border-radius: 4px;\n                background-color: var(--info-color);\n                color: white;\n                border: none;\n                cursor: pointer;\n                margin-right: 4px;\n            }\n\n            select, input {\n                width: 100%;\n                padding: 8px;\n                border-radius: 4px;\n                border: 1px solid var(--divider-color);\n                background: var(--card-background-color);\n                color: var(--primary-text-color);\n                margin-bottom: 8px;\n            }\n            \n            .filter-controls {\n                display: grid;\n                grid-template-columns: 1fr 1fr 1fr auto;\n                gap: 8px;\n                width: 100%;\n            }\n            \n            .section-subheader {\n                font-size: 16px;\n                font-weight: 500;\n                margin-top: 16px;\n                margin-bottom: 8px;\n            }\n\n            .parameter-filter-config {\n                background: var(--secondary-background-color, rgba(0,0,0,0.05));\n                padding: 16px;\n                border-radius: 4px;\n                margin-top: 8px;\n                margin-bottom: 16px;\n            }\n            \n            .parameter-filter-form {\n                display: grid;\n                grid-template-columns: 1fr 1fr;\n                gap: 12px;\n                margin-top: 8px;\n            }\n            \n            .parameter-filter-form .input-container:last-of-type {\n                grid-column: 1 / -1;\n                display: flex;\n                justify-content: flex-end;\n            }\n            \n            .filter-row {\n                display: flex;\n                align-items: center;\n                justify-content: space-between;\n                padding: 8px;\n                border: 1px solid var(--divider-color);\n                border-radius: 4px;\n                margin: 4px 0;\n                background: var(--card-background-color);\n            }\n            \n            .active-filters {\n                margin-top: 16px;\n            }\n\n            .condition-row, .action-row {\n                display: flex;\n                align-items: center;\n                justify-content: space-between;\n                padding: 10px;\n                border: 1px solid var(--divider-color);\n                border-radius: 4px;\n                margin: 8px 0;\n                background: var(--card-background-color);\n            }\n\n            .condition-summary, .action-summary {\n                flex-grow: 1;\n                margin-right: 8px;\n            }\n\n            .conditions-list, .actions-list {\n                margin-top: 12px;\n            }\n\n            .dialog-overlay {\n                position: fixed;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background-color: rgba(0, 0, 0, 0.5);\n                z-index: 9999;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n            }\n\n            .dialog-container {\n                background-color: var(--dialog-background-color);\n                color: var(--dialog-text-color);\n                border-radius: 8px;\n                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n                width: 90%;\n                max-width: 500px;\n                max-height: 90vh;\n                overflow-y: auto;\n                display: flex;\n                flex-direction: column;\n            }\n\n            .dialog-header {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                padding: 16px;\n                border-bottom: 1px solid var(--dialog-border-color);\n            }\n\n            .dialog-header h2 {\n                margin: 0;\n                font-size: 18px;\n                font-weight: 500;\n            }\n\n            .close-button {\n                background: none;\n                border: none;\n                font-size: 24px;\n                cursor: pointer;\n                color: var(--dialog-text-color);\n                padding: 0;\n                margin: 0;\n                line-height: 1;\n            }\n\n            .dialog-content {\n                padding: 16px;\n                overflow-y: auto;\n                flex: 1;\n            }\n\n            .dialog-buttons {\n                display: flex;\n                justify-content: flex-end;\n                padding: 16px;\n                border-top: 1px solid var(--dialog-border-color);\n                gap: 8px;\n            }\n\n            .form-field {\n                margin-bottom: 16px;\n            }\n\n            .form-field label {\n                display: block;\n                margin-bottom: 4px;\n                font-weight: 500;\n            }\n\n            .form-field input[type=\"text\"],\n            .form-field select {\n                width: 100%;\n                padding: 8px;\n                border: 1px solid var(--dialog-border-color);\n                border-radius: 4px;\n                background-color: var(--primary-background-color);\n                color: var(--dialog-text-color);\n            }\n\n            .form-field input[type=\"color\"] {\n                width: 100%;\n                height: 40px;\n                border: 1px solid var(--dialog-border-color);\n                border-radius: 4px;\n                padding: 0;\n                cursor: pointer;\n            }\n\n            .checkbox-field {\n                display: flex;\n                align-items: center;\n            }\n            \n            .checkbox-field label {\n                margin-right: 8px;\n                margin-bottom: 0;\n            }\n            \n            .helper-text {\n                font-size: 12px;\n                color: var(--secondary-color);\n                margin-top: 4px;\n            }\n            \n            .save-button,\n            .cancel-button {\n                padding: 8px 16px;\n                border-radius: 4px;\n                border: none;\n                cursor: pointer;\n                font-weight: 500;\n            }\n            \n            .save-button {\n                background-color: var(--button-primary-color);\n                color: var(--button-primary-text-color);\n            }\n            \n            .save-button:disabled {\n                opacity: 0.5;\n                cursor: not-allowed;\n            }\n            \n            .cancel-button {\n                background-color: var(--button-secondary-color);\n                color: var(--button-secondary-text-color);\n            }\n            \n            .conditions-list,\n            .actions-list {\n                margin-top: 16px;\n            }\n            \n            .condition-item,\n            .action-item {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                padding: 8px;\n                margin-bottom: 8px;\n                background-color: var(--secondary-background-color);\n                border-radius: 4px;\n            }\n            \n            .condition-details,\n            .action-details {\n                flex: 1;\n            }\n            \n            .condition-actions,\n            .action-actions {\n                display: flex;\n                gap: 8px;\n            }\n            \n            .edit-button,\n            .delete-button {\n                background: none;\n                border: none;\n                cursor: pointer;\n                padding: 4px 8px;\n                border-radius: 4px;\n            }\n            \n            .edit-button {\n                color: var(--primary-color);\n            }\n            \n            .delete-button {\n                color: var(--error-color);\n            }\n            \n            /* Fix for dropdown issues */\n            ha-select::part(listbox) {\n                z-index: 10000;\n            }\n            \n            ha-select::part(combobox) {\n                z-index: 10000;\n            }\n            \n            ha-list-item {\n                z-index: 10000;\n            }\n\n            .section {\n                border: 1px solid var(--divider-color, #e0e0e0);\n                border-radius: 8px;\n                margin-bottom: 16px;\n                overflow: hidden;\n            }\n\n            .section-header {\n                background-color: var(--secondary-background-color, #f7f7f7);\n                padding: 8px 16px;\n                font-weight: 500;\n                border-bottom: 1px solid var(--divider-color, #e0e0e0);\n            }\n\n            .subsection {\n                border-top: 1px solid var(--divider-color, #e0e0e0);\n                margin-top: 8px;\n                padding-top: 8px;\n            }\n\n            .subsection-header {\n                font-weight: 500;\n                margin: 8px 16px;\n            }\n\n            .helper-text {\n                font-size: 0.9em;\n                margin: 4px 16px 8px;\n                color: var(--secondary-text-color, #9e9e9e);\n            }\n\n            .grid-2 {\n                display: grid;\n                grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));\n                gap: 8px;\n                padding: 8px 16px;\n            }\n\n            label {\n                display: flex;\n                align-items: center;\n                gap: 8px;\n            }\n\n            /* Hierarchical debugging styles */\n            .debug-category {\n                margin-bottom: 8px;\n                padding: 8px;\n                border-radius: 4px;\n                background-color: var(--secondary-background-color, #f7f7f7);\n            }\n\n            .main-category {\n                font-weight: 500;\n            }\n\n            .subsystem-checkboxes {\n                margin-left: 24px;\n                margin-top: 4px;\n                padding-top: 4px;\n                padding-left: 8px;\n                border-left: 1px dashed var(--divider-color, #e0e0e0);\n            }\n\n            .subsystem {\n                font-size: 0.9em;\n                margin-bottom: 4px;\n            }\n\n            /* Performance settings styles */\n            .performance-group {\n                padding: 0 16px 16px;\n            }\n\n            .performance-category {\n                margin-bottom: 16px;\n                padding: 8px;\n                border-radius: 4px;\n                background-color: var(--secondary-background-color, #f7f7f7);\n            }\n\n            .category-header {\n                font-weight: 500;\n                margin-bottom: 8px;\n            }\n\n            .slider-group {\n                display: flex;\n                align-items: center;\n                gap: 8px;\n                margin-bottom: 8px;\n            }\n\n            .slider-group input[type=\"range\"] {\n                flex: 1;\n            }\n\n            .slider-group span:first-child {\n                width: 150px;\n            }\n\n            .slider-group span:last-child {\n                width: 60px;\n                text-align: right;\n            }\n        `\n    ];\n    \n    @property({ attribute: false }) public hass?: HomeAssistant;\n    @state() private _config?: InventreeCardConfig;\n    \n    // Add Logger instance\n    private logger = Logger.getInstance();\n\n    // Add state properties for the condition dialog\n    @state() private _showConditionDialog = false;\n    @state() private _editingConditionIndex: number | null = null;\n    @state() private _conditionParameter = '';\n    @state() private _conditionOperator: string = 'equals';\n    @state() private _conditionValue = '';\n    @state() private _conditionAction: string = 'highlight';\n    @state() private _conditionActionValue = '';\n    @state() private _conditionTargetPartIds: string = ''; // NEW state for target part IDs input\n\n    // Add state properties for the action dialog\n    @state() private _showActionDialog = false;\n    @state() private _editingActionIndex: number | null = null;\n    @state() private _actionLabel = '';\n    @state() private _actionIcon = '';\n    @state() private _actionParameter = '';\n    @state() private _actionValue = '';\n    @state() private _actionConfirmation = false;\n    @state() private _actionConfirmationText = '';\n\n    // Add new state properties for the parameter type\n    @state() private _conditionParameterType: string = 'entity';\n    @state() private _conditionPartId: string = '';\n    @state() private _conditionParamName: string = '';\n\n    constructor() {\n        super();\n        // First initialize critical services to prevent \"undefined\" errors\n        this.logger = Logger.getInstance();\n        this.logger.log('Editor', 'Editor constructor called');\n    }\n\n    // Ensure proper cleanup on disconnection\n    disconnectedCallback() {\n        super.disconnectedCallback();\n    }\n\n    setConfig(config: InventreeCardConfig): void {\n        this._config = {\n            ...config,\n            view_type: config.view_type || 'detail'\n        };\n    }\n\n    private _updateConfig(config: Partial<InventreeCardConfig>): void {\n        // Create a deep copy of the current config\n        const newConfig = JSON.parse(JSON.stringify(this._config || {}));\n        \n        // Merge the new config into the copy\n        for (const [key, value] of Object.entries(config)) {\n            // Special handling for arrays like filters\n            if (Array.isArray(value)) {\n                newConfig[key] = [...value];\n            } else if (typeof value === 'object' && value !== null) {\n                // For nested objects, merge them\n                newConfig[key] = { ...(newConfig[key] || {}), ...value };\n            } else {\n                // For primitive values, just assign\n                newConfig[key] = value;\n            }\n        }\n        \n        this.logger.log('Editor', 'Updated config', { category: 'editor' }, newConfig);\n        \n        // Fire the config-changed event with the new config\n        fireEvent(this, 'config-changed', { config: newConfig });\n    }\n\n    render() {\n        if (!this.hass || !this._config) return html``;\n\n        const showVariantSettings = this._config.view_type === 'variants';\n\n        return html`\n            <div class=\"editor\">\n                <!-- Basic Settings -->\n                <div class=\"section\">\n                    <div class=\"section-header\">Basic Settings</div>\n                    <div class=\"basic-settings\">\n                        <ha-entity-picker\n                            .hass=${this.hass}\n                            .value=${this._config.entity}\n                            .label=${\"Entity\"}\n                            .includeDomains=${[\"sensor\"]}\n                            @value-changed=${this._valueChanged('entity')}\n                        ></ha-entity-picker>\n                        <div class=\"checkbox-container\">\n                            <input\n                                type=\"checkbox\"\n                                id=\"show_header\"\n                                .checked=${this._config.display?.show_header ?? true}\n                                @change=${this._valueChanged('display.show_header')}\n                            />\n                            <label for=\"show_header\">Show Header</label>\n                        </div>\n                    </div>\n                    <input\n                        type=\"text\"\n                        label=\"Title\"\n                        .value=${this._config.name || ''}\n                        @input=${this._valueChanged('name')}\n                    />\n                </div>\n\n                <!-- Layout -->\n                <div class=\"section\">\n                    <div class=\"section-header\">Layout</div>\n                    <div class=\"grid-2\">\n                        <div class=\"input-group\">\n                            <label for=\"view-type\">View Type</label>\n                            <select\n                                id=\"view-type\"\n                                .value=${this._config.view_type || 'detail'}\n                                @change=${this._valueChanged('view_type')}\n                            >\n                                <option value=\"detail\" ?selected=${this._config?.view_type === 'detail'}>Detail</option>\n                                <option value=\"grid\" ?selected=${this._config?.view_type === 'grid'}>Grid</option>\n                                <option value=\"list\" ?selected=${this._config?.view_type === 'list'}>List</option>\n                                <option value=\"parts\" ?selected=${this._config?.view_type === 'parts'}>Parts</option>\n                                <option value=\"variants\" ?selected=${this._config?.view_type === 'variants'}>Variants</option>\n                                <option value=\"base\" ?selected=${this._config?.view_type === 'base'}>Base Layout</option>\n                                <option value=\"debug\" ?selected=${this._config?.view_type === 'debug'}>Debug View</option>\n                                <option value=\"custom\" ?selected=${this._config?.view_type === 'custom'}>Custom</option>\n                            </select>\n                        </div>\n\n                        ${this._config?.view_type === 'grid' ? html`\n                            <div class=\"grid-settings\">\n                            <ha-textfield\n                                type=\"number\"\n                                label=\"Columns\"\n                                min=\"1\"\n                                max=\"6\"\n                                    .value=${this._config?.columns ?? 3}\n                                    @change=${(ev: Event) => {\n                                        this.logger.log('Editor', 'Columns changing', { category: 'editor' });\n                                        this._valueChanged('columns')(ev);\n                                    }}\n                            ></ha-textfield>\n                                \n                                <ha-textfield\n                                    type=\"number\"\n                                    label=\"Grid Spacing\"\n                                    min=\"0\"\n                                    max=\"24\"\n                                    .value=${this._config?.grid_spacing ?? 8}\n                                    @change=${(ev: Event) => {\n                                        this.logger.log('Editor', 'Grid spacing changing', { category: 'editor' });\n                                        this._valueChanged('grid_spacing')(ev);\n                                    }}\n                                ></ha-textfield>\n                                \n                                <ha-textfield\n                                    type=\"number\"\n                                    label=\"Item Height\"\n                                    min=\"40\"\n                                    max=\"500\"\n                                    .value=${this._config?.item_height ?? 170}\n                                    @change=${(ev: Event) => {\n                                        this.logger.log('Editor', 'Item height changing', { category: 'editor' });\n                                        this._valueChanged('item_height')(ev);\n                                    }}\n                                ></ha-textfield>\n                                \n                                <ha-textfield\n                                    type=\"number\"\n                                    label=\"Thumbnail Width\"\n                                    min=\"50\"\n                                    max=\"300\"\n                                    .value=${this._config?.style?.image_size ?? 50}\n                                    @change=${(ev: Event) => {\n                                        this.logger.log('Editor', 'Thumbnail width changing', { category: 'editor' });\n                                        this._valueChanged('style.image_size')(ev);\n                                    }}\n                            ></ha-textfield>\n                            </div>\n                        ` : nothing}\n                    </div>\n                </div>\n\n                <!-- Display Settings -->\n                <div class=\"section\">\n                    <div class=\"section-header\">Display</div>\n                    <div class=\"grid-2\">\n                        <div>\n                            <label>\n                                <input \n                                    type=\"checkbox\" \n                                    ?checked=${this._config.display?.show_image !== false}\n                                @change=${this._valueChanged('display.show_image')}\n                                />\n                                Show Images\n                            </label>\n                        </div>\n                        \n                        <div>\n                            <label>\n                                <input \n                                    type=\"checkbox\" \n                                    ?checked=${this._config.display?.show_name !== false}\n                                @change=${this._valueChanged('display.show_name')}\n                                />\n                                Show Names\n                            </label>\n                        </div>\n                        \n                        <div>\n                            <label>\n                                <input \n                                    type=\"checkbox\" \n                                    ?checked=${this._config.display?.show_stock !== false}\n                                @change=${this._valueChanged('display.show_stock')}\n                                />\n                                Show Stock\n                            </label>\n                        </div>\n                        \n                        <div>\n                            <label>\n                                <input \n                                    type=\"checkbox\" \n                                    ?checked=${this._config.display?.show_description === true}\n                                @change=${this._valueChanged('display.show_description')}\n                                />\n                                Show Description\n                            </label>\n                    </div>\n\n                        <div>\n                            <label>\n                                <input \n                                    type=\"checkbox\" \n                                    ?checked=${this._config.display?.show_category === true}\n                                    @change=${this._valueChanged('display.show_category')}\n                                />\n                                Show Category\n                            </label>\n                </div>\n\n                        <div>\n                            <label>\n                                <input \n                                    type=\"checkbox\" \n                                    ?checked=${this._config.display?.show_stock_status_border !== false}\n                                    @change=${this._valueChanged('display.show_stock_status_border')}\n                                />\n                                Show Stock Status Border\n                            </label>\n                        </div>\n\n                        <div>\n                            <label>\n                                <input \n                                    type=\"checkbox\" \n                                    ?checked=${this._config.display?.show_stock_status_colors !== false}\n                                    @change=${this._valueChanged('display.show_stock_status_colors')}\n                                />\n                                Show Stock Status Colors\n                            </label>\n                        </div>\n\n                        <div>\n                            <label>\n                                <input \n                                    type=\"checkbox\" \n                                    ?checked=${this._config.display?.show_buttons !== false}\n                                    @change=${this._valueChanged('display.show_buttons')}\n                                />\n                                Show Buttons\n                            </label>\n                        </div>\n\n                        <div>\n                            <label>\n                                <input \n                                    type=\"checkbox\" \n                                    ?checked=${this._config.display?.show_parameters === true}\n                                    @change=${this._valueChanged('display.show_parameters')}\n                                />\n                                Show Parameters\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Parameters Tab -->\n                <div class=\"section\">\n                    <div class=\"section-header\">Parameters</div>\n                    \n                    <div class=\"checkbox-container\">\n                        <input\n                            type=\"checkbox\"\n                            id=\"enable_parameters\"\n                            .checked=${this._config.parameters?.enabled ?? false}\n                            @change=${this._valueChanged('parameters.enabled')}\n                        />\n                        <label for=\"enable_parameters\">Enable Parameter Features</label>\n                    </div>\n                    \n                    ${this._config.parameters?.enabled ? html`\n                        <div class=\"subsection\">\n                            <div class=\"subsection-header\">Parameter Display</div>\n                            <div class=\"grid-2\">\n                                <div>\n                                    <label>\n                                        <input \n                                            type=\"checkbox\" \n                                            ?checked=${this._config.parameters?.show_section !== false}\n                                            @change=${this._valueChanged('parameters.show_section')}\n                                        />\n                                        Show Parameters Section\n                                    </label>\n                                </div>\n                                \n                                <div>\n                                    <label>\n                                        <input \n                                            type=\"checkbox\" \n                                            ?checked=${this._config.parameters?.collapsed_by_default === true}\n                                            @change=${this._valueChanged('parameters.collapsed_by_default')}\n                                        />\n                                        Collapsed by Default\n                                    </label>\n                                </div>\n                                \n                                <div>\n                                    <label>\n                                        <input \n                                            type=\"checkbox\" \n                                            ?checked=${this._config.parameters?.group_parameters === true}\n                                            @change=${this._valueChanged('parameters.group_parameters')}\n                                        />\n                                        Group Parameters\n                                    </label>\n                                </div>\n                            </div>\n                        </div>\n                        \n                        <div class=\"subsection\">\n                            <div class=\"subsection-header\">Parameter Conditions</div>\n                            <p>Create rules that change how parts are displayed based on parameter values.</p>\n                            \n                            <button @click=${this._addCondition} class=\"add-button\">\n                                + Add Condition\n                            </button>\n                            \n                            <div class=\"conditions-list\">\n                                ${this._config.parameters?.conditions?.map((condition, index) => html`\n                                    <div class=\"condition-row\">\n                                        <div class=\"condition-summary\">\n                                            If <strong>${condition.parameter}</strong> \n                                            ${this._getOperatorLabel(condition.operator)} \n                                            <strong>${condition.value}</strong> then\n                                            ${this._getActionLabel(condition.action, condition.action_value)}\n                                        </div>\n                                        <div class=\"condition-actions\">\n                                            <button @click=${() => this._editCondition(index)} class=\"edit-button\">Edit</button>\n                                            <button @click=${() => this._removeCondition(index)} class=\"delete-button\">Delete</button>\n                                        </div>\n                                    </div>\n                                `) || ''}\n                            </div>\n                        </div>\n                        \n                        <div class=\"subsection\">\n                            <div class=\"subsection-header\">Parameter Actions</div>\n                            <p>Create custom buttons that update parameter values.</p>\n                            \n                            <button @click=${this._addAction} class=\"add-button\">\n                                + Add Action Button\n                            </button>\n                            \n                            <div class=\"actions-list\">\n                                ${this._config.parameters?.actions?.map((action, index) => html`\n                                    <div class=\"action-row\">\n                                        <div class=\"action-summary\">\n                                            <strong>${action.label}</strong>: Set <strong>${action.parameter}</strong> to <strong>${action.value}</strong>\n                                        </div>\n                                        <div class=\"action-buttons\">\n                                            <button @click=${() => this._editAction(index)} class=\"edit-button\">Edit</button>\n                                            <button @click=${() => this._removeAction(index)} class=\"delete-button\">Delete</button>\n                                        </div>\n                                    </div>\n                                `) || ''}\n                            </div>\n                        </div>\n                    ` : ''}\n                </div>\n\n                <!-- Buttons Configuration -->\n                <div class=\"section\">\n                    <div class=\"section-header\">Buttons</div>\n                    <div class=\"grid-2\">\n                        <div class=\"select-container\">\n                            <label>Button Preset</label>\n                            <select\n                                .value=${this._config.buttons?.preset ?? 'default'}\n                                @change=${this._valueChanged('buttons.preset')}\n                            >\n                                <option value=\"default\">Default (+1/-1)</option>\n                                <option value=\"precise\">Precise (+0.1/-0.1)</option>\n                                <option value=\"bulk\">Bulk (+10/-10)</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Services -->\n                <div class=\"section\">\n                    <div class=\"section-header\">Services</div>\n                    <div class=\"services-settings\">\n                        <div class=\"checkbox-container\">\n                            <input\n                                type=\"checkbox\"\n                                id=\"enable_wled\"\n                                .checked=${this._config.services?.wled?.enabled ?? false}\n                                @change=${this._valueChanged('services.wled.enabled')}\n                            />\n                            <label for=\"enable_wled\">Enable WLED Location</label>\n                        </div>\n                        \n                        ${this._config.services?.wled?.enabled ? html`\n                            <div class=\"grid-2\">\n                                <div class=\"input-container\">\n                                    <label>WLED Entity</label>\n                                    <input\n                                        type=\"text\"\n                                        .value=${this._config.services?.wled?.entity_id || ''}\n                                        @input=${this._valueChanged('services.wled.entity_id')}\n                                    />\n                                </div>\n                                \n                                <div class=\"input-container\">\n                                    <label>Parameter Name</label>\n                                    <input\n                                        type=\"text\"\n                                        .value=${this._config.services?.wled?.parameter_name || 'led_xaxis'}\n                                        @input=${this._valueChanged('services.wled.parameter_name')}\n                                    />\n                                </div>\n                            </div>\n                        ` : ''}\n                        \n                        <div class=\"checkbox-container\">\n                            <input\n                                type=\"checkbox\"\n                                id=\"enable_print\"\n                                .checked=${this._config.services?.print?.enabled ?? false}\n                                @change=${this._valueChanged('services.print.enabled')}\n                            />\n                            <label for=\"enable_print\">Enable Print Labels</label>\n                        </div>\n                        \n                        ${this._config.services?.print?.enabled ? html`\n                            <div class=\"grid-2\">\n                                <div class=\"input-container\">\n                                    <label>Template ID</label>\n                                    <input\n                                        type=\"number\"\n                                        .value=${this._config.services?.print?.template_id || 2}\n                                        @input=${this._valueChanged('services.print.template_id')}\n                                    />\n                                </div>\n                                \n                                <div class=\"input-container\">\n                                    <label>Print Plugin</label>\n                                    <input\n                                        type=\"text\"\n                                        .value=${this._config.services?.print?.plugin || 'zebra'}\n                                        @input=${this._valueChanged('services.print.plugin')}\n                                    />\n                                </div>\n                            </div>\n                        ` : ''}\n                    </div>\n                </div>\n\n                <!-- Direct API Configuration -->\n                ${this._renderDirectApiConfig()}\n\n                <!-- Debugging Section -->\n                ${this._renderDebuggingSection()}\n\n                <!-- Variant Settings - ONLY SHOW ONCE when view_type is variants -->\n                ${showVariantSettings ? html`\n                    <div class=\"section\">\n                        <div class=\"section-header\">Variant Settings</div>\n                        <div class=\"input-group\">\n                            <label for=\"variant-view-type\">Variant View Type</label>\n                            <select\n                                id=\"variant-view-type\"\n                                .value=${this._config.variant_view_type || 'grid'}\n                                @change=${this._valueChanged('variant_view_type')}\n                            >\n                                <option value=\"grid\">Grid</option>\n                                <option value=\"list\">List</option>\n                                <option value=\"tree\">Tree</option>\n                            </select>\n                        </div>\n                        <div class=\"checkbox-container\">\n                            <input\n                                type=\"checkbox\"\n                                id=\"auto-detect-variants\"\n                                .checked=${this._config.auto_detect_variants !== false}\n                                @change=${this._valueChanged('auto_detect_variants')}\n                            />\n                            <label for=\"auto-detect-variants\">Auto-detect Variants</label>\n                        </div>\n                    </div>\n                ` : ''}\n\n                ${this._renderPartsConfig()}\n\n                <!-- Condition Dialog -->\n                ${this._renderConditionDialog()}\n                \n                <!-- Action Dialog -->\n                ${this._renderActionDialog()}\n\n                <!-- Performance Settings Section -->\n                ${this._renderPerformanceSettings()}\n\n                ${this._config?.view_type === 'custom' ? html`\n                    <div class=\"subsection\">\n                        <div class=\"grid-2\">\n                            <ha-textfield\n                                label=\"Custom Tag\"\n                                .value=${this._config?.custom_view?.tag || ''}\n                                @change=${this._valueChanged('custom_view.tag')}\n                            ></ha-textfield>\n                        </div>\n                        <div class=\"note\">\n                            Enter a custom HTML tag name for your view component\n                        </div>\n                    </div>\n                ` : nothing}\n            </div>\n        `;\n    }\n\n    private _renderPartsConfig() {\n        if (!this._config?.view_type) return html``;\n        if (this._config.view_type !== 'parts') return html``;\n    \n        // Filter entities manually with proper null checks\n        const inventreeEntities = this.hass ? \n            Object.keys(this.hass.states).filter(entityId => \n                entityId.startsWith('sensor.') && \n                this.hass?.states[entityId]?.attributes?.items !== undefined &&\n                (!this._config?.selected_entities?.includes(entityId))\n            ) : [];\n    \n        return html`\n            <div class=\"section\">\n                <div class=\"section-header\">Parts Configuration</div>\n                \n                <div class=\"values\">\n                    <div class=\"row\">\n                        <div class=\"input-container\">\n                            <label for=\"entity-select\">Add InvenTree Entity:</label>\n                            <select \n                                id=\"entity-select\"\n                                @change=${this._entitySelected}\n                                .value=${''}\n                            >\n                                <option value=\"\" disabled selected>Select an entity</option>\n                                ${inventreeEntities.map(entityId => html`\n                                    <option value=${entityId}>\n                                        ${this.hass?.states[entityId]?.attributes?.friendly_name || entityId}\n                                    </option>\n                                `)}\n                            </select>\n                        </div>\n                    </div>\n    \n                    <div class=\"selected-entities\">\n                        ${this._config.selected_entities?.map((entity, index) => html`\n                            <div class=\"entity-row\">\n                                <span class=\"entity-name\">\n                                    ${this.hass?.states[entity]?.attributes?.friendly_name ?? entity}\n                                </span>\n                                <button\n                                    @click=${() => this._removeEntity(index)}\n                                    class=\"delete-button\"\n                                >\n                                    Delete\n                                </button>\n                            </div>\n                        `)}\n                    </div>\n                    \n                    <div class=\"section-subheader\">Filters</div>\n                    <div class=\"row\">\n                        <div class=\"filter-controls\">\n                            <select id=\"filter-attribute\" .value=${this._filterAttribute || ''} @change=${(e: Event) => this._filterAttribute = (e.target as HTMLSelectElement).value}>\n                                <option value=\"\" disabled selected>Select attribute</option>\n                                <option value=\"pk\">Part ID (pk)</option>\n                                <option value=\"name\">Name</option>\n                                <option value=\"in_stock\">In Stock</option>\n                                <option value=\"category_name\">Category</option>\n                                <option value=\"parameter\">Parameter</option>\n                            </select>\n                            \n                            ${this._filterAttribute !== 'parameter' ? html`\n                                <select id=\"filter-operator\" .value=${this._filterOperator || 'eq'} @change=${(e: Event) => this._filterOperator = (e.target as HTMLSelectElement).value}>\n                                    <option value=\"eq\">Equals</option>\n                                    <option value=\"contains\">Contains</option>\n                                    <option value=\"gt\">Greater than</option>\n                                    <option value=\"lt\">Less than</option>\n                                </select>\n                                \n                                <input \n                                    type=\"text\" \n                                    id=\"filter-value\" \n                                    placeholder=\"Filter value\"\n                                    .value=${this._filterValue || ''}\n                                    @input=${(e: Event) => this._filterValue = (e.target as HTMLInputElement).value}\n                                >\n                                \n                                <button @click=${this._addFilter} class=\"add-button\">Add Filter</button>\n                            ` : html`\n                                <button @click=${this._showParameterFilterDialog} class=\"add-button\">Configure Parameter Filter</button>\n                            `}\n                        </div>\n                    </div>\n                    \n                    ${this._filterAttribute === 'parameter' ? html`\n                        <div class=\"subsection parameter-filter-config\">\n                            <div class=\"subsection-header\">Parameter Filter</div>\n                            <div class=\"parameter-filter-form\">\n                                <div class=\"input-container\">\n                                    <label for=\"parameter-name\">Parameter Name:</label>\n                                    <input \n                                        type=\"text\" \n                                        id=\"parameter-name\" \n                                        placeholder=\"e.g. color, size, material\"\n                                        .value=${this._parameterName || ''}\n                                        @input=${(e: Event) => this._parameterName = (e.target as HTMLInputElement).value}\n                                    >\n                                </div>\n                                \n                                <div class=\"input-container\">\n                                    <label for=\"parameter-value\">Parameter Value:</label>\n                                    <input \n                                        type=\"text\" \n                                        id=\"parameter-value\" \n                                        placeholder=\"e.g. red, large, cotton\"\n                                        .value=${this._parameterValue || ''}\n                                        @input=${(e: Event) => this._parameterValue = (e.target as HTMLInputElement).value}\n                                    >\n                                </div>\n                                \n                                <div class=\"input-container\">\n                                    <label for=\"parameter-operator\">Operator:</label>\n                                    <select \n                                        id=\"parameter-operator\" \n                                        .value=${this._filterOperator || 'eq'} \n                                        @change=${(e: Event) => this._filterOperator = (e.target as HTMLSelectElement).value}\n                                    >\n                                        <option value=\"eq\">Equals</option>\n                                        <option value=\"contains\">Contains</option>\n                                    </select>\n                                </div>\n                                \n                                <button @click=${this._addParameterFilter} class=\"add-button\">Add Parameter Filter</button>\n                            </div>\n                        </div>\n                ` : ''}\n                    \n                    <div class=\"active-filters\">\n                        ${this._config.filters?.map((filter, index) => html`\n                            <div class=\"filter-row\">\n                                <span>\n                                    ${filter.attribute === 'parameter' \n                                        ? `Parameter: ${filter.parameter_id || 'any'} ${this._getOperatorLabel(filter.operator)} ${filter.value}` \n                                        : `${filter.attribute} ${this._getOperatorLabel(filter.operator)} ${filter.value}`}\n                                </span>\n                                <button @click=${() => this._removeFilter(index)} class=\"delete-button\">Delete</button>\n                            </div>\n                        `)}\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    private _entitySelected(ev: Event) {\n        const select = ev.target as HTMLSelectElement;\n        const entityId = select.value;\n        \n        if (!this._config || !entityId) return;\n        \n        const entities = this._config.selected_entities || [];\n        if (!entities.includes(entityId)) {\n            this._updateConfig({\n                selected_entities: [...entities, entityId]\n            });\n        }\n        \n        // Reset the dropdown to the default value\n        select.value = '';\n    }\n\n    private _removeEntity(index: number) {\n        if (!this._config || !this._config.selected_entities) return;\n        \n        const entities = [...this._config.selected_entities];\n        entities.splice(index, 1);\n        \n        this._updateConfig({\n            selected_entities: entities\n        });\n    }\n\n    private _valueChanged(field: string) {\n        return (ev: Event): void => {\n            if (!this._config) return;\n\n            // Handle both CustomEvent and regular Event\n            const target = ev.target as HTMLInputElement | HTMLSelectElement;\n            let value: any;\n            \n            if ('detail' in ev && (ev as CustomEvent).detail?.value !== undefined) {\n                // It's a CustomEvent with detail.value\n                value = (ev as CustomEvent).detail.value;\n            } else if (target) {\n                // It's a regular input event\n                if (target.type === 'checkbox') {\n                    value = (target as HTMLInputElement).checked;\n            } else {\n                value = target.value;\n            }\n            } else {\n                return; // Can't determine the value\n            }\n            \n            // Create a deep copy of the config to avoid modifying read-only properties\n            const newConfig = JSON.parse(JSON.stringify(this._config));\n            \n            // Special handling for WLED service\n            if (field === 'services.wled.enabled') {\n                // If we're enabling/disabling WLED, also update the legacy wled property\n                if (value === true) {\n                    // Ensure services.wled exists\n                    if (!newConfig.services) newConfig.services = {};\n                    if (!newConfig.services.wled) {\n                        // Copy from legacy wled if it exists\n                        if (newConfig.wled) {\n                            newConfig.services.wled = { ...newConfig.wled, enabled: true };\n            } else {\n                            newConfig.services.wled = { \n                                enabled: true,\n                                entity_id: 'light.wled_inventory',\n                                parameter_name: 'led_xaxis'\n                            };\n                        }\n                    } else {\n                        newConfig.services.wled.enabled = true;\n                    }\n                    \n                    // Also update legacy property for backward compatibility\n                    newConfig.wled = { ...newConfig.services.wled };\n                } else {\n                    // Just disable it\n                    if (!newConfig.services) newConfig.services = {};\n                    if (!newConfig.services.wled) newConfig.services.wled = {};\n                    newConfig.services.wled.enabled = false;\n                    \n                    // Also update legacy property\n                    if (newConfig.wled) newConfig.wled.enabled = false;\n                }\n            } else if (field.startsWith('services.wled.')) {\n                // For other WLED properties, update both new and legacy\n                const propName = field.split('.')[2];\n                \n                // Ensure services.wled exists\n                if (!newConfig.services) newConfig.services = {};\n                if (!newConfig.services.wled) newConfig.services.wled = { enabled: true };\n                \n                // Set the property\n                newConfig.services.wled[propName] = value;\n                \n                // Also update legacy property\n                if (!newConfig.wled) newConfig.wled = {};\n                newConfig.wled[propName] = value;\n            } else if (field.includes('.')) {\n                // Normal nested property handling\n                const fields = field.split('.');\n                let current = newConfig;\n                \n                // Navigate to the nested property, creating objects as needed\n                for (let i = 0; i < fields.length - 1; i++) {\n                    if (!current[fields[i]] || typeof current[fields[i]] !== 'object') {\n                        // If the property doesn't exist or is not an object, create a new object\n                        current[fields[i]] = {};\n                    }\n                    current = current[fields[i]];\n                }\n                \n                // Set the value\n                current[fields[fields.length - 1]] = value;\n            } else {\n                // Normal property handling\n                newConfig[field] = value;\n            }\n            \n            this.logger.log('Editor', 'Updated config', { category: 'editor' }, newConfig);\n            \n            // Fire the config-changed event with the new config\n            fireEvent(this, 'config-changed', { config: newConfig });\n        };\n    }\n\n    public static async getConfigForm(): Promise<any> {\n        return {\n            schema: [\n                {\n                    name: \"entities\",\n                    selector: {\n                        entity: {\n                            domain: [\"sensor\"],\n                            multiple: true,\n                            filter: {\n                                attributes: {\n                                    items: {}\n                                }\n                            }\n                        }\n                    }\n                }\n            ]\n        };\n    }\n\n    static getStubConfig(hass: HomeAssistant): InventreeCardConfig {\n        // Find the first available InvenTree sensor\n        const entity = Object.keys(hass.states).find(eid => \n            eid.startsWith('sensor.') && \n            hass.states[eid].attributes?.items !== undefined\n        );\n\n        return {\n            type: \"custom:inventree-card\",\n            entity: entity || '',\n            view_type: 'detail',\n            selected_entities: [],  // Start with empty array for parts view\n            display: {\n                show_header: true,\n                show_image: true,\n                show_name: true,\n                show_stock: true,\n                show_description: false,\n                show_category: false,\n                show_stock_status_border: true,\n                show_stock_status_colors: true,\n                show_buttons: true,\n                show_parameters: true\n            }\n        };\n    }\n\n    // Add these properties to the class\n    private _filterAttribute: string | null = null;\n    private _filterOperator: string = 'eq';\n    private _filterValue: string = '';\n    private _parameterName: string = '';\n    private _parameterValue: string = '';\n\n    // Add these methods to the class\n    private _getOperatorLabel(operator: string): string {\n        switch (operator) {\n            case 'eq': \n            case 'equals': \n                return 'equals';\n            case 'not_equals': \n                return 'does not equal';\n            case 'contains': \n                return 'contains';\n            case 'gt':\n            case 'greater_than': \n                return 'is greater than';\n            case 'lt':\n            case 'less_than': \n                return 'is less than';\n            case 'exists': \n                return 'exists';\n            case 'is_empty': \n                return 'is empty';\n            default: \n                return operator;\n        }\n    }\n\n    private _addFilter(): void {\n        if (!this._config || !this._filterAttribute || !this._filterValue) return;\n        \n        // Get existing filters or create an empty array\n        const existingFilters = this._config.filters || [];\n        \n        // Create the new filter\n        const newFilter = {\n            attribute: this._filterAttribute,\n            operator: this._filterOperator as 'eq' | 'contains' | 'gt' | 'lt',\n            value: this._filterValue\n        };\n        \n        this.logger.log('Editor', 'Adding regular filter:', { category: 'editor' }, newFilter);\n        \n        // Create a new array with all existing filters plus the new one\n        const updatedFilters = [...existingFilters, newFilter];\n        \n        // Update the config with the new filters array\n        this._updateConfig({\n            filters: updatedFilters\n        });\n        \n        // Reset the filter inputs\n        this._filterAttribute = null;\n        this._filterValue = '';\n    }\n\n    private _removeFilter(index: number): void {\n        if (!this._config || !this._config.filters) return;\n        \n        const filters = [...this._config.filters];\n        filters.splice(index, 1);\n        \n        this._updateConfig({\n            filters: filters\n        });\n    }\n\n    private _showParameterFilterDialog(): void {\n        // This method is just a placeholder - the parameter filter form is already shown\n        // when parameter is selected in the dropdown\n    }\n\n    private _addParameterFilter(): void {\n        if (!this._config || !this._parameterName || !this._parameterValue) {\n            this.logger.log('Editor', 'Cannot add parameter filter: missing config, name, or value', { category: 'editor' });\n            return;\n        }\n        \n        // Get existing filters or create an empty array\n        const existingFilters = this._config.filters || [];\n        \n        // Create the new filter\n        const newFilter: FilterConfig = {\n            attribute: 'parameter',\n            operator: this._filterOperator as 'eq' | 'contains',\n            value: this._parameterValue,\n            parameter_id: this._parameterName\n        };\n        \n        this.logger.log('Editor', 'Adding parameter filter:', { category: 'editor' }, newFilter);\n        this.logger.log('Editor', 'Existing filters:', { category: 'editor' }, existingFilters);\n        \n        // Create a new array with all existing filters plus the new one\n        const updatedFilters = [...existingFilters, newFilter];\n        \n        this.logger.log('Editor', 'Updated filters array:', { category: 'editor' }, updatedFilters);\n        \n        // Update the config with the new filters array\n        this._updateConfig({\n            filters: updatedFilters\n        });\n        \n        // Reset the parameter filter inputs\n        this._parameterName = '';\n        this._parameterValue = '';\n    }\n\n    // Add these methods for parameter conditions and actions\n    private _getActionLabel(action: string, value: string): string {\n        switch (action) {\n            case 'highlight': return `highlight with color ${value}`;\n            case 'text_color': return `change text color to ${value}`;\n            case 'border': return `add ${value} border`;\n            case 'icon': return `show ${value} icon`;\n            case 'badge': return `add \"${value}\" badge`;\n            case 'sort': return `sort to ${value}`;\n            case 'filter': return value === 'show' ? 'show item' : 'hide item';\n            case 'show_section': return `${value === 'show' ? 'show' : 'hide'} section`;\n            case 'priority': return `set priority to ${value}`;\n            default: return `${action}: ${value}`;\n        }\n    }\n\n    private _addCondition(): void {\n        // Reset form and show dialog\n        this._conditionParameter = '';\n        this._conditionOperator = 'equals';\n        this._conditionValue = '';\n        this._conditionAction = 'highlight';\n        this._conditionActionValue = '#ff0000';\n        this._editingConditionIndex = null;\n        this._showConditionDialog = true;\n    }\n\n    private _editCondition(index: number): void {\n        if (!this._config || !this._config.parameters?.conditions) return;\n        \n        const condition = this._config.parameters.conditions[index];\n        \n        this._editingConditionIndex = index;\n        this._conditionParameter = condition.parameter;\n        this._conditionOperator = condition.operator;\n        this._conditionValue = condition.value || '';\n        this._conditionAction = condition.action;\n        this._conditionActionValue = condition.action_value;\n        // Populate _conditionTargetPartIds when editing\n        if (typeof condition.targetPartIds === 'string') {\n            this._conditionTargetPartIds = condition.targetPartIds; // e.g., \"*\"\n        } else if (Array.isArray(condition.targetPartIds)) {\n            this._conditionTargetPartIds = condition.targetPartIds.join(', ');\n        } else {\n            this._conditionTargetPartIds = '';\n        }\n        \n        this._showConditionDialog = true;\n        \n        // Force a re-render to ensure the dialog is properly displayed\n        this.requestUpdate();\n    }\n\n    private _closeConditionDialog(): void {\n        // Reset all form fields\n        this._showConditionDialog = false;\n        this._editingConditionIndex = null;\n        this._conditionParameter = '';\n        this._conditionOperator = 'equals';\n        this._conditionValue = '';\n        this._conditionAction = 'highlight';\n        this._conditionActionValue = '';\n        this._conditionTargetPartIds = ''; // Reset new state\n        \n        // Request UI update\n        this.requestUpdate();\n    }\n\n    private _saveCondition() {\n        // Validate inputs\n        if (!this._conditionParameter) {\n            // Show an error\n            alert('Parameter is required');\n            return;\n        }\n        \n        if (this._conditionOperator !== 'exists' && \n            this._conditionOperator !== 'is_empty' && \n            !this._conditionValue) {\n            // Show an error for operators that require a value\n            alert('Value is required for this operator');\n            return;\n        }\n        \n        // Create the condition object\n        const condition: any = {\n            parameter: this._conditionParameter,\n            operator: this._conditionOperator,\n            action: this._conditionAction,\n            action_value: this._conditionActionValue\n        };\n        \n        // Only add value if it's required for the operator\n        if (this._conditionOperator !== 'exists' && this._conditionOperator !== 'is_empty') {\n            condition.value = this._conditionValue;\n        }\n        \n        // Handle targetPartIds\n        const rawTargetIds = this._conditionTargetPartIds.trim();\n        if (rawTargetIds === '*') {\n            condition.targetPartIds = '*';\n        } else if (rawTargetIds) {\n            condition.targetPartIds = rawTargetIds\n                .split(',')\n                .map(id => parseInt(id.trim(), 10))\n                .filter(id => !isNaN(id));\n            if (condition.targetPartIds.length === 0) {\n                delete condition.targetPartIds; // Remove if parsing resulted in empty array (e.g. only whitespace or invalid entries)\n            }\n        } else {\n            delete condition.targetPartIds; // Remove if input was empty\n        }\n\n        if (!this._config) return;\n        \n        // Create a copy of the config\n        const newConfig = JSON.parse(JSON.stringify(this._config));\n        \n        // Make sure parameters section exists\n        if (!newConfig.parameters) {\n            newConfig.parameters = {\n                enabled: true,\n                conditions: [],\n                actions: []\n            };\n        }\n        \n        // Make sure conditions array exists\n        if (!newConfig.parameters.conditions) {\n            newConfig.parameters.conditions = [];\n        }\n        \n        // Update or add the condition\n        if (this._editingConditionIndex !== null) {\n            // Update existing condition\n            newConfig.parameters.conditions[this._editingConditionIndex] = condition;\n        } else {\n            // Add new condition\n            newConfig.parameters.conditions.push(condition);\n        }\n        \n        // Update the config\n        this._updateConfig(newConfig);\n        \n        // Close the dialog\n        this._closeConditionDialog();\n    }\n\n    private _removeCondition(index: number): void {\n        if (!this._config || !this._config.parameters?.conditions) return;\n        \n        const conditions = [...this._config.parameters.conditions];\n        conditions.splice(index, 1);\n        \n        // Make sure parameters object exists\n        const parameters = this._config.parameters || {};\n        \n        this._updateConfig({\n            parameters: {\n                ...parameters,\n                conditions\n            }\n        });\n    }\n\n    private _addAction(): void {\n        // Reset form and show dialog\n        this._actionLabel = '';\n        this._actionIcon = '';\n        this._actionParameter = '';\n        this._actionValue = '';\n        this._actionConfirmation = false;\n        this._actionConfirmationText = '';\n        this._editingActionIndex = null;\n        this._showActionDialog = true;\n    }\n\n    private _editAction(index: number): void {\n        if (!this._config || !this._config.parameters?.actions) return;\n        \n        const action = this._config.parameters.actions[index];\n        \n        this._editingActionIndex = index;\n        this._actionLabel = action.label;\n        this._actionIcon = action.icon || '';\n        this._actionParameter = action.parameter;\n        this._actionValue = action.value;\n        this._actionConfirmation = action.confirmation || false;\n        this._actionConfirmationText = action.confirmation_text || '';\n        \n        this._showActionDialog = true;\n        \n        // Force a re-render to ensure the dialog is properly displayed\n        this.requestUpdate();\n    }\n\n    private _closeActionDialog(): void {\n        this._showActionDialog = false;\n        this._editingActionIndex = null;\n        this.requestUpdate();\n    }\n\n    private _saveAction(): void {\n        if (!this._config) return;\n\n        const actions = [...(this._config.parameters?.actions || [])];\n\n        if (this._editingActionIndex !== null) {\n            actions[this._editingActionIndex] = {\n                label: this._actionLabel,\n                icon: this._actionIcon,\n                parameter: this._actionParameter,\n                value: this._actionValue,\n                confirmation: this._actionConfirmation,\n                confirmation_text: this._actionConfirmationText\n            };\n        } else {\n            actions.push({\n                label: this._actionLabel,\n                icon: this._actionIcon,\n                parameter: this._actionParameter,\n                value: this._actionValue,\n                confirmation: this._actionConfirmation,\n                confirmation_text: this._actionConfirmationText\n            });\n        }\n\n        // Initialize parameters object if it doesn't exist\n        if (!this._config.parameters) {\n            this._config.parameters = {\n                enabled: true,\n                actions: []\n            };\n        }\n\n        // Update the actions\n        this._updateConfig({\n            parameters: {\n                ...this._config.parameters,\n                actions\n            }\n        });\n\n        this._closeActionDialog();\n    }\n\n    private _removeAction(index: number): void {\n        if (!this._config || !this._config.parameters?.actions) return;\n        \n        const actions = [...this._config.parameters.actions];\n        actions.splice(index, 1);\n        \n        // Make sure parameters object exists\n        const parameters = this._config.parameters || {};\n        \n        this._updateConfig({\n            parameters: {\n                ...parameters,\n                actions\n            }\n        });\n    }\n\n    private _renderConditionDialog() {\n        if (!this._showConditionDialog) {\n            return html``;\n        }\n        \n        return html`\n            <div class=\"dialog-overlay\">\n                <div class=\"dialog\">\n                    <div class=\"dialog-header\">\n                        <h3>${this._editingConditionIndex !== null ? 'Edit Condition' : 'Add Condition'}</h3>\n                        <button class=\"close-button\" @click=${this._closeConditionDialog}>×</button>\n                    </div>\n                    <div class=\"dialog-content\">\n                        <div class=\"input-group\">\n                            <label for=\"condition-parameter\">Parameter</label>\n                            <input\n                                type=\"text\"\n                                id=\"condition-parameter\"\n                                .value=${this._conditionParameter}\n                                @input=${(e: any) => this._conditionParameter = e.target.value}\n                                placeholder=\"e.g. order_status or part:145:microwavables\"\n                            />\n                            <div class=\"helper-text\">\n                                Enter parameter name or direct reference (part:id:parameter)\n                            </div>\n                        </div>\n                        \n                        <div class=\"input-group\">\n                            <label for=\"condition-operator\">Operator</label>\n                            <select\n                                id=\"condition-operator\"\n                                .value=${this._conditionOperator}\n                                @change=${(e: any) => this._conditionOperator = e.target.value}\n                            >\n                                <option value=\"equals\">Equals</option>\n                                <option value=\"not_equals\">Not Equals</option>\n                                <option value=\"contains\">Contains</option>\n                                <option value=\"greater_than\">Greater Than</option>\n                                <option value=\"less_than\">Less Than</option>\n                                <option value=\"exists\">Exists</option>\n                                <option value=\"is_empty\">Is Empty</option>\n                            </select>\n                        </div>\n                        \n                        <div class=\"input-group\">\n                            <label for=\"condition-value\">Value</label>\n                            <input\n                                type=\"text\"\n                                id=\"condition-value\"\n                                .value=${this._conditionValue}\n                                @input=${(e: any) => this._conditionValue = e.target.value}\n                                placeholder=\"e.g. True, 42, red\"\n                                ?disabled=${this._conditionOperator === 'exists' || this._conditionOperator === 'is_empty'}\n                            />\n                        </div>\n                        \n                        <div class=\"input-group\">\n                            <label for=\"condition-action\">Action</label>\n                            <select\n                                id=\"condition-action\"\n                                .value=${this._conditionAction}\n                                @change=${(e: any) => this._conditionAction = e.target.value}\n                            >\n                                <option value=\"highlight\">Highlight</option>\n                                <option value=\"text_color\">Text Color</option>\n                                <option value=\"border\">Border</option>\n                                <option value=\"icon\">Icon</option>\n                                <option value=\"badge\">Badge</option>\n                                <option value=\"sort\">Sort</option>\n                                <option value=\"filter\">Filter</option>\n                                <option value=\"show_section\">Show/Hide Section</option>\n                                <option value=\"priority\">Set Priority</option>\n                            </select>\n                        </div>\n                        \n                        <div class=\"input-group\">\n                            ${this._renderActionValueInput()}\n                        </div>\n                        <div class=\"input-group\">\n                            <label for=\"condition-target-part-ids\">Target Part IDs (optional)</label>\n                            <input\n                                type=\"text\"\n                                id=\"condition-target-part-ids\"\n                                .value=${this._conditionTargetPartIds}\n                                @input=${(e: any) => this._conditionTargetPartIds = e.target.value}\n                                placeholder=\"e.g., 101, 102, 103 or * for all\"\n                            />\n                            <div class=\"helper-text\">\n                                Comma-separated part IDs this action applies to, or '*' for all loaded parts.\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"dialog-actions\">\n                        <button @click=${this._closeConditionDialog}>Cancel</button>\n                        <button @click=${this._saveCondition} class=\"primary\">Save</button>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    private _renderActionValueInput() {\n        // Set default value based on action type if none exists\n        if (!this._conditionActionValue) {\n            if (['highlight', 'text_color'].includes(this._conditionAction)) { // Removed 'border'\n                this._conditionActionValue = '#ff0000';\n            } else if (this._conditionAction === 'border') { // Added specific default for border\n                this._conditionActionValue = '2px solid #ff0000';\n            } else if (this._conditionAction === 'sort') {\n                this._conditionActionValue = 'top';\n            } else if (this._conditionAction === 'filter') {\n                this._conditionActionValue = 'show';\n            } else if (this._conditionAction === 'show_section') {\n                this._conditionActionValue = 'show';\n            } else if (this._conditionAction === 'priority') {\n                this._conditionActionValue = 'medium';\n            }\n        }\n        \n        // Render different input based on action type\n        switch (this._conditionAction) {\n            case 'highlight':\n            case 'text_color':\n                return html`\n                    <label for=\"action-value\">Color</label>\n                    <input\n                        type=\"color\"\n                        id=\"action-value\"\n                        .value=${this._conditionActionValue || '#ff0000'}\n                        @input=${(e: any) => this._conditionActionValue = e.target.value}\n                    />\n                `;\n            case 'border': // Separated border case\n                return html`\n                    <label for=\"action-value\">Border CSS</label>\n                    <input\n                        type=\"text\"\n                        id=\"action-value\"\n                        .value=${this._conditionActionValue || '2px solid #ff0000'}\n                        @input=${(e: any) => this._conditionActionValue = e.target.value}\n                        placeholder=\"e.g., 2px dashed blue\"\n                    />\n                    <div class=\"helper-text\">Enter a full CSS border string (e.g., \"1px solid red\").</div>\n                `;\n            case 'sort':\n                return html`\n                    <label for=\"action-value\">Sort Position</label>\n                    <select\n                        id=\"action-value\"\n                        .value=${this._conditionActionValue || 'top'}\n                        @change=${(e: any) => this._conditionActionValue = e.target.value}\n                    >\n                        <option value=\"top\">Top</option>\n                        <option value=\"bottom\">Bottom</option>\n                    </select>\n                `;\n                \n            case 'filter':\n                return html`\n                    <label for=\"action-value\">Filter Action</label>\n                    <select\n                        id=\"action-value\"\n                        .value=${this._conditionActionValue || 'show'}\n                        @change=${(e: any) => this._conditionActionValue = e.target.value}\n                    >\n                        <option value=\"show\">Show Item</option>\n                        <option value=\"hide\">Hide Item</option>\n                    </select>\n                `;\n                \n            case 'show_section':\n                return html`\n                    <label for=\"action-value\">Section Visibility</label>\n                    <select\n                        id=\"action-value\"\n                        .value=${this._conditionActionValue || 'show'}\n                        @change=${(e: any) => this._conditionActionValue = e.target.value}\n                    >\n                        <option value=\"show\">Show Section</option>\n                        <option value=\"hide\">Hide Section</option>\n                    </select>\n                `;\n                \n            case 'priority':\n                return html`\n                    <label for=\"action-value\">Priority Level</label>\n                    <select\n                        id=\"action-value\"\n                        .value=${this._conditionActionValue || 'medium'}\n                        @change=${(e: any) => this._conditionActionValue = e.target.value}\n                    >\n                        <option value=\"high\">High</option>\n                        <option value=\"medium\">Medium</option>\n                        <option value=\"low\">Low</option>\n                    </select>\n                `;\n                \n            default:\n                return html`\n                    <label for=\"action-value\">Value</label>\n                    <input\n                        type=\"text\"\n                        id=\"action-value\"\n                        .value=${this._conditionActionValue || ''}\n                        @input=${(e: any) => this._conditionActionValue = e.target.value}\n                        placeholder=\"Enter action value\"\n                    />\n                `;\n        }\n    }\n\n    private _renderActionDialog() {\n        if (!this._showActionDialog) return html``;\n        \n        // Create a separate overlay to prevent event bubbling\n        return html`\n            <div class=\"dialog-overlay\" @click=${(e: Event) => e.stopPropagation()}>\n                <div class=\"dialog-container\">\n                    <div class=\"dialog-header\">\n                        <h2>${this._editingActionIndex !== null ? \"Edit Action\" : \"Add Action\"}</h2>\n                        <button class=\"close-button\" @click=${this._closeActionDialog}>×</button>\n                    </div>\n                    \n                    <div class=\"dialog-content\">\n                        <div class=\"form-field\">\n                            <label for=\"action-label\">Label</label>\n                            <input \n                                type=\"text\" \n                                id=\"action-label\" \n                                .value=${this._actionLabel}\n                                @input=${(e: Event) => this._actionLabel = (e.target as HTMLInputElement).value}\n                                placeholder=\"e.g. Turn On, Set Color\"\n                            />\n                        </div>\n                        \n                        <div class=\"form-field\">\n                            <label for=\"action-icon\">Icon (optional)</label>\n                            <input \n                                type=\"text\" \n                                id=\"action-icon\" \n                                .value=${this._actionIcon}\n                                @input=${(e: Event) => this._actionIcon = (e.target as HTMLInputElement).value}\n                                placeholder=\"e.g. mdi:power, mdi:lightbulb\"\n                            />\n                            <div class=\"helper-text\">MDI icon name, e.g. 'mdi:check'</div>\n                        </div>\n                        \n                        <div class=\"form-field\">\n                            <label for=\"action-parameter\">Parameter</label>\n                            <input \n                                type=\"text\" \n                                id=\"action-parameter\" \n                                .value=${this._actionParameter}\n                                @input=${(e: Event) => this._actionParameter = (e.target as HTMLInputElement).value}\n                                placeholder=\"e.g. color or sensor.inventree_microwaves_stock:mw_power_state\"\n                            />\n                            <div class=\"helper-text\">Parameter name or cross-entity reference (entity_id:parameter_name)</div>\n                        </div>\n                        \n                        <div class=\"form-field\">\n                            <label for=\"action-value\">Value</label>\n                            <input \n                                type=\"text\" \n                                id=\"action-value\" \n                                .value=${this._actionValue}\n                                @input=${(e: Event) => this._actionValue = (e.target as HTMLInputElement).value}\n                                placeholder=\"e.g. True, 42, red\"\n                            />\n                        </div>\n                        \n                        <div class=\"form-field checkbox-field\">\n                            <label for=\"action-confirmation\">Require confirmation</label>\n                            <input \n                                type=\"checkbox\" \n                                id=\"action-confirmation\" \n                                .checked=${this._actionConfirmation}\n                                @change=${(e: Event) => {\n                                    this._actionConfirmation = (e.target as HTMLInputElement).checked;\n                                    this.requestUpdate();\n                                }}\n                            />\n                        </div>\n                        \n                        ${this._actionConfirmation ? html`\n                            <div class=\"form-field\">\n                                <label for=\"action-confirmation-text\">Confirmation Text</label>\n                                <input \n                                    type=\"text\" \n                                    id=\"action-confirmation-text\" \n                                    .value=${this._actionConfirmationText}\n                                    @input=${(e: Event) => this._actionConfirmationText = (e.target as HTMLInputElement).value}\n                                    placeholder=\"e.g. Are you sure you want to turn on the microwave?\"\n                                />\n                                <div class=\"helper-text\">Text to show in confirmation dialog</div>\n                            </div>\n                        ` : ''}\n                    </div>\n                    \n                    <div class=\"dialog-buttons\">\n                        <button \n                            class=\"cancel-button\" \n                            @click=${this._closeActionDialog}\n                        >\n                            Cancel\n                        </button>\n                        <button \n                            class=\"save-button\" \n                            @click=${this._saveAction}\n                            .disabled=${!this._actionLabel || !this._actionParameter || !this._actionValue}\n                        >\n                            Save\n                        </button>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    private _renderDirectApiConfig() {\n        if (!this._config) return html``;\n        \n        return html`\n            <div class=\"section\">\n                <div class=\"section-header\">InvenTree API Settings</div>\n                \n                <div class=\"checkbox-container\">\n                    <input\n                        type=\"checkbox\"\n                        id=\"enable_direct_api\"\n                        .checked=${this._config.direct_api?.enabled || false}\n                        @change=${this._valueChanged('direct_api.enabled')}\n                    />\n                    <label for=\"enable_direct_api\">Enable Direct API</label>\n                </div>\n                \n                ${this._config.direct_api?.enabled ? html`\n                    <div class=\"input-group\">\n                        <label for=\"api-url\">InvenTree API URL</label>\n                        <input\n                            type=\"text\"\n                            id=\"api-url\"\n                            .value=${this._config.direct_api?.url || ''}\n                            @input=${this._valueChanged('direct_api.url')}\n                            placeholder=\"http://your-inventree-server.com\"\n                        />\n                    </div>\n                    \n                    <div class=\"input-group\">\n                        <label for=\"api-key\">API Key</label>\n                        <input\n                            type=\"text\"\n                            id=\"api-key\"\n                            .value=${this._config.direct_api?.api_key || ''}\n                            @input=${this._valueChanged('direct_api.api_key')}\n                            placeholder=\"Your InvenTree API key\"\n                        />\n                    </div>\n                    \n                    <!-- Remove Data Sources subsection -->\n                    \n                    <!-- Show WebSocket settings ONLY if direct API is enabled -->\n                    <div class=\"input-group\">\n                        <label for=\"websocket-url\">WebSocket URL (Optional)</label>\n                        <input\n                            type=\"text\"\n                            id=\"websocket-url\"\n                            .value=${this._config.direct_api?.websocket_url || ''}\n                            @input=${this._valueChanged('direct_api.websocket_url')}\n                            placeholder=\"ws://your-inventree-server.com/api/ws/\"\n                        />\n                        <div class=\"helper-text\">\n                            Leave blank to auto-derive from API URL (e.g., ws://.../api/ws/). Needed if using a reverse proxy or different port.\n                        </div>\n                    </div>\n                    \n                    <div class=\"input-group\">\n                        <label for=\"idle-render-time\">Idle Render Time (seconds)</label>\n                        <input\n                            type=\"number\"\n                            id=\"idle-render-time\"\n                            .value=${this._config.direct_api?.idle_render_time?.toString() || '60'}\n                            @input=${this._valueChanged('direct_api.idle_render_time')}\n                            min=\"10\"\n                            max=\"600\"\n                            placeholder=\"60\"\n                        />\n                        <div class=\"helper-text\">\n                            How often to refresh when no changes are detected (10-600 seconds)\n                        </div>\n                    </div>\n                ` : ''}\n            </div>\n        `;\n    }\n    \n    // Remove the _valueChangedDataSource method as it's no longer needed\n    /*\n    private _valueChangedDataSource(method: 'websocket' | 'polling' | 'hass') {\n        // ... implementation ...\n    }\n    */\n\n    private _renderDebuggingSection() {\n        // Get the systems from the logger\n        const systems = this.logger.getSystemsStatus();\n        \n        return html`\n          <div class=\"row\">\n            <div class=\"col\">\n              <div class=\"card-header\">\n                <h3>Debugging</h3>\n              </div>\n              <div class=\"card-content\">\n                <div class=\"row\">\n                  <div class=\"col\">\n                    <input \n                      type=\"checkbox\"\n                      id=\"debug-checkbox\"\n                      ?checked=${this._config?.debug || false}\n                      @change=${this._valueChangedDebug('debug')}\n                    />\n                    <label for=\"debug-checkbox\">Enable Debug</label>\n                  </div>\n                </div>\n                <div class=\"row\">\n                  <div class=\"col\">\n                    <input \n                      type=\"checkbox\"\n                      id=\"debug-verbose-checkbox\"\n                      ?checked=${this._config?.debug_verbose || false}\n                      @change=${this._valueChangedDebug('debug_verbose')}\n                    />\n                    <label for=\"debug-verbose-checkbox\">Verbose Logging</label>\n                  </div>\n                </div>\n                <div class=\"row\">\n                  <h4>Debug Categories</h4>\n                </div>\n                ${Object.entries(systems).map(([systemName, systemInfo], systemIndex) => {\n                  return html`\n                    <div class=\"row\">\n                      <div class=\"col\">\n                        <input \n                          type=\"checkbox\"\n                          id=\"debug-system-${systemIndex}\"\n                          ?checked=${this._config![`debug_${systemName}`] === true}\n                          @change=${this._valueChangedDebug(`debug_${systemName}`)}\n                        />\n                        <label for=\"debug-system-${systemIndex}\">${systemName}</label>\n                      </div>\n                    </div>\n                    ${Object.keys(systemInfo.subsystems || {}).map((subsystem, subsystemIndex) => {\n                      return html`\n                        <div class=\"row\">\n                          <div class=\"col\" style=\"padding-left: 2em\">\n                            <input \n                              type=\"checkbox\"\n                              id=\"debug-subsystem-${systemIndex}-${subsystemIndex}\"\n                              ?checked=${this._config?.debug_hierarchical?.[systemName]?.subsystems?.[subsystem] === true}\n                              @change=${this._valueChangedDebug('debug_hierarchical', systemName, subsystem)}\n                            />\n                            <label for=\"debug-subsystem-${systemIndex}-${subsystemIndex}\">${subsystem}</label>\n                          </div>\n                        </div>\n                      `;\n                    })}\n                  `;\n                })}\n              </div>\n            </div>\n          </div>\n        `;\n    }\n\n    /**\n     * Get subsystem debug state\n     */\n    private _getSubsystem(system: string, subsystem: string): boolean {\n        const hierarchical = this._config?.debug_hierarchical;\n        if (!hierarchical || !hierarchical[system] || !hierarchical[system].subsystems) {\n            return false;\n        }\n        return hierarchical[system].subsystems[subsystem] || false;\n    }\n\n    /**\n     * Update subsystem debug state\n     */\n    private _updateSubsystem(system: string, subsystem: string) {\n        return (ev: Event) => {\n            if (!this._config) return;\n            \n            const target = ev.target as HTMLInputElement;\n            const value = target.checked;\n            \n            // Create a deep copy of the config\n            const newConfig = JSON.parse(JSON.stringify(this._config)) as InventreeCardConfig;\n            \n            // Initialize hierarchical debug structure if needed\n            if (!newConfig.debug_hierarchical) {\n                newConfig.debug_hierarchical = {};\n            }\n            \n            // Initialize system config if needed\n            if (!newConfig.debug_hierarchical[system]) {\n                newConfig.debug_hierarchical[system] = {\n                    enabled: true,\n                    subsystems: {}\n                };\n            }\n            \n            // Ensure the system exists\n            const systemConfig = newConfig.debug_hierarchical[system];\n            \n            // Ensure subsystems object exists\n            if (!systemConfig.subsystems) {\n                systemConfig.subsystems = {};\n            }\n            \n            // Set the subsystem value\n            systemConfig.subsystems[subsystem] = value;\n            \n            // Check if all subsystems are disabled, if so, disable the system\n            let allSubsystemsDisabled = true;\n            for (const subsystemKey in systemConfig.subsystems) {\n                if (systemConfig.subsystems[subsystemKey]) {\n                    allSubsystemsDisabled = false;\n                    break;\n                }\n            }\n            \n            // Update system enabled state based on subsystems\n            systemConfig.enabled = !allSubsystemsDisabled;\n            \n            // Apply changes directly to the logger\n            const logger = Logger.getInstance();\n            logger.setSubsystemDebug(system, subsystem, value);\n            \n            // If all subsystems are disabled, also update the system\n            if (allSubsystemsDisabled) {\n                logger.setCategoryDebug(system, false);\n            } else {\n                logger.setCategoryDebug(system, true);\n            }\n            \n            // Update the config\n            this._updateConfig(newConfig);\n        };\n    }\n\n    /**\n     * Format subsystem name for display\n     */\n    private _formatSubsystemName(subsystem: string): string {\n        return subsystem\n            .split('_')\n            .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n            .join(' ');\n    }\n\n    /**\n     * Get method description\n     */\n    private _getMethodDescription(method: string): string {\n        switch (method) {\n            case 'websocket':\n                return 'Uses WebSocket plugin for real-time updates from InvenTree. Fastest and most efficient method.';\n            case 'polling':\n                return 'Periodically polls the InvenTree API for updates. Reliable but less efficient.';\n            case 'hass':\n                return 'Uses Home Assistant sensors for updates. Slowest method, requires InvenTree integration.';\n            default:\n                return '';\n        }\n    }\n\n    /**\n     * Render scheduled jobs list\n     */\n    private _renderScheduledJobs(): TemplateResult {\n        // Currently no jobs are stored in the config, so this is a placeholder\n        return html`\n            <div class=\"no-jobs-message\">\n                No scheduled jobs configured yet. Click \"Add Scheduled Job\" to create one.\n            </div>\n        `;\n    }\n    \n    /**\n     * Show dialog to add a new scheduled job\n     */\n    private _showAddJobDialog(): void {\n        // This would typically show a modal dialog for adding a job\n        // For now we'll just show a notification that this feature is coming soon\n        alert(\"Scheduled jobs configuration interface is coming soon! This feature allows you to configure regular data refresh, cache clearing, and other maintenance tasks on a schedule.\");\n    }\n\n    /**\n     * Get performance setting with fallback\n     */\n    private _getPerformanceSetting(categoryPath: string, setting: string, defaultValue: number): number {\n        if (!this._config) {\n            return defaultValue;\n        }\n\n        let baseConfig: any = this._config;\n        const pathParts = categoryPath.split('.'); // e.g., \"direct_api.api\" or \"rendering\"\n\n        // Adjust logic if \"direct_api.performance.api\" is the actual structure for direct_api settings\n        let effectivePathParts = [...pathParts];\n        if (pathParts[0] === 'direct_api' && pathParts.length > 1 && pathParts[1] !== 'performance') {\n            // Insert 'performance' for direct_api paths like 'direct_api.api' or 'direct_api.websocket'\n            effectivePathParts.splice(1, 0, 'performance');\n        } else if (pathParts[0] !== 'direct_api' && pathParts[0] !== 'performance' ) {\n             // For general settings like \"rendering\", \"parameters\", they are under \"performance\"\n            effectivePathParts.unshift('performance');\n        }\n\n\n        for (const part of effectivePathParts) {\n            if (baseConfig && typeof baseConfig === 'object' && part in baseConfig) {\n                baseConfig = baseConfig[part];\n            } else {\n                return defaultValue; // Path doesn't exist\n            }\n        }\n        \n        if (baseConfig && typeof baseConfig === 'object' && setting in baseConfig) {\n            const value = (baseConfig as any)[setting];\n            return typeof value === 'number' ? value : defaultValue;\n        }\n        \n        return defaultValue;\n    }\n\n    /**\n     * Update performance setting\n     */\n    private _updatePerformanceSetting(categoryPath: string, setting: string, isSecondsInput: boolean = false) {\n        return (ev: Event) => {\n            if (!this._config) return;\n            \n            const target = ev.target as HTMLInputElement;\n            let value = parseFloat(target.value); \n            \n            if (isNaN(value)) { \n                this.logger.warn('Editor', `Invalid numeric input for performance setting ${categoryPath}.${setting}: ${target.value}`);\n                this.requestUpdate();\n                return;\n            }\n\n            const newConfig = JSON.parse(JSON.stringify(this._config));\n            \n            let currentLevel = newConfig;\n            const pathParts = categoryPath.split('.'); \n\n            let performancePathPrefix: string[] = [];\n            let configPathWithinPerformance: string[] = [];\n\n            if (pathParts[0] === 'direct_api') {\n                 performancePathPrefix = ['direct_api', 'performance'];\n                 configPathWithinPerformance = pathParts.slice(1); // e.g., ['api'] or ['websocket']\n            } else {\n                 performancePathPrefix = ['performance'];\n                 configPathWithinPerformance = pathParts; // e.g., ['rendering'] or ['parameters']\n            }\n\n            let targetObject = currentLevel;\n            for (const part of performancePathPrefix) {\n                if (!targetObject[part] || typeof targetObject[part] !== 'object') {\n                    targetObject[part] = {};\n                }\n                targetObject = targetObject[part];\n            }\n            \n            for (const part of configPathWithinPerformance) {\n                 if (!targetObject[part] || typeof targetObject[part] !== 'object') {\n                    targetObject[part] = {};\n                }\n                targetObject = targetObject[part];\n            }\n\n            (targetObject as any)[setting] = value;\n            \n            this._updateConfig(newConfig);\n            this.requestUpdate(); \n        };\n    }\n\n    private _parameterTypeChanged(e: any) {\n        // Prevent the default event behavior which might be closing the dialog\n        e.stopPropagation();\n        \n        this._conditionParameterType = e.target.value;\n        \n        // When changing type, update the parameter field\n        if (this._conditionParameterType === 'direct' && this._conditionParameter) {\n            // Try to parse existing parameter if it's already in cross-entity format\n            const parts = this._conditionParameter.split(':');\n            if (parts.length === 2) {\n                this._conditionParamName = parts[1];\n            }\n        } else if (this._conditionParameterType === 'entity' && this._conditionPartId && this._conditionParamName) {\n            // Combine part ID and param name into cross-entity format\n            this._conditionParameter = `part:${this._conditionPartId}:${this._conditionParamName}`;\n        }\n\n        // Ensure we update the UI\n        this.requestUpdate();\n    }\n\n    /**\n     * Handle debug checkbox change\n     */\n    private _valueChangedDebug(property: string, system?: string, subsystem?: string) {\n        return (ev: Event) => {\n            if (!this._config) {\n                return;\n            }\n            \n            const target = ev.target as HTMLInputElement;\n            const value = target.checked === true;\n            \n            // Make a deep copy of the current config\n            const newConfig = JSON.parse(JSON.stringify(this._config));\n            \n            if (property === 'debug') {\n                // Main debug toggle\n                newConfig.debug = value;\n                this.logger.setDebug(value);\n            } else if (property === 'debug_verbose') {\n                // Verbose mode toggle\n                newConfig.debug_verbose = value;\n                this.logger.setVerboseMode(value);\n            } else if (property.startsWith('debug_')) {\n                // System toggle (e.g., debug_websocket)\n                const systemName = property.substring(6); // Remove 'debug_' prefix\n                newConfig[property] = value;\n                this.logger.setCategoryDebug(systemName, value);\n            } else if (property === 'debug_hierarchical' && system && subsystem) {\n                // Subsystem toggle within a system\n                if (!newConfig.debug_hierarchical) {\n                    newConfig.debug_hierarchical = {};\n                }\n                \n                if (!newConfig.debug_hierarchical[system]) {\n                    newConfig.debug_hierarchical[system] = { enabled: true, subsystems: {} };\n                }\n                \n                if (!newConfig.debug_hierarchical[system].subsystems) {\n                    newConfig.debug_hierarchical[system].subsystems = {};\n                }\n                \n                // Update the subsystem value\n                newConfig.debug_hierarchical[system].subsystems[subsystem] = value;\n                \n                // Apply the change directly to the logger\n                this.logger.setSubsystemDebug(system, subsystem, value);\n                \n                // Check if all subsystems are disabled to update parent state\n                let allDisabled = true;\n                let someEnabled = false;\n                \n                for (const sub in newConfig.debug_hierarchical[system].subsystems) {\n                    if (newConfig.debug_hierarchical[system].subsystems[sub]) {\n                        someEnabled = true;\n                        allDisabled = false;\n                        break;\n                    }\n                }\n                \n                // Update the system enabled state\n                newConfig.debug_hierarchical[system].enabled = !allDisabled;\n                newConfig[`debug_${system}`] = !allDisabled;\n                \n                // Update the system in the logger\n                this.logger.setCategoryDebug(system, !allDisabled);\n            }\n            \n            // Update the config\n            this._updateConfig(newConfig);\n        };\n    }\n\n    private _renderPerformanceSettings() {\n        if (!this._config) return html``;\n        const directApiEnabled = this._config.direct_api?.enabled || false;\n\n        return html`\n            <div class=\"section\">\n                <div class=\"section-header\">Performance Settings</div>\n                <div class=\"helper-text\">Fine-tune throttling and update frequencies. Lower values mean more responsive but potentially higher load. (Times in milliseconds unless specified).</div>\n\n                <div class=\"subsection\">\n                    <div class=\"subsection-header\">Direct API Performance</div>\n                    <div class=\"performance-group\" ?disabled=${!directApiEnabled}>\n                         <div class=\"helper-text\" ?hidden=${directApiEnabled}>Enable Direct API to configure these settings.</div>\n                        <div class=\"slider-group\">\n                            <span>API Call Throttle (s)</span>\n                            <input \n                                type=\"number\" \n                                min=\"0\" \n                                step=\"0.1\"\n                                .value=${this._getPerformanceSetting('direct_api.api', 'throttle', 0.2).toString()}\n                                @input=${this._updatePerformanceSetting('direct_api.api', 'throttle', true)}\n                                ?disabled=${!directApiEnabled}\n                            />\n                            <span>${this._getPerformanceSetting('direct_api.api', 'throttle', 0.2)} s</span>\n                        </div>\n                        <div class=\"slider-group\">\n                            <span>API Cache Lifetime (s)</span>\n                            <input \n                                type=\"number\" \n                                min=\"0\" \n                                step=\"1\"\n                                .value=${this._getPerformanceSetting('direct_api.api', 'cacheLifetime', 60).toString()}\n                                @input=${this._updatePerformanceSetting('direct_api.api', 'cacheLifetime', true)}\n                                ?disabled=${!directApiEnabled}\n                            />\n                            <span>${this._getPerformanceSetting('direct_api.api', 'cacheLifetime', 60)} s</span>\n                        </div>\n                        <div class=\"slider-group\">\n                            <span>API Failed Retry Delay (s)</span>\n                            <input \n                                type=\"number\" \n                                min=\"0\" \n                                step=\"1\"\n                                .value=${this._getPerformanceSetting('direct_api.api', 'failedRequestRetryDelaySeconds', 30).toString()}\n                                @input=${this._updatePerformanceSetting('direct_api.api', 'failedRequestRetryDelaySeconds', true)}\n                                ?disabled=${!directApiEnabled}\n                            />\n                            <span>${this._getPerformanceSetting('direct_api.api', 'failedRequestRetryDelaySeconds', 30)} s</span>\n                        </div>\n                        <div class=\"slider-group\">\n                            <span>WS Reconnect (ms)</span>\n                            <input \n                                type=\"number\" \n                                min=\"1000\" \n                                step=\"1000\"\n                                .value=${this._getPerformanceSetting('direct_api.websocket', 'reconnectInterval', 5000).toString()}\n                                @input=${this._updatePerformanceSetting('direct_api.websocket', 'reconnectInterval')}\n                                ?disabled=${!directApiEnabled}\n                            />\n                            <span>${this._getPerformanceSetting('direct_api.websocket', 'reconnectInterval', 5000)} ms</span>\n                        </div>\n                        <div class=\"slider-group\">\n                            <span>WS Msg Debounce (ms)</span>\n                            <input \n                                type=\"number\" \n                                min=\"0\" \n                                step=\"10\"\n                                .value=${this._getPerformanceSetting('direct_api.websocket', 'messageDebounce', 50).toString()}\n                                @input=${this._updatePerformanceSetting('direct_api.websocket', 'messageDebounce')}\n                                ?disabled=${!directApiEnabled}\n                            />\n                            <span>${this._getPerformanceSetting('direct_api.websocket', 'messageDebounce', 50)} ms</span>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"subsection\">\n                    <div class=\"subsection-header\">General Card Performance</div>\n                    <div class=\"performance-group\">\n                        <div class=\"slider-group\">\n                            <span>Render Debounce (ms)</span>\n                            <input \n                                type=\"number\" \n                                min=\"0\" \n                                step=\"10\"\n                                .value=${this._getPerformanceSetting('rendering', 'debounceTime', 50).toString()}\n                                @input=${this._updatePerformanceSetting('rendering', 'debounceTime')}\n                            />\n                            <span>${this._getPerformanceSetting('rendering', 'debounceTime', 50)} ms</span>\n                        </div>\n                        <div class=\"slider-group\">\n                            <span>Idle Render Interval (ms)</span>\n                            <input \n                                type=\"number\" \n                                min=\"500\" \n                                step=\"500\"\n                                .value=${this._getPerformanceSetting('rendering', 'idleRenderInterval', 5000).toString()}\n                                @input=${this._updatePerformanceSetting('rendering', 'idleRenderInterval')}\n                            />\n                            <span>${this._getPerformanceSetting('rendering', 'idleRenderInterval', 5000)} ms</span>\n                        </div>\n                        <div class=\"slider-group\">\n                            <span>Max Render Freq (Hz)</span>\n                            <input \n                                type=\"number\" \n                                min=\"1\" \n                                max=\"60\" \n                                step=\"1\"\n                                .value=${this._getPerformanceSetting('rendering', 'maxRenderFrequency', 10).toString()}\n                                @input=${this._updatePerformanceSetting('rendering', 'maxRenderFrequency')}\n                            />\n                            <span>${this._getPerformanceSetting('rendering', 'maxRenderFrequency', 10)} Hz</span>\n                        </div>\n                        <div class=\"slider-group\">\n                            <span>Param Update Freq (ms)</span>\n                            <input \n                                type=\"number\" \n                                min=\"100\" \n                                step=\"100\"\n                                .value=${this._getPerformanceSetting('parameters', 'updateFrequency', 1000).toString()}\n                                @input=${this._updatePerformanceSetting('parameters', 'updateFrequency')}\n                            />\n                            <span>${this._getPerformanceSetting('parameters', 'updateFrequency', 1000)} ms</span>\n                        </div>\n                        <div class=\"slider-group\">\n                            <span>Cond. Eval Freq (ms)</span>\n                            <input \n                                type=\"number\" \n                                min=\"100\" \n                                step=\"100\"\n                                .value=${this._getPerformanceSetting('parameters', 'conditionEvalFrequency', 1000).toString()}\n                                @input=${this._updatePerformanceSetting('parameters', 'conditionEvalFrequency')}\n                            />\n                            <span>${this._getPerformanceSetting('parameters', 'conditionEvalFrequency', 1000)} ms</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n}\n\n\n"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__decorate","decorators","target","key","desc","d","c","arguments","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","SuppressedError","editorStyles","css","Logger","constructor","this","debugMode","verboseMode","logLevel","debugCategories","api","enabled","subsystems","calls","responses","errors","fallbacks","throttling","parameters","updates","conditions","filtering","actions","websocket","connection","messages","events","plugin","subscriptions","authentication","redux","state","components","middleware","dispatch","sync","migration","layouts","rendering","performance","cycle","debounce","cache","hits","misses","pruning","card","initialization","lifecycle","diagnostics","memory","_logSequence","_recentLogs","Map","_dedupeTimeWindow","_maxDuplicatesPerWindow","setTimeout","import","then","module","_cache","CacheService","getInstance","console","info","warn","instance","isEnabled","system","subsystem","anyCategoryEnabled","_a","keys","some","getNextSequence","setDebug","debug","setVerboseMode","verbose","setDebugConfig","config","debug_verbose","debug_hierarchical","processHierarchicalConfig","setCategoryDebug","debug_api","_b","debug_parameters","_c","debug_websocket","_d","debug_layouts","_e","debug_rendering","_f","debug_cache","_g","debug_card","_h","debug_diagnostics","logConfigStatus","hierarchicalConfig","systemConfig","setSubsystemDebug","formatSystemStatus","enabledSubsystems","filter","join","setLogLevel","level","category","isDuplicate","now","Date","lastSeen","get","set","pruneRecentLogs","timestamp","entries","delete","log","component","message","options","restArgs","Error","Array","isArray","undefined","performanceData","logKey","sequence","timestampStr","toString","formattedComponent","groupCollapsed","startTime","duration","toFixed","groupEnd","args","shift","error","firstArg","startPerformance","label","endPerformance","assign","resetDebugConfig","clear","setEnabled","getSystemsStatus","result","getSubsystems","isCategoryEnabled","systemEnabled","charAt","toUpperCase","slice","subEnabled","InventreeCardEditor","LitElement","super","logger","_showConditionDialog","_editingConditionIndex","_conditionParameter","_conditionOperator","_conditionValue","_conditionAction","_conditionActionValue","_conditionTargetPartIds","_showActionDialog","_editingActionIndex","_actionLabel","_actionIcon","_actionParameter","_actionValue","_actionConfirmation","_actionConfirmationText","_conditionParameterType","_conditionPartId","_conditionParamName","_filterAttribute","_filterOperator","_filterValue","_parameterName","_parameterValue","disconnectedCallback","setConfig","_config","view_type","_updateConfig","newConfig","JSON","parse","stringify","value","fireEvent","render","hass","html","showVariantSettings","entity","_valueChanged","display","show_header","name","_j","_k","_l","_o","_m","columns","ev","_q","_p","grid_spacing","_s","_r","item_height","_v","_u","_t","style","image_size","nothing","_w","show_image","_x","show_name","_y","show_stock","_z","show_description","_0","show_category","_1","show_stock_status_border","_2","show_stock_status_colors","_3","show_buttons","_4","show_parameters","_6","_5","_7","_8","show_section","_9","collapsed_by_default","_10","group_parameters","_addCondition","_12","map","condition","index","parameter","_getOperatorLabel","operator","_getActionLabel","action","action_value","_editCondition","_removeCondition","_addAction","_14","_editAction","_removeAction","_16","_15","buttons","preset","_19","_18","_17","services","wled","_21","_20","_23","_22","entity_id","_25","_24","parameter_name","_28","_27","_26","print","_30","_29","_32","_31","template_id","_34","_33","_renderDirectApiConfig","_renderDebuggingSection","variant_view_type","auto_detect_variants","_renderPartsConfig","_renderConditionDialog","_renderActionDialog","_renderPerformanceSettings","_35","_37","_36","custom_view","tag","inventreeEntities","states","entityId","startsWith","attributes","items","selected_entities","includes","_entitySelected","friendly_name","_removeEntity","_addFilter","_showParameterFilterDialog","_addParameterFilter","filters","attribute","parameter_id","_removeFilter","select","entities","splice","field","detail","type","checked","propName","split","fields","current","getConfigForm","schema","selector","domain","multiple","getStubConfig","find","eid","existingFilters","newFilter","updatedFilters","targetPartIds","requestUpdate","_closeConditionDialog","_saveCondition","alert","rawTargetIds","trim","id","parseInt","isNaN","push","icon","confirmation","confirmation_text","_closeActionDialog","_saveAction","_renderActionValueInput","stopPropagation","direct_api","url","api_key","websocket_url","idle_render_time","systems","_valueChangedDebug","systemName","systemInfo","systemIndex","subsystemIndex","_getSubsystem","hierarchical","_updateSubsystem","allSubsystemsDisabled","subsystemKey","_formatSubsystemName","word","_getMethodDescription","method","_renderScheduledJobs","_showAddJobDialog","_getPerformanceSetting","categoryPath","setting","defaultValue","baseConfig","pathParts","effectivePathParts","unshift","part","_updatePerformanceSetting","isSecondsInput","parseFloat","currentLevel","performancePathPrefix","configPathWithinPerformance","targetObject","_parameterTypeChanged","parts","property","substring","allDisabled","sub","directApiEnabled","styles","customElement"],"mappings":"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"}