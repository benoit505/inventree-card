import{L as e,s as t,a,b as i,c as n}from"./inventree-card.js";const r=e.getInstance();class o{constructor(e,t){this.dispatch=e,this.getState=t,r.log("ConditionalEffectsEngine","Engine initialized.")}evaluateAndApplyEffects(){var e;const o=this.getState(),s=t(o),l=o.parameters.parameterValues,c=o.parts.partsById;if(r.log("[ConditionalEffectsEngine]","evaluateAndApplyEffects - START.",{level:"debug",processedConditionsCount:s.length,parameterValuesKeys:Object.keys(l).length}),!s||0===s.length)return r.log("ConditionalEffectsEngine","No processed conditions to evaluate. Clearing existing effects."),void this.dispatch(a({}));const d={};for(const t of s){let a=!1;const s=t.originalRule;let f,p=[];"*"===s.targetPartIds?p=Object.keys(c).map((e=>parseInt(e,10))).filter((e=>!isNaN(e))):Array.isArray(s.targetPartIds)&&(p=s.targetPartIds.filter((e=>"number"==typeof e&&!isNaN(e))));let b=`Condition ID: ${t.id}, Source: ${s.parameter}`;switch(t.sourceType){case"inventree_parameter":if(void 0!==t.partId&&t.parameterName){const a=l[t.partId];f=null===(e=null==a?void 0:a[t.parameterName])||void 0===e?void 0:e.data,b+=` (Part PK: ${t.partId}, Param: ${t.parameterName})`}else r.warn("ConditionalEffectsEngine","Missing partId or parameterName for inventree_parameter type.",{processedCond:t});break;case"inventree_attribute":if(void 0!==t.partId&&t.attributeName){const e=c[t.partId];f=null==e?void 0:e[t.attributeName],b+=` (Part PK: ${t.partId}, Attribute: ${t.attributeName})`}else r.warn("ConditionalEffectsEngine","Missing partId or attributeName for inventree_attribute type.",{processedCond:t});break;case"ha_entity_state":t.entityId?(f=n(o,t.entityId),b+=` (Entity: ${t.entityId}, State)`):r.warn("ConditionalEffectsEngine","Missing entityId for ha_entity_state type.",{processedCond:t});break;case"ha_entity_attribute":t.entityId&&t.haAttributeName?(f=i(o,t.entityId,t.haAttributeName),b+=` (Entity: ${t.entityId}, Attribute: ${t.haAttributeName})`):r.warn("ConditionalEffectsEngine","Missing entityId or haAttributeName for ha_entity_attribute type.",{processedCond:t});break;default:r.warn("ConditionalEffectsEngine",`Unhandled or unknown sourceType: ${t.sourceType}`,{processedCond:t}),f=void 0}if(null==f)switch(s.operator){case"exists":a=!1;break;case"is_empty":a=!0;break;default:a="equals"===s.operator&&(null===s.value||""===s.value)||"not_equals"===s.operator&&null!==s.value&&""!==s.value}else switch(s.operator){case"equals":a=String(f)===String(s.value);break;case"not_equals":a=String(f)!==String(s.value);break;case"contains":a=String(f).includes(String(s.value));break;case"exists":a=""!==String(f).trim();break;case"is_empty":a=""===String(f).trim();break;case"greater_than":const e=parseFloat(String(f)),t=parseFloat(String(s.value));a=!isNaN(e)&&!isNaN(t)&&e>t;break;case"less_than":const i=parseFloat(String(f)),n=parseFloat(String(s.value));a=!isNaN(i)&&!isNaN(n)&&i<n;break;default:r.warn("ConditionalEffectsEngine",`Unknown operator: ${s.operator}`,{rule:s,valueToEvaluateAgainst:f}),a=!1}if(a){r.log("ConditionalEffectsEngine",`Condition MET: ${b}`,{level:"debug",conditionId:t.id,originalRule:s,valueEvaluated:f,targetPartPks:p});for(const e of p){let a={};switch(s.action){case"filter":a.isVisible="show"===s.action_value;break;case"highlight":a.highlight=s.action_value;break;case"text_color":a.textColor=s.action_value;break;case"border":a.border=s.action_value;break;case"icon":a.icon=s.action_value;break;case"badge":a.badge=s.action_value;break;case"priority":a.priority=s.action_value;break;case"sort":case"show_section":r.log("ConditionalEffectsEngine",`Action type '${s.action}' requires specific handling not yet implemented.`,{rule:s});break;default:r.warn("ConditionalEffectsEngine",`Unknown action type: ${s.action}`,{rule:s})}Object.keys(a).length>0?(g=a,d[u=e]||(d[u]={}),d[u]=Object.assign(Object.assign({},d[u]),g)):r.warn("[ConditionalEffectsEngine]","effectToApply is empty, no effect merged.",{level:"debug",conditionId:t.id,action:s.action,actionValue:s.action_value,targetPartPks:p})}}else r.log("ConditionalEffectsEngine","Condition NOT MET",{level:"silly",conditionId:t.id,originalRuleParameter:s.parameter,evaluatedValue:f,comparedTo:s.value,operator:s.operator})}var u,g;r.log("[ConditionalEffectsEngine]","Final newEffects before dispatching setConditionalPartEffectsBatch",{level:"debug",newEffects:d}),this.dispatch(a(d)),r.log("ConditionalEffectsEngine","Finished evaluating conditions and dispatched effects batch.",{newEffectsCount:Object.keys(d).length})}}export{o as ConditionalEffectsEngine};
//# sourceMappingURL=ConditionalEffectsEngine-b87c8e6d.js.map
