import{L as e,s as t,a,b as r,c as i,i as n}from"./inventree-card.js";const s=e.getInstance(),o=e=>{switch(e.toLowerCase()){case"highlight":case"backgroundcolor":return"highlight";case"textcolor":case"color":return"textColor";case"border":return"border";case"icon":return"icon";case"badge":return"badge";case"opacity":return"opacity";case"priority":return"priority";default:const t=e,a={isVisible:!0};return Object.keys(a).includes(t)?t:null}};class l{constructor(e,t){this.dispatch=e,this.getState=t,s.log("ConditionalEffectsEngine","Engine initialized.")}evaluateAndApplyEffects(){const e=this.getState(),l=t(e),c=e.parameters.parameterValues,d=e.parts.partsById;if(s.log("[ConditionalEffectsEngine]","evaluateAndApplyEffects - START.",{level:"debug",processedConditionsCount:l.length,parameterValuesKeys:Object.keys(c).length}),!l||0===l.length)return s.log("ConditionalEffectsEngine","No processed conditions to evaluate. Clearing existing effects."),void this.dispatch(a({}));const f={};for(const t of l){let a=!1;const l=t.originalRule;let c,g=[];"*"===l.targetPartIds?g=Object.keys(d).map((e=>parseInt(e,10))).filter((e=>!isNaN(e))):Array.isArray(l.targetPartIds)&&(g=l.targetPartIds.filter((e=>"number"==typeof e&&!isNaN(e))));let y=`Condition ID: ${t.id}, Source: ${l.parameter}`;switch(t.sourceType){case"inventree_parameter":if(void 0!==t.partId&&t.parameterName){const a=n.endpoints.getPartParameters.select(t.partId)(e);if("fulfilled"===(null==a?void 0:a.status)&&a.data){const e=a.data.find((e=>{var a;return(null===(a=e.template_detail)||void 0===a?void 0:a.name)===t.parameterName}));c=null==e?void 0:e.data,s.log("[ConditionalEffectsEngine]",`Read from RTK Query: Part ${t.partId}, Param ${t.parameterName}, Value: ${c}`,{level:"debug"})}else s.warn("ConditionalEffectsEngine",`Parameters for part ${t.partId} not fulfilled in RTK Query cache. Status: ${null==a?void 0:a.status}. Param: ${t.parameterName}`,{queryStatus:null==a?void 0:a.status}),c=void 0;y+=` (Part PK: ${t.partId}, Param: ${t.parameterName})`}else s.warn("ConditionalEffectsEngine","Missing partId or parameterName for inventree_parameter type.",{processedCond:t});break;case"inventree_attribute":if(void 0!==t.partId&&t.attributeName){const e=d[t.partId];c=null==e?void 0:e[t.attributeName],y+=` (Part PK: ${t.partId}, Attribute: ${t.attributeName})`}else s.warn("ConditionalEffectsEngine","Missing partId or attributeName for inventree_attribute type.",{processedCond:t});break;case"ha_entity_state":t.entityId?(c=i(e,t.entityId),y+=` (Entity: ${t.entityId}, State)`):s.warn("ConditionalEffectsEngine","Missing entityId for ha_entity_state type.",{processedCond:t});break;case"ha_entity_attribute":t.entityId&&t.haAttributeName?(c=r(e,t.entityId,t.haAttributeName),y+=` (Entity: ${t.entityId}, Attribute: ${t.haAttributeName})`):s.warn("ConditionalEffectsEngine","Missing entityId or haAttributeName for ha_entity_attribute type.",{processedCond:t});break;default:s.warn("ConditionalEffectsEngine",`Unhandled or unknown sourceType: ${t.sourceType}`,{processedCond:t}),c=void 0}if(null==c)switch(l.operator){case"exists":a=!1;break;case"is_empty":a=!0;break;default:a="equals"===l.operator&&(null===l.value||""===l.value)||"not_equals"===l.operator&&null!==l.value&&""!==l.value}else{let e=l.operator;switch(String(l.operator)){case"=":e="equals";break;case"!=":e="not_equals";break;case">":e="greater_than";break;case"<":e="less_than"}switch(e){case"equals":a=String(c)===String(l.value);break;case"not_equals":a=String(c)!==String(l.value);break;case"contains":a=String(c).includes(String(l.value));break;case"exists":a=""!==String(c).trim();break;case"is_empty":a=""===String(c).trim();break;case"greater_than":const t=parseFloat(String(c)),r=parseFloat(String(l.value));a=!isNaN(t)&&!isNaN(r)&&t>r;break;case"less_than":const i=parseFloat(String(c)),n=parseFloat(String(l.value));a=!isNaN(i)&&!isNaN(n)&&i<n;break;default:s.warn("ConditionalEffectsEngine",`Unknown or unnormalized operator: ${e} (original: ${l.operator})`,{rule:l,valueToEvaluateAgainst:c}),a=!1}}if(a)if(s.log("ConditionalEffectsEngine",`Condition MET: ${y}`,{level:"debug",conditionId:t.id,originalRule:l,valueEvaluated:c,targetPartPks:g}),t.effects&&Array.isArray(t.effects))for(const e of t.effects){let a={},r=[];switch(s.log("CEE_EFFECT_DEBUG","Processing effectDef:",{data:e}),e.targetPartPks?"string"==typeof e.targetPartPks?r="all_loaded"===e.targetPartPks.toLowerCase()?g:e.targetPartPks.split(",").map((e=>parseInt(e.trim(),10))).filter((e=>!isNaN(e))):Array.isArray(e.targetPartPks)&&(r=e.targetPartPks):g&&g.length>0?r=g:void 0!==t.partId&&(r=[t.partId]),s.log("CEE_EFFECT_DEBUG","Resolved currentTargetPartPks:",{data:r}),0!==r.length||"set_style"!==e.type&&"set_visibility"!==e.type||s.warn("CEE",`No target part PKs resolved for effect type '${e.type}' and no fallback. Effect for rule '${l.name||t.id}' might not apply as expected. Effect ID: ${e.id}`),e.type){case"set_visibility":"boolean"==typeof e.isVisible&&(a.isVisible=e.isVisible);break;case"set_style":if(e.styleProperty&&void 0!==e.styleValue){const t=o(e.styleProperty);if(t)if("opacity"===t){const r=parseFloat(e.styleValue);isNaN(r)?s.warn("CEE",`Invalid opacity value: ${e.styleValue} for effect ID: ${e.id}. Must be a number.`):a[t]=r}else a[t]=e.styleValue;else s.warn("CEE",`Unknown styleProperty: ${e.styleProperty} in effect ID: ${e.id}`)}break;default:s.warn("ConditionalEffectsEngine",`Unknown effect type: ${e.type}`,{effectDef:e})}if(Object.keys(a).length>0&&r.length>0){s.log("CEE_EFFECT_DEBUG","Applying effect:",{data:{effectToApply:a,pks:r}});for(const e of r)p=a,f[u=e]||(f[u]={}),f[u]=Object.assign(Object.assign({},f[u]),p)}else s.warn("[ConditionalEffectsEngine]","effectToApply was empty for an effectDef, no effect merged.",{level:"debug",conditionId:t.id,effectDef:e,targetPartPks:g})}else s.warn("[ConditionalEffectsEngine]","Condition met, but processedCond.effects is missing or not an array.",{level:"debug",conditionId:t.id,originalRule:l});else s.log("ConditionalEffectsEngine","Condition NOT MET",{level:"silly",conditionId:t.id,originalRuleParameter:l.parameter,evaluatedValue:c,comparedTo:l.value,operator:l.operator})}var u,p;s.log("[ConditionalEffectsEngine]","Final newEffects before dispatching setVisualEffectsBatch",{level:"debug",newEffects:f}),this.dispatch(a(f)),s.log("ConditionalEffectsEngine","Finished evaluating conditions and dispatched effects batch.",{newEffectsCount:Object.keys(f).length})}}export{l as ConditionalEffectsEngine};
//# sourceMappingURL=ConditionalEffectsEngine-c6d7d40b.js.map
