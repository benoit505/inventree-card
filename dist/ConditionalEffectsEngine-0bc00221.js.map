{"version":3,"file":"ConditionalEffectsEngine-0bc00221.js","sources":["../src/core/ConditionalEffectsEngine.ts"],"sourcesContent":["import { RootState } from '../store';\nimport { ParameterDetail, InventreeItem, ParameterOperator, ProcessedCondition, ConditionRuleDefinition, EffectDefinition, ActionExecutionContext } from '../types';\nimport { VisualEffect } from '../store/slices/visualEffectsSlice';\nimport { selectProcessedConditions as selectProcessedConditionsFromLogic } from '../store/slices/conditionalLogicSlice';\nimport {\n    selectGenericHaEntityState,\n    selectGenericHaEntityActualState,\n    selectGenericHaEntityAttribute\n} from '../store/slices/genericHaStateSlice';\nimport { Logger } from '../utils/logger';\nimport { setVisualEffectsBatch } from '../store/slices/visualEffectsSlice';\nimport { AppDispatch } from '../store';\nimport { inventreeApi } from '../store/apis/inventreeApi';\nimport { actionEngine } from '../services/ActionEngine';\nimport { HomeAssistant } from 'custom-card-helpers';\n\nconst logger = Logger.getInstance();\n\n// Helper function to map styleProperty from EffectDefinition to VisualEffect keys\nconst mapStylePropertyToVisualEffectKey = (styleProperty: string): keyof VisualEffect | null => {\n    const lowerCaseProp = styleProperty.toLowerCase();\n    switch (lowerCaseProp) {\n        case 'highlight':\n        case 'backgroundcolor':\n            return 'highlight';\n        case 'textcolor':\n        case 'color':\n            return 'textColor';\n        case 'border':\n            return 'border';\n        case 'icon':\n            return 'icon';\n        case 'badge':\n            return 'badge';\n        case 'opacity':\n            return 'opacity';\n        case 'priority':\n            return 'priority';\n        // Add other direct mappings here if VisualEffect has more specific keys\n        // For example, if customClasses becomes a direct string property:\n        // case 'customclasses':\n        // return 'customClasses';\n        default:\n            // Check if it's a direct match to a VisualEffect key (for less common ones)\n            const directMatch = styleProperty as keyof VisualEffect;\n            const sampleVisualEffect: VisualEffect = { isVisible: true }; // Dummy object to check keys\n            if (Object.keys(sampleVisualEffect).includes(directMatch)) {\n                return directMatch;\n            }\n            return null;\n    }\n};\n\nexport class ConditionalEffectsEngine {\n    private dispatch: AppDispatch;\n    private getState: () => RootState;\n\n    constructor(dispatch: AppDispatch, getState: () => RootState) {\n        this.dispatch = dispatch;\n        this.getState = getState;\n        logger.log('ConditionalEffectsEngine', 'Engine initialized.');\n    }\n\n    public async evaluateAndApplyEffects(): Promise<void> {\n        const state = this.getState();\n        const conditions = selectProcessedConditionsFromLogic(state);\n        const allPartsById = state.parts.partsById;\n        const config = state.config;\n        const hass = config.hass as HomeAssistant | undefined;\n        const genericHaStates = state.genericHaStates as Record<string, any>;\n\n        logger.log('[ConditionalEffectsEngine]', 'evaluateAndApplyEffects - START.', {\n            processedConditionsCount: conditions.length,\n        });\n\n        if (!conditions || conditions.length === 0) {\n            this.dispatch(setVisualEffectsBatch({}));\n            return;\n        }\n\n        const newEffectsToApplyToParts: Record<number, VisualEffect> = {};\n\n        const mergeVisualEffect = (partId: number, visualEffect: Partial<VisualEffect>) => {\n            newEffectsToApplyToParts[partId] = { \n                ...(newEffectsToApplyToParts[partId] || {}), \n                ...visualEffect \n            } as VisualEffect;\n        };\n\n        for (const processedCond of conditions) {\n            let conditionResult = false;\n            const rule = processedCond.originalRule;\n            let valueToEvaluateAgainst: any;\n\n            let baseTargetPartPks: number[] = [];\n            if (rule.targetPartIds === '*') {\n                baseTargetPartPks = Object.keys(allPartsById).map(id => parseInt(id, 10)).filter(id => !isNaN(id));\n            } else if (Array.isArray(rule.targetPartIds)) {\n                baseTargetPartPks = rule.targetPartIds.filter((id: any): id is number => typeof id === 'number' && !isNaN(id));\n            } else if (typeof processedCond.partId === 'number') {\n                baseTargetPartPks = [processedCond.partId];\n            }\n\n            if ((processedCond.sourceType === 'inventree_parameter' || processedCond.sourceType === 'inventree_attribute') && typeof processedCond.partId !== 'number') {\n                logger.warn('CEE', `Skipping part-specific condition (ID: ${processedCond.id}) due to missing partId.`, { rule });\n                continue;\n            }\n\n            switch (processedCond.sourceType) {\n                case 'inventree_parameter':\n                    if (typeof processedCond.partId === 'number' && processedCond.parameterName) {\n                        const params = inventreeApi.endpoints.getPartParameters.select(processedCond.partId)(state)?.data;\n                        valueToEvaluateAgainst = params?.find(p => p.template_detail?.name === processedCond.parameterName)?.data;\n                    }\n                    break;\n                case 'inventree_attribute':\n                    if (typeof processedCond.partId === 'number' && processedCond.attributeName) {\n                        valueToEvaluateAgainst = allPartsById[processedCond.partId]?.[processedCond.attributeName];\n                    }\n                    break;\n                case 'ha_entity_state':\n                    if (processedCond.entityId) valueToEvaluateAgainst = selectGenericHaEntityActualState(state, processedCond.entityId);\n                    break;\n                case 'ha_entity_attribute':\n                    if (processedCond.entityId && processedCond.haAttributeName) valueToEvaluateAgainst = selectGenericHaEntityAttribute(state, processedCond.entityId, processedCond.haAttributeName);\n                    break;\n                default: valueToEvaluateAgainst = undefined; break;\n            }\n\n            const opStr = String(rule.operator);\n            let normalizedOp: ParameterOperator | string = opStr;\n            if (opStr === '=') normalizedOp = 'equals';\n            else if (opStr === '!=') normalizedOp = 'not_equals';\n            else if (opStr === '>') normalizedOp = 'greater_than';\n            else if (opStr === '<') normalizedOp = 'less_than';\n\n            if (valueToEvaluateAgainst === undefined || valueToEvaluateAgainst === null) {\n                switch (normalizedOp) {\n                    case 'exists': conditionResult = false; break;\n                    case 'is_empty': conditionResult = true; break;\n                    default: conditionResult = (normalizedOp === 'equals' && (rule.value === null || rule.value === '')) || \n                                           (normalizedOp === 'not_equals' && (rule.value !== null && rule.value !== '')); break;\n                }\n            } else {\n                switch (normalizedOp as ParameterOperator) {\n                    case 'equals': conditionResult = String(valueToEvaluateAgainst) === String(rule.value); break;\n                    case 'not_equals': conditionResult = String(valueToEvaluateAgainst) !== String(rule.value); break;\n                    case 'contains': conditionResult = String(valueToEvaluateAgainst).includes(String(rule.value)); break;\n                    case 'exists': conditionResult = String(valueToEvaluateAgainst).trim() !== ''; break;\n                    case 'is_empty': conditionResult = String(valueToEvaluateAgainst).trim() === ''; break;\n                    case 'greater_than': const vGt = parseFloat(String(valueToEvaluateAgainst)), rGt = parseFloat(String(rule.value)); conditionResult = !isNaN(vGt) && !isNaN(rGt) && vGt > rGt; break;\n                    case 'less_than': const vLt = parseFloat(String(valueToEvaluateAgainst)), rLt = parseFloat(String(rule.value)); conditionResult = !isNaN(vLt) && !isNaN(rLt) && vLt < rLt; break;\n                    default: \n                        logger.warn('CEE', `Unhandled operator '${normalizedOp}' for rule.`, { rule });\n                        conditionResult = false;\n                }\n            }\n\n            if (conditionResult) {\n                logger.log('CEE', `Condition TRUE (ID: ${processedCond.id}, RuleParam: ${rule.parameter}). Applying effects.`, { baseTargetPartPks });\n\n                if (processedCond.effects && Array.isArray(processedCond.effects)) {\n                    for (const effect of processedCond.effects) {\n                        let currentEffectTargetPks: number[] = baseTargetPartPks;\n                        if (effect.targetPartPks) {\n                            if (effect.targetPartPks === 'all_loaded') {\n                                currentEffectTargetPks = Object.keys(allPartsById).map(id => parseInt(id, 10)).filter(id => !isNaN(id));\n                            } else if (Array.isArray(effect.targetPartPks)){\n                                currentEffectTargetPks = effect.targetPartPks.filter((id: any): id is number => typeof id === 'number' && !isNaN(id));\n                            } else if (typeof effect.targetPartPks === 'string') { \n                                currentEffectTargetPks = effect.targetPartPks.split(',').map(pk => parseInt(pk.trim(),10)).filter(pk => !isNaN(pk));\n                            }\n                        }\n\n                        for (const pk of currentEffectTargetPks) {\n                            if (typeof pk !== 'number' || isNaN(pk)) continue;\n\n                            const currentPartForContext = allPartsById[pk];\n                            if (!currentPartForContext && (effect.type === 'trigger_custom_action' || effect.type === 'set_style' || effect.type === 'set_visibility')) {\n                                logger.warn('CEE', `Part PK ${pk} not found. Skipping effect.`, {effectType: effect.type});\n                                continue;\n                            }\n\n                            switch (effect.type) {\n                                case 'set_style':\n                                    if (effect.styleProperty && effect.styleValue !== undefined) {\n                                        const visualEffectKey = mapStylePropertyToVisualEffectKey(effect.styleProperty);\n                                        if (visualEffectKey) {\n                                            mergeVisualEffect(pk, { [visualEffectKey]: effect.styleValue });\n                                        }\n                                    }\n                                    break;\n                                case 'set_visibility':\n                                    if (typeof effect.isVisible === 'boolean') { \n                                        mergeVisualEffect(pk, { isVisible: effect.isVisible });\n                                    } else {\n                                        logger.warn('CEE', `Effect 'set_visibility' for PK ${pk} used non-boolean isVisible. EffectDef:`, {effect});\n                                        mergeVisualEffect(pk, { isVisible: (effect as any).value === 'show' }); \n                                    }\n                                    break;\n                                case 'trigger_custom_action':\n                                    if (effect.customActionId) {\n                                        logger.log('CEE', `Triggering custom action ID: ${effect.customActionId} for part PK: ${pk}`);\n                                        const executionContext: ActionExecutionContext & { hass?: HomeAssistant } = {\n                                            part: currentPartForContext,\n                                            hass: hass,\n                                            hassStates: genericHaStates,\n                                        };\n                                        actionEngine.executeAction(effect.customActionId, executionContext)\n                                          .catch(actionError => {\n                                                logger.error('CEE', `Error executing action ${effect.customActionId} from condition`, {pk, actionError});\n                                          });\n                                    }\n                                    break;\n                                default:\n                                    logger.warn('CEE', `Unknown effect type: ${(effect as any).type}`, { effect });\n                                    break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        this.dispatch(setVisualEffectsBatch(newEffectsToApplyToParts));\n        logger.log('[ConditionalEffectsEngine]', 'evaluateAndApplyEffects - END.', { appliedEffectsCount: Object.keys(newEffectsToApplyToParts).length });\n    }\n}\n\n// Example of how it might be instantiated and used (e.g., in a thunk or middleware)\n//\n// import { store } from '../store'; // Or get dispatch/getState from thunkAPI\n//\n// const effectsEngine = new ConditionalEffectsEngine(store.dispatch, store.getState);\n// effectsEngine.evaluateAndApplyEffects(); "],"names":["logger","Logger","getInstance","mapStylePropertyToVisualEffectKey","styleProperty","toLowerCase","directMatch","sampleVisualEffect","isVisible","Object","keys","includes","ConditionalEffectsEngine","constructor","dispatch","getState","this","log","evaluateAndApplyEffects","state","conditions","selectProcessedConditionsFromLogic","allPartsById","parts","partsById","hass","config","genericHaStates","processedConditionsCount","length","setVisualEffectsBatch","newEffectsToApplyToParts","mergeVisualEffect","partId","visualEffect","assign","processedCond","conditionResult","rule","originalRule","valueToEvaluateAgainst","baseTargetPartPks","targetPartIds","map","id","parseInt","filter","isNaN","Array","isArray","sourceType","warn","parameterName","params","_a","inventreeApi","endpoints","getPartParameters","select","data","_b","find","p","template_detail","name","attributeName","_c","entityId","selectGenericHaEntityActualState","haAttributeName","selectGenericHaEntityAttribute","undefined","opStr","String","operator","normalizedOp","value","trim","vGt","parseFloat","rGt","vLt","rLt","parameter","effects","effect","currentEffectTargetPks","targetPartPks","split","pk","currentPartForContext","type","styleValue","visualEffectKey","customActionId","executionContext","part","hassStates","actionEngine","executeAction","catch","actionError","error","effectType","appliedEffectsCount"],"mappings":"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"}